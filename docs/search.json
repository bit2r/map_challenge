[
  {
    "objectID": "day_01.html",
    "href": "day_01.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "1 아시아 대륙 색칠\n\n\n코드\n# Libraries Loading -------------------------------------------------------\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggtext)\nlibrary(maps)\nextrafont::loadfonts(\"win\")\n\n\n# Data Reading and Wrangling ----------------------------------------------\n# Generating pixel grid \nlat &lt;- tibble(lat = seq(-90, 90, by = .5))\nlong &lt;- tibble(long = seq(-180, 180, by = .5))\n\ndots &lt;- lat %&gt;% \n  full_join(long, by = character()) %&gt;% \n  as_tibble()\n\ndots &lt;- dots %&gt;% \n  mutate(country = map.where('world', long, lat),\n         lakes = map.where('lakes', long, lat)) %&gt;% \n  filter(!is.na(country) & is.na(lakes)) %&gt;% \n  dplyr::select(-lakes)\n\nworld &lt;- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\") %&gt;% \n  filter(region_wb != \"Antarctica\")\n\ndots &lt;- dots %&gt;% \n  mutate(\n    country = case_when(\n      country %in% c(\"Comoros:Grande Comore\", \"Comoros:Anjouan\") ~ \"Comoros\",\n      country %in% c(\"Cape Verde:Santo Antao\",\"Cape Verde:Sao Tiago\") ~ \"Cape Verde\",\n      country == \"Guinea-Bissau\" ~ \"Guinea Bissau\", \n      country == \"Equatorial Guinea:Rio Muni\" ~ \"Equatorial Guinea\", \n      country ==  \"Malawi:3\" ~ \"Malawi\",\n      country == \"Somalia:Somaliland\" ~ \"Somaliland\",\n      country == \"Tanzania\" ~ \"United Republic of Tanzania\", \n      TRUE ~ country))\n\nasia_dots &lt;- world %&gt;%\n  filter(continent == \"Asia\") %&gt;% \n  dplyr::select(admin, mapcolor7) %&gt;% \n  left_join(dots, by = c(\"admin\" = \"country\")) \n\n# Graphic -----------------------------------------------------------------\npalette &lt;- c(\"#8931EF\", \"#F2CA19\", \"#FF00BD\" , \"#0057E9\", \"#87E911\", \"#E11845\", \"#FF8A12\") \n\n# 2021 Version ----\nasia_dots %&gt;% \n  ggplot() + \n  geom_point(aes(x = long, y = lat, color = factor(mapcolor7)), size = .95) + \n  guides(color =\"none\") +\n  scale_color_manual(\n    values = palette\n  ) + \n  labs(\n    title = \"아시아\", \n    subtitle = glue::glue(\"1 대륙, {scales::comma(nrow(asia_dots))} 점\"), \n    caption = \"#30DayMapChallenge - 1일 : 대륙색칠\"\n  ) + \n  annotate(geom = \"text\", x = 130, y = 38, label = \"대한민국\", size = 4, family = \"MaruBuri\") + \n  annotate(geom = \"segment\", x = -23.5, y = 12, xend = -23.5, yend = 14.5, size = .125, color = \"white\") + \n  coord_fixed(clip = \"off\") + \n  theme_void(base_family = \"MaruBuri\") + \n  theme(\n    plot.background = element_rect(fill = \"#111111\",color = NA),\n    plot.title = element_text(hjust = .5, size = rel(3), color = \"white\", family = \"MaruBuri\", margin = margin(t = 25,b = 15)),\n    plot.subtitle = element_text(hjust = .5, size = rel(2.5), color = \"white\",family = \"MaruBuri\", face = \"bold\", margin = margin(b = 35)),\n    plot.caption = element_text(size = rel(1.125), hjust = .5, color = \"white\", family = \"MaruBuri\", margin = margin(b = 15))\n  )\n\n\n\n\n\n\n\n\n\n\n\n2 아시아 대륙 점\n\n\n코드\n# 2022 Version ---- \nasia_dots %&gt;% \n  ggplot() + \n  geom_point(aes(x = long, y = lat), color = \"#F61753\", size = .05) + \n  labs(\n    title = \"아시아\", \n    subtitle = glue::glue(\"1 대륙, {scales::comma(nrow(asia_dots))} 점\"), \n    caption = \"#30DayMapChallenge - 1일 : 대륙색칠\"\n  ) + \n  annotate(geom = \"text\", x = 130, y = 38, label = \"대한민국\", size = 4, family = \"MaruBuri\") + \n  annotate(geom = \"segment\", x = -23.5, y = 12, xend = -23.5, yend = 14.5, size = .125) + \n  coord_fixed(clip = \"off\") + \n  theme_void(base_family = \"MaruBuri\") + \n  theme(\n    plot.background = element_rect(fill = \"#FFFFFF\",color = NA),\n    plot.title = element_text(hjust = .5, size = rel(3),  family = \"MaruBuri\", margin = margin(t = 25,b = 15)),\n    plot.subtitle = element_text(hjust = .5, color =\"grey30\", size = rel(2.5), family = \"MaruBuri\", face = \"bold\", margin = margin(b = 35)),\n    plot.caption = element_text(size = rel(1.5), hjust = .5, family = \"MaruBuri\", margin = margin(b = 15))\n  )"
  },
  {
    "objectID": "day_02.html",
    "href": "day_02.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nGIS 101: How do I map data points in R"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "참고 웹사이트\n\n#30DayMapChallenge 🌎🌏🌎\n30 DAY MAP CHALLENGE IN R\nAbdoulMa/30DayMapChallenge"
  },
  {
    "objectID": "day_02.html#인구수",
    "href": "day_02.html#인구수",
    "title": "지도제작 대회",
    "section": "1.1 인구수",
    "text": "1.1 인구수\n\n\n코드\nlibrary(readxl)\nlibrary(tidyverse)\n\ngeonames_raw &lt;- read_excel(\"data/geonames-all-cities-with-a-population-1000@public.xlsx\") %&gt;% \n    janitor::clean_names()\n\nkorea_raw &lt;- geonames_raw %&gt;% \n  select(name, country_code, population, coordinates) %&gt;% \n  filter(country_code  == \"KR\") %&gt;% \n  separate(coordinates, into = c(\"lat\", \"long\"), sep = \",\", convert = TRUE)\n\n\nkorea &lt;- korea_raw %&gt;% \n  mutate(도시명 = c(\"한천리\", \"청송군\", \"청산\", \"함열\", \"동면\",\n\"유려\", \"심원\", \"법성\", \"연천\", \"동복\", \"산티옥\",\n\"난겐\", \"제주시\", \"안남\", \"금정\", \"상사\", \"승주\",\n\"불갑\", \"원주\", \"벌교\", \"법원\", \"광주\", \"신안\",\n\"군서\", \"군북\", \"신동\", \"조성\", \"문경\", \"임실\",\n\"용산동\", \"하성\", \"겸백\", \"영광\", \"예산\",\n\"양주\", \"당진\", \"상주\", \"고창\", \"해남\", \"주문진\",\n\"청주시\", \"진천\", \"가이게투리\", \"규암\", \"선원\",\n\"탄현\", \"울산\", \"의정부시\", \"상주\", \"문경\", \"가평\",\n\"현풍\", \"홍성\", \"정옥\", \"장성\", \"신현\",\n\"광명\", \"회남\", \"용산\", \"번암\", \"월곶\", \"장흥\",\n\"아이센\", \"영덕\", \"전산\", \"부여\", \"부산\", \"오산\",\n\"고성\", \"경산시\", \"군위\", \"장흥\", \"성남시\",\n\"미조\", \"옥곡\", \"대구\", \"김제\", \"김천\", \"익산\",\n\"광양\", \"통해\", \"동이\", \"오남\", \"봉강\", \"용화\",\n\"성환\", \"강포\", \"싱왕\", \"정읍\", \"강동\", \"청풍\",\n\"진상\", \"옹룡\", \"봉래\", \"인계\", \"비인\", \"공주\",\n\"충주\", \"안양시\", \"장평\", \"해안\", \"문덕\",\n\"미력\", \"해리\", \"물량\", \"구림\", \"대전\", \"고성\",\n\"교사이\", \"연무\", \"화남\", \"서상\", \"서석\", \"남면\",\n\"해령\", \"송광\", \"상하\", \"동계\", \"서울\", \"아산\",\n\"괴산\", \"하양\", \"진안군\", \"장안\", \"남양주\", \"안내\",\n\"교동\", \"진월\", \"주암\", \"대산\", \"영동\", \"백전\",\n\"토성\", \"공음\", \"담양\", \"보령\", \"속초\", \"광주\",\n\"구룡포\", \"강화군\", \"청양\", \"진주\", \"진잠\", \"안산시\",\n\"발금\", \"별량\", \"남면\", \"태백\", \"푸안\", \"화순\", \"화천\", \"전주\",\n\"지도\", \"이원\", \"화원\", \"서귀포\", \"병곡\", \"통진\",\n\"진접\", \"보성\", \"영암\", \"염산\", \"칠보\", \"아이센\",\n\"포항\", \"목포\", \"구미\", \"김해\", \"천안\", \"일광\",\n\"산서\", \"산내\", \"덕진\", \"대마\", \"완주\", \"수원\",\n\"평창\", \"군포\", \"인천\", \"화성시\", \"창원\", \"창수\",\n\"홍농\", \"양사\", \"광탄\", \"유치\", \"연일\", \"양평\",\n\"왜관\", \"심천\", \"무안\", \"강릉\", \"화도\", \"와부\",\n\"설천\", \"대합\", \"동래\", \"네이츠\", \"신탄신\", \"금산\",\n\"추풍령\", \"안동\", \"청남\", \"황간\", \"창녕\", \"여주\",\n\"밀양\", \"홍천\", \"철원\", \"한남\", \"세종\", \"반남\",\n\"금성\", \"하동\", \"영천\", \"춘천\", \"백수\", \"성수\",\n\"학산\", \"순천\", \"군산\", \"청평\", \"송강동\", \"수동\",\n\"외서\", \"낙월\", \"강진\", \"용안\", \"동래\", \"나주\",\n\"문산\", \"구리시\", \"창평\", \"하점\", \"압해\", \"도포\",\n\"군서\", \"흥해\", \"유성\", \"이양\", \"태산리\", \"부천시\",\n\"논산\", \"광양\", \"이천시\", \"여수\", \"웅상\", \"내선\",\n\"파주\", \"청성\", \"서산\", \"경주\", \"관촌\", \"상월\", \"시종\",\n\"구정\", \"동면\", \"마산\", \"고양시\", \"기장\", \"안성\",\n\"청하\", \"군북\", \"송해\", \"광적\", \"관인\", \"방산\",\n\"노동\", \"나산\", \"임자\", \"양구\", \"일로\", \"오천\",\n\"신서\", \"부평\", \"화양\", \"세지\", \"해보\", \"군남\",\n\"쌍치\", \"양산\", \"옥천\", \"구례\", \"푸발\", \"삼승\",\n\"삼산\", \"신안\", \"정량\", \"해제\")) %&gt;% \n  filter(population &gt; 0) %&gt;% \n  arrange(desc(population))\n\nkorea\n#&gt; # A tibble: 130 × 6\n#&gt;    name        country_code population   lat  long 도시명\n#&gt;    &lt;chr&gt;       &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; \n#&gt;  1 Seoul       KR             10349312  37.6  127. 서울  \n#&gt;  2 Busan       KR              3678555  35.1  129. 부산  \n#&gt;  3 Incheon     KR              2954955  37.5  127. 인천  \n#&gt;  4 Daegu       KR              2566540  35.9  129. 대구  \n#&gt;  5 Gwangju     KR              1490092  35.2  127. 광주  \n#&gt;  6 Daejeon     KR              1469543  36.3  127. 대전  \n#&gt;  7 Suwon       KR              1241311  37.3  127. 수원  \n#&gt;  8 Goyang-si   KR              1073069  37.7  127. 고양시\n#&gt;  9 Seongnam-si KR              1031935  37.4  127. 성남시\n#&gt; 10 Ulsan       KR               962865  35.5  129. 울산  \n#&gt; # ℹ 120 more rows"
  },
  {
    "objectID": "day_02.html#df-sf-객체",
    "href": "day_02.html#df-sf-객체",
    "title": "지도제작 대회",
    "section": "2.1 DF → sf 객체",
    "text": "2.1 DF → sf 객체\n\n\n코드\ncrsLONGLAT &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nkorea_sf &lt;- korea |&gt;\n    sf::st_as_sf(\n        coords = c(\"long\", \"lat\"),\n        crs = crsLONGLAT\n    )\n\nggplot() +\n    geom_sf(\n        data = korea_sf,\n        color = \"#7d1d53\", fill = \"#7d1d53\"\n    )"
  },
  {
    "objectID": "day_02.html#shapefile",
    "href": "day_02.html#shapefile",
    "title": "지도제작 대회",
    "section": "2.2 shapefile",
    "text": "2.2 shapefile\ngiscoR 유로스탯 - GISCO(유럽집행위원회 지리정보시스템)에서 데이터를 다운로드 없이 바로 사용할 수 있는 가벼운 API를 제공한다.\n\n\n코드\nkr &lt;- giscoR::gisco_get_countries(\n    resolution = \"1\",\n    country = \"KOR\") |&gt;\n    sf::st_transform(crsLONGLAT)\n\nplot(kr)"
  },
  {
    "objectID": "day_02.html#결합",
    "href": "day_02.html#결합",
    "title": "지도제작 대회",
    "section": "2.3 결합",
    "text": "2.3 결합\n\n\n코드\nkr_pop_sf &lt;- sf::st_intersection(korea_sf, kr)\n\nplot(sf::st_geometry(kr_pop_sf))"
  },
  {
    "objectID": "day_03.html",
    "href": "day_03.html",
    "title": "스파이크(Spike map)",
    "section": "",
    "text": "소스코드\n\n\n\nMaking crisp spike maps with R\n\n\n\n1 패키지\n\n\n코드\n### 0. PACKAGES\n### ------------------------\nlibs &lt;- c(\n    \"tidyverse\", \"R.utils\",\n    \"httr\", \"sf\", \"stars\",\n    \"rayshader\"\n)\n\n# install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n    install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n\n\n\n\n2 인구 데이터\n인도주의적 영역에서 신뢰할 수 있는 인구 데이터를 확보하는 것은 생명을 구하는 활동의 우선순위를 정하는 데 매우 중요하다. KONTUR: Population Density Dataset 인구 데이터 세트는 400m 해상도의 인구 수를 가진 H3 육각형으로 표현된다. 일반적인 정사각형 그리드 대신 H3 그리드를 사용하는 이유는 정사각형과 달리 육각형은 육각형 중심점과 인접한 셀의 중심 사이의 거리가 같기 때문이다. Republic of Korea: Population Density for 400m H3 Hexagons 데이터도 다운로드 가능하다.\n\n\n코드\n### 1. DOWNLOAD & UNZIP DATA\n### ------------------------\nurl &lt;-\n    \"https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_KR_20220630.gpkg.gz\"\nfile_name &lt;- \"korea-population.gpkg.gz\"\n\nget_population_data &lt;- function() {\n    res &lt;- httr::GET(\n        url,\n        write_disk(file_name),\n        progress()\n    )\n\n    R.utils::gunzip(file_name, remove = F)\n}\n\nget_population_data()\n\n\n\n\n3 데이터 불러오기\n\n\n코드\n### 2. LOAD DATA\n### -------------\nload_file_name &lt;- gsub(\".gz\", \"\", \"korea-population.gpkg.gz\")\n\ncrsWGS &lt;- \"+proj=tmerc +lat_0=38 +lon_0=128 +k=0.9999 +x_0=400000 +y_0=600000 +ellps=bessel +towgs84=-115.8,474.99,674.11,1.16,-2.31,-1.63,6.43 +units=m +no_defs\"\n\nget_population_data &lt;- function() {\n    pop_df &lt;- sf::st_read(\n        load_file_name\n    ) |&gt;\n        sf::st_transform(crs = crsWGS)\n}\n\npop_sf &lt;- get_population_data()\n#&gt; Reading layer `population' from data source \n#&gt;   `D:\\tcs\\map_challenge\\korea-population.gpkg' using driver `GPKG'\n#&gt; Simple feature collection with 74131 features and 2 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 13871420 ymin: 3909557 xmax: 14680470 ymax: 4667313\n#&gt; Projected CRS: WGS 84 / Pseudo-Mercator\n\nhead(pop_sf)\n#&gt; Simple feature collection with 6 features and 2 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 411917.5 ymin: 560711.5 xmax: 457833.9 ymax: 576628\n#&gt; CRS:           +proj=tmerc +lat_0=38 +lon_0=128 +k=0.9999 +x_0=400000 +y_0=600000 +ellps=bessel +towgs84=-115.8,474.99,674.11,1.16,-2.31,-1.63,6.43 +units=m +no_defs\n#&gt;                h3 population                           geom\n#&gt; 1 8830ec4415fffff         51 POLYGON ((436278.5 568529.6...\n#&gt; 2 8830ec4319fffff         96 POLYGON ((419056.4 563804.4...\n#&gt; 3 8830ec42e5fffff         45 POLYGON ((422803.1 566238.5...\n#&gt; 4 8830ec611bfffff        149 POLYGON ((457833.9 560977.9...\n#&gt; 5 8830ec52e7fffff         37 POLYGON ((412671.2 575918.4...\n#&gt; 6 8830ec51d7fffff        188 POLYGON ((415418.9 568732.5...\nggplot() +\n    geom_sf(\n        data = pop_sf,\n        color = \"grey10\", fill = \"grey10\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n4 Shape to Raster\n\n\n코드\n### 3. SHP TO RASTER\n### ----------------\n\nbb &lt;- sf::st_bbox(pop_sf)\n\nget_raster_size &lt;- function() {\n    height &lt;- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymax\"]]))\n    )\n    width &lt;- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmax\"]], bb[[\"ymin\"]]))\n    )\n\n    if (height &gt; width) {\n        height_ratio &lt;- 1\n        width_ratio &lt;- width / height\n    } else {\n        width_ratio &lt;- 1\n        height_ratio &lt;- height / width\n    }\n\n    return(list(width_ratio, height_ratio))\n}\nwidth_ratio &lt;- get_raster_size()[[1]]\nheight_ratio &lt;- get_raster_size()[[2]]\n\nsize &lt;- 3000\nwidth &lt;- round((size * width_ratio), 0)\nheight &lt;- round((size * height_ratio), 0)\n\nget_population_raster &lt;- function() {\n    pop_rast &lt;- stars::st_rasterize(\n        pop_sf |&gt;\n            dplyr::select(population, geom),\n        nx = width, ny = height\n    )\n\n    return(pop_rast)\n}\n\npop_rast &lt;- get_population_raster()\nplot(pop_rast)\n\npop_mat &lt;- pop_rast |&gt;\n    as(\"Raster\") |&gt;\n    rayshader::raster_to_matrix()\n\nlibrary(MetBrewer)\n# Specify the palette name in its own variable so that\n# we can reference it easily later.\npal &lt;- \"Demuth\"\ncolors &lt;- met.brewer(pal)\n\n# cols &lt;- rev(c(\n#     '#00004d', '#342863', '#595078', '#7d7b8a', '#a7a88b'\n# ))\n\ntexture &lt;- grDevices::colorRampPalette(colors)(256)\n\n# Create the initial 3D object\npop_mat |&gt;\n    rayshader::height_shade(texture = texture) |&gt;\n    rayshader::plot_3d(\n        heightmap = pop_mat,\n        solid = F,\n        soliddepth = 0,\n        zscale = 15,\n        shadowdepth = 0,\n        shadow_darkness = .95,\n        windowsize = c(800, 800),\n        phi = 65,\n        zoom = .65,\n        theta = -30,\n        background = \"white\"\n    )\n\n# Use this to adjust the view after building the window object\nrayshader::render_camera(phi = 75, zoom = .7, theta = 0)\n\nlibrary(rayrender)\n\nrayshader::render_highquality(\n    filename = \"images/korea_population_2022.png\",\n    preview = FALSE,\n    light = T,\n    lightdirection = 225,\n    lightaltitude = 60,\n    lightintensity = 400,\n    interactive = F,\n    width = width, height = height\n)"
  },
  {
    "objectID": "day_04.html",
    "href": "day_04.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nCreate crisp topographic maps with R\n\n\n\n1 패키지\n\n\n코드\n### 0. PACKAGES\n### ------------------------\nlibs &lt;- c(\n    \"elevatr\", \"terra\", \"tidyverse\",\n    \"sf\", \"giscoR\", \"osmdata\", \"marmap\"\n)\n\n# install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n    install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n\n\n\n\n2 국가 데이터\n\n\n코드\n# 1. GET COUNTRY MAP\n#------------------\ncrsLONGLAT &lt;- \"+proj=longlat +datum=WGS84 +no_defs\"\nget_country_sf &lt;- function() {\n    country_sf &lt;- giscoR::gisco_get_countries(\n        year = \"2020\",\n        epsg = \"4326\",\n        resolution = \"10\",\n        country = \"KR\"\n    ) |&gt;\n        sf::st_transform(crs = crsLONGLAT)\n\n    return(country_sf)\n}\n\ncountry_sf &lt;- get_country_sf()\n\n\n\n\n3 국가 고도 데이터\n\n\n코드\n# 2. GET COUNTRY ELEVATION DATA\n#------------------------------\nget_elevation_data &lt;- function() {\n    country_elevation &lt;- elevatr::get_elev_raster(\n        locations = country_sf,\n        z = 7,\n        clip = \"locations\"\n    )\n\n    return(country_elevation)\n}\n\ncountry_elevation &lt;- get_elevation_data()\nterra::plot(country_elevation)\n\n\n\n\n4 BBOX 고도 데이터\n\n\n코드\n# 3. GET BBOX ELEVATION DATA\n#------------------------------\nget_elevation_data_bbox &lt;- function() {\n    country_elevation &lt;- elevatr::get_elev_raster(\n        locations = country_sf,\n        z = 7,\n        clip = \"bbox\"\n    )\n\n    return(country_elevation)\n}\n\ncountry_elevation &lt;- get_elevation_data_bbox() |&gt;\n    terra::rast()\n\n\n\n\n\n\n\n\n\n코드\n# 4. PLOT\n#---------\nkr_elevation_gg &lt;- country_elevation |&gt;\n    as.data.frame(xy = TRUE) |&gt; \n    ggplot() +\n    geom_tile(\n        aes(x = x, y = y, fill = fileb78875126249 )\n    ) +\n    geom_sf(\n        data = country_sf,\n        fill = \"transparent\", color = \"yellow\", size = .25\n    ) +\n    theme_void()\n\nggsave(\n    filename = \"images/kr_blue_map.png\", width = 7, \n    height = 8.5, dpi = 600, device = \"png\", \n    kr_elevation_gg, bg = \"white\"\n)\n\n\n\n\n\n\n\n\n\n5 시각화\n\n\n코드\n# 7. FINAL MAP\n#-------------\n\ncountry_elevation_df &lt;- country_elevation |&gt;\n    as.data.frame(xy = T) |&gt;\n    na.omit()\n\nnames(country_elevation_df)[3] &lt;- \"elevation\"\n\ncountry_map &lt;-\n    ggplot(data = country_elevation_df) +\n    geom_raster(\n        aes(x = x, y = y, fill = elevation),\n        alpha = 1\n    ) +\n    marmap::scale_fill_etopo() +\n    coord_sf(crs = crsLONGLAT) +\n    labs(\n        x = \"\",\n        y = \"\",\n        title = \"\",\n        subtitle = \"\",\n        caption = \"\"\n    ) +\n    theme_minimal() +\n    theme(\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.margin = unit(c(t = 0, r = 0, b = 0, l = 0), \"cm\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        panel.border = element_blank()\n    )\n\ncountry_map\n\nggsave(\n    filename = \"images/korea_topo_map.png\", width = 7, \n    height = 8.5, dpi = 600, device = \"png\", \n    country_map, bg = \"white\"\n)\n\n\n\n\n\n\n\n\n\n6 추가작업\nhttp://bboxfinder.com/ 에서 제거할 영역을 선정한다.\n\n\n코드\n# 5. CROP AREA\n#--------------------\n# 7.805786,38.779781,10.134888,41.294317\nget_area_bbox &lt;- function() {\n    xmin &lt;- 7.805786\n    xmax &lt;- 10.134888\n    ymin &lt;- 38.779781\n    ymax &lt;- 41.294317\n\n    bbox &lt;- sf::st_sfc(\n        sf::st_polygon(list(cbind(\n            c(xmin, xmax, xmax, xmin, xmin),\n            c(ymin, ymin, ymax, ymax, ymin)\n        ))),\n        crs = crsLONGLAT\n    )\n\n    return(bbox)\n}\n\nbbox &lt;- get_area_bbox()\n\ncrop_area_with_polygon &lt;- function() {\n    bbox_vect &lt;- terra::vect(bbox)\n    bbox_raster &lt;- terra::crop(country_elevation, bbox_vect)\n    bbox_raster_final &lt;- terra::mask(\n        bbox_raster, bbox_vect\n    )\n    return(bbox_raster_final)\n}\n\nbbox_raster_final &lt;- crop_area_with_polygon()\n\nbbox_raster_final |&gt;\n    as.data.frame(xy = T) |&gt;\n    ggplot() +\n    geom_tile(\n        aes(x = x, y = y, fill = file514862c13e19)\n    ) +\n    geom_sf(\n        data = country_sf,\n        fill = \"transparent\", color = \"black\", size = .25\n    ) +\n    theme_void()\n\n# 6. GET REGION LINES\n#--------------------\nregion &lt;- \"Sardinia\"\n# define longlat projection\n\nsardinia_sf &lt;- osmdata::getbb(\n    region,\n    format_out = \"sf_polygon\"\n)\n\nsardinia_sf\n\nggplot() +\n    geom_sf(\n        data = sardinia_sf$multipolygon,\n        color = \"red\", fill = \"grey80\", size = .5\n    ) +\n    theme_void()\n\ncrop_region_with_polygon &lt;- function() {\n    region_vect &lt;- terra::vect(sardinia_sf$multipolygon)\n    region_raster &lt;- terra::crop(country_elevation, region_vect)\n    region_raster_final &lt;- terra::mask(\n        region_raster, region_vect\n    )\n    return(region_raster_final)\n}\n\nregion_raster_final &lt;- crop_region_with_polygon()\n\nregion_raster_final |&gt;\n    as.data.frame(xy = T) |&gt;\n    ggplot() +\n    geom_tile(\n        aes(x = x, y = y, fill = file514862c13e19)\n    ) +\n    geom_sf(\n        data = country_sf,\n        fill = \"transparent\", color = \"black\", size = .25\n    ) +\n    theme_void()"
  },
  {
    "objectID": "day_05.html",
    "href": "day_05.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\n3D digital elevation maps with R\n\n\n\n1 패키지\n\n\n코드\n# install rayvista\n# devtools::install_github(\"h-a-graham/rayvista\", dependencies = T)\n# # install elevatr\n# devtools::install_github(\"jhollist/elevatr\")\n# \n# remotes::install_github(\"tylermorganwall/rayshader\")\n# remotes::install_github(\"tylermorganwall/rayrender\")\n# remotes::install_github(\"dmurdoch/rgl\")\n\n# libraries we need\nlibs &lt;- c(\n    \"rayvista\", \"elevatr\",\n    \"rayshader\", \"sf\", \"giscoR\"\n)\n\n# install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n    install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n\ncrs_LONGLAT &lt;- \"+proj=longlat +datum=WGS84 +no_defs\"\n\n\n\n\n2 대한민국\n\n\n코드\n# 3. RAYVISTA - COUNTRY\n#----------------------\n\nkorea_sf &lt;- giscoR::gisco_get_countries(country = \"KR\",\n                                        resolution = \"1\") |&gt; \n  sf::st_transform(crs = crs_LONGLAT)\n\n\n\ncountry_elevation &lt;- elevatr::get_elev_raster(\n    locations = korea_sf,\n    z = 7,\n    clip = \"locations\"\n)\n\n\nnames(country_elevation) &lt;- \"elevation\"\n\nrgl::close3d()\n\nkorea_dem &lt;- rayvista::plot_3d_vista(\n    dem = country_elevation$elevation,\n    overlay_detail = 11,\n    zscale = 10,\n    zoom = .8,\n    phi = 85,\n    theta = 0,\n    solid = F,\n    windowsize = c(800, 800)\n)\n\nrayshader::render_camera(phi = 75, zoom = .7, theta = 0)\n\nrayshader::render_highquality(\n    filename = \"images/korea-dem.png\",\n    preview = FALSE,\n    light = T,\n    lightdirection = 225,\n    lightaltitude = 60,\n    lightintensity = 400,\n    parallel = TRUE,\n    width = 4000,\n    height = 4000,\n    interactive = FALSE\n)\n\n\n\n\n\n\n\n\n\n3 독도\n\n\n코드\nget_area_bbox &lt;- function() {\n    xmin &lt;- 131.860035\n    ymin &lt;- 37.237007\n    xmax &lt;- 131.874372\n    ymax &lt;- 37.245153\n\n    bbox &lt;- sf::st_sfc(\n        sf::st_polygon(\n            list(\n                cbind(\n                    c(xmin, xmax, xmax, xmin, xmin),\n                    c(ymin, ymin, ymax, ymax, ymin)\n                )\n            )\n        ), crs = crs_LONGLAT\n    ) |&gt; sf::st_as_sf()\n\n    return(bbox)\n}\n\ndokdo_bbox &lt;- get_area_bbox()\n\nrgl::close3d()\n\ndokdo_dem &lt;- rayvista::plot_3d_vista(\n    req_area = dokdo_bbox,\n    phi = 80,\n    theta = 0,\n    zscale = 0.1,\n    outlier_filter = .001\n)\n\nrayshader::render_snapshot(\n    filename = \"images/dokdo.png\",\n    clear = T\n)\n\n\n\n\n4 독도 (위경도)\n\n\n코드\n.lat  &lt;- (37.237007 + 37.245153) / 2\n.long &lt;- (131.860035 + 131.874372) / 2\n \ndokdo &lt;- plot_3d_vista(lat = .lat, long = .long,\n    radius =1000,\n    zscale = 5,\n    zoom = .8,\n    solid = TRUE,\n    elevation_detail = 13,\n    overlay_detail = 15,\n    theta = 0,\n    windowsize = 800)\n\nrayshader::render_camera(\n    zoom = .7, theta = 0, phi = 30\n)\n\nrayshader::render_highquality(\n    filename = \"images/dokdo_highqual.png\",\n    preview = T,\n    light = T,\n    lightdirection = 225,\n    lightintensity = 1200,\n    lightaltitude = 60,\n    interactive = F,\n    width = 4000,\n    height = 4000\n)"
  },
  {
    "objectID": "docs/day_04.html",
    "href": "docs/day_04.html",
    "title": "스파이크(Spike map)",
    "section": "",
    "text": "소스코드\n\n\n\nMaking crisp spike maps with R\n\n\n\n1 패키지\n\n\n코드\n### 0. PACKAGES\n### ------------------------\nlibs &lt;- c(\n    \"tidyverse\", \"R.utils\",\n    \"httr\", \"sf\", \"stars\",\n    \"rayshader\"\n)\n\n# install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n    install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n\n\n\n\n2 인구 데이터\n인도주의적 영역에서 신뢰할 수 있는 인구 데이터를 확보하는 것은 생명을 구하는 활동의 우선순위를 정하는 데 매우 중요하다. KONTUR: Population Density Dataset 인구 데이터 세트는 400m 해상도의 인구 수를 가진 H3 육각형으로 표현된다. 일반적인 정사각형 그리드 대신 H3 그리드를 사용하는 이유는 정사각형과 달리 육각형은 육각형 중심점과 인접한 셀의 중심 사이의 거리가 같기 때문이다. Republic of Korea: Population Density for 400m H3 Hexagons 데이터도 다운로드 가능하다.\n\n\n코드\n### 1. DOWNLOAD & UNZIP DATA\n### ------------------------\nurl &lt;-\n    \"https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_KR_20220630.gpkg.gz\"\nfile_name &lt;- \"korea-population.gpkg.gz\"\n\nget_population_data &lt;- function() {\n    res &lt;- httr::GET(\n        url,\n        write_disk(file_name),\n        progress()\n    )\n\n    R.utils::gunzip(file_name, remove = F)\n}\n\nget_population_data()\n\n\n\n\n3 데이터 불러오기\n\n\n코드\n### 2. LOAD DATA\n### -------------\nload_file_name &lt;- gsub(\".gz\", \"\", \"korea-population.gpkg.gz\")\n\ncrsWGS &lt;- \"+proj=tmerc +lat_0=38 +lon_0=128 +k=0.9999 +x_0=400000 +y_0=600000 +ellps=bessel +towgs84=-115.8,474.99,674.11,1.16,-2.31,-1.63,6.43 +units=m +no_defs\"\n\nget_population_data &lt;- function() {\n    pop_df &lt;- sf::st_read(\n        load_file_name\n    ) |&gt;\n        sf::st_transform(crs = crsWGS)\n}\n\npop_sf &lt;- get_population_data()\n#&gt; Reading layer `population' from data source \n#&gt;   `D:\\tcs\\map_challenge\\docs\\korea-population.gpkg' using driver `GPKG'\n#&gt; Simple feature collection with 74131 features and 2 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 13871420 ymin: 3909557 xmax: 14680470 ymax: 4667313\n#&gt; Projected CRS: WGS 84 / Pseudo-Mercator\n\nhead(pop_sf)\n#&gt; Simple feature collection with 6 features and 2 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 411917.5 ymin: 560711.5 xmax: 457833.9 ymax: 576628\n#&gt; CRS:           +proj=tmerc +lat_0=38 +lon_0=128 +k=0.9999 +x_0=400000 +y_0=600000 +ellps=bessel +towgs84=-115.8,474.99,674.11,1.16,-2.31,-1.63,6.43 +units=m +no_defs\n#&gt;                h3 population                           geom\n#&gt; 1 8830ec4415fffff         51 POLYGON ((436278.5 568529.6...\n#&gt; 2 8830ec4319fffff         96 POLYGON ((419056.4 563804.4...\n#&gt; 3 8830ec42e5fffff         45 POLYGON ((422803.1 566238.5...\n#&gt; 4 8830ec611bfffff        149 POLYGON ((457833.9 560977.9...\n#&gt; 5 8830ec52e7fffff         37 POLYGON ((412671.2 575918.4...\n#&gt; 6 8830ec51d7fffff        188 POLYGON ((415418.9 568732.5...\nggplot() +\n    geom_sf(\n        data = pop_sf,\n        color = \"grey10\", fill = \"grey10\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n4 Shape to Raster\n\n\n코드\n### 3. SHP TO RASTER\n### ----------------\n\nbb &lt;- sf::st_bbox(pop_sf)\n\nget_raster_size &lt;- function() {\n    height &lt;- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymax\"]]))\n    )\n    width &lt;- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmax\"]], bb[[\"ymin\"]]))\n    )\n\n    if (height &gt; width) {\n        height_ratio &lt;- 1\n        width_ratio &lt;- width / height\n    } else {\n        width_ratio &lt;- 1\n        height_ratio &lt;- height / width\n    }\n\n    return(list(width_ratio, height_ratio))\n}\nwidth_ratio &lt;- get_raster_size()[[1]]\nheight_ratio &lt;- get_raster_size()[[2]]\n\nsize &lt;- 3000\nwidth &lt;- round((size * width_ratio), 0)\nheight &lt;- round((size * height_ratio), 0)\n\nget_population_raster &lt;- function() {\n    pop_rast &lt;- stars::st_rasterize(\n        pop_sf |&gt;\n            dplyr::select(population, geom),\n        nx = width, ny = height\n    )\n\n    return(pop_rast)\n}\n\npop_rast &lt;- get_population_raster()\nplot(pop_rast)\n\npop_mat &lt;- pop_rast |&gt;\n    as(\"Raster\") |&gt;\n    rayshader::raster_to_matrix()\n\nlibrary(MetBrewer)\n# Specify the palette name in its own variable so that\n# we can reference it easily later.\npal &lt;- \"Demuth\"\ncolors &lt;- met.brewer(pal)\n\n# cols &lt;- rev(c(\n#     '#00004d', '#342863', '#595078', '#7d7b8a', '#a7a88b'\n# ))\n\ntexture &lt;- grDevices::colorRampPalette(colors)(256)\n\n# Create the initial 3D object\npop_mat |&gt;\n    rayshader::height_shade(texture = texture) |&gt;\n    rayshader::plot_3d(\n        heightmap = pop_mat,\n        solid = F,\n        soliddepth = 0,\n        zscale = 15,\n        shadowdepth = 0,\n        shadow_darkness = .95,\n        windowsize = c(800, 800),\n        phi = 65,\n        zoom = .65,\n        theta = -30,\n        background = \"white\"\n    )\n\n# Use this to adjust the view after building the window object\nrayshader::render_camera(phi = 75, zoom = .7, theta = 0)\n\nlibrary(rayrender)\n\nrayshader::render_highquality(\n    filename = \"images/korea_population_2022.png\",\n    preview = FALSE,\n    light = T,\n    lightdirection = 225,\n    lightaltitude = 60,\n    lightintensity = 400,\n    interactive = F,\n    width = width, height = height\n)"
  },
  {
    "objectID": "day_06.html",
    "href": "day_06.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nFelixAnalytix/YouTube"
  },
  {
    "objectID": "day_06.html#지도",
    "href": "day_06.html#지도",
    "title": "지도제작 대회",
    "section": "2.1 지도",
    "text": "2.1 지도\n\n\n코드\nworld &lt;- ne_countries(scale=\"medium\", returnclass=\"sf\") %&gt;%\n  filter(admin != \"Antarctica\")\n\n## ----Change World map projection-----------------\n# Mollweide proj\ntarget_crs &lt;- \"+proj=longlat +datum=WGS84 +no_defs\"\n\nworld_wsg &lt;- world %&gt;%\n  st_transform(crs = target_crs)"
  },
  {
    "objectID": "day_06.html#실업율",
    "href": "day_06.html#실업율",
    "title": "지도제작 대회",
    "section": "2.2 실업율",
    "text": "2.2 실업율\n\n\n코드\n## ----Get data from the World Bank----------------\n# Example: Unemployment (% of labor force)\n# https://data.worldbank.org/indicator/SL.UEM.TOTL.ZS\nind &lt;- \"SL.UEM.TOTL.ZS\"\n\nindicator_info &lt;- wb_cachelist$indicators %&gt;%\n  filter(indicator_id == ind)\n\nindicator_info$indicator\n#&gt; [1] \"Unemployment, total (% of total labor force) (modeled ILO estimate)\"\n\n\n## ----Download data from World Bank---------------\ndf &lt;- wb_data(ind, start_date = 2020) %&gt;%\n  filter(date == 2020)\n\nglimpse(df)\n#&gt; Rows: 217\n#&gt; Columns: 9\n#&gt; $ iso2c          &lt;chr&gt; \"AW\", \"AF\", \"AO\", \"AL\", \"AD\", \"AE\", \"AR\", \"AM\", \"AS\", \"…\n#&gt; $ iso3c          &lt;chr&gt; \"ABW\", \"AFG\", \"AGO\", \"ALB\", \"AND\", \"ARE\", \"ARG\", \"ARM\",…\n#&gt; $ country        &lt;chr&gt; \"Aruba\", \"Afghanistan\", \"Angola\", \"Albania\", \"Andorra\",…\n#&gt; $ date           &lt;dbl&gt; 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2…\n#&gt; $ SL.UEM.TOTL.ZS &lt;dbl&gt; NA, 11.710, 10.350, 13.067, NA, 4.290, 11.460, 12.180, …\n#&gt; $ unit           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ obs_status     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ footnote       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ last_updated   &lt;date&gt; 2023-05-10, 2023-05-10, 2023-05-10, 2023-05-10, 2023-0…"
  },
  {
    "objectID": "day_06.html#전세계",
    "href": "day_06.html#전세계",
    "title": "지도제작 대회",
    "section": "3.1 전세계",
    "text": "3.1 전세계\n\n\n코드\n## ----Plot world map------------------------------\nworld_wsg %&gt;%\n  left_join(df, by = c(\"iso_a3\" = \"iso3c\")) %&gt;%\n  ggplot() +\n  geom_sf(aes(fill = SL.UEM.TOTL.ZS)) +\n  scale_fill_viridis_c(\n    trans = \"sqrt\",\n    labels = scales::percent_format(scale = 1),\n    breaks = c(1:5)^2) +\n  # fix labels if needed: https://stackoverflow.com/a/60733863\n  scale_x_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"W\")\n    ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"N\")\n    ) +\n  theme_bw() +\n  theme(panel.background = element_rect(fill = \"aliceblue\")) +\n  labs(\n    title = paste(unique(df$date), indicator_info$indicator),\n    fill = NULL,\n    caption = paste(\"자료출처:\", indicator_info$source_org) \n  )"
  },
  {
    "objectID": "day_06.html#아시아",
    "href": "day_06.html#아시아",
    "title": "지도제작 대회",
    "section": "3.2 아시아",
    "text": "3.2 아시아\nOpenStreetMap 내보내기(Export) 에서 테두리 상자(Bounding Box) 를 특정하여 아시아 지역으로 한정하여 시각화한다.\n\n\n코드\n## ----Create bounding box-------------------------\n# Choose manually the region to plot with Open Street Map\n# https://www.openstreetmap.org/export\nwindow_coord &lt;- st_sfc(\n  st_point(c(60, -10)), #left, bottom\n  st_point(c(150,50)), #right, top\n  crs = 4326 #the EPSG identifier of WGS84 (used in GPS)\n)\n\nwindow_coord_sf &lt;- window_coord %&gt;%\n  st_transform(crs = target_crs) %&gt;%\n  st_coordinates() # retrieve coordinates\n\n\n\n\n\n코드\n## ----Plot regional map---------------------------\nworld_wsg %&gt;%\n  left_join(df, by = c(\"iso_a3\" = \"iso3c\")) %&gt;% \n  ggplot() + \n  geom_sf(aes(fill = SL.UEM.TOTL.ZS)) +\n  # window of the map\n  coord_sf(\n    xlim = window_coord_sf[, \"X\"],\n    ylim = window_coord_sf[, \"Y\"],\n    expand = FALSE\n  ) +\n  scale_fill_viridis_c(\n    trans = \"sqrt\", \n    labels = scales::percent_format(scale = 1),\n    breaks = c(1:5)^2\n  ) +\n  # fix labels if needed: https://stackoverflow.com/a/60733863\n  scale_x_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"W\")\n    ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"N\")\n    ) +\n  theme_bw() +\n  theme(panel.background = element_rect(fill = \"aliceblue\")) +\n  labs(\n    title = indicator_info$indicator,\n    fill = NULL,\n    caption = paste(\"Source:\", indicator_info$source_org) \n  )"
  },
  {
    "objectID": "day_07.html",
    "href": "day_07.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nFelixAnalytix/YouTube"
  },
  {
    "objectID": "day_07.html#지도",
    "href": "day_07.html#지도",
    "title": "지도제작 대회",
    "section": "2.1 지도",
    "text": "2.1 지도\n\n\n코드\n# switzerland_sf &lt;- gisco_get_nuts(\n  # country = \"Switzerland\", \n  # nuts_level = 3, \n  # resolution = \"01\",\n  # cache = TRUE,\n  # update_cache = TRUE)\n\nswitzerland_sf &lt;- sf::st_read(\"data/gisco-services.ec.europa.eu_distribution_v2_nuts_geojson_NUTS_RG_01M_2016_4326_LEVL_3.geojson\")\n#&gt; Reading layer `gisco-services.ec.europa.eu_distribution_v2_nuts_geojson_NUTS_RG_01M_2016_4326_LEVL_3' from data source `D:\\tcs\\map_challenge\\data\\gisco-services.ec.europa.eu_distribution_v2_nuts_geojson_NUTS_RG_01M_2016_4326_LEVL_3.geojson' \n#&gt;   using driver `GeoJSON'\n#&gt; Simple feature collection with 1522 features and 10 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -63.15119 ymin: -21.38885 xmax: 55.83578 ymax: 71.18416\n#&gt; Geodetic CRS:  WGS 84\n\nswitzerland_sf\n#&gt; Simple feature collection with 1522 features and 10 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -63.15119 ymin: -21.38885 xmax: 55.83578 ymax: 71.18416\n#&gt; Geodetic CRS:  WGS 84\n#&gt; First 10 features:\n#&gt;       id LEVL_CODE NUTS_ID CNTR_CODE                           NAME_LATN\n#&gt; 1  HR043         3   HR043        HR         Krapinsko-zagorska županija\n#&gt; 2  AT314         3   AT314        AT                     Steyr-Kirchdorf\n#&gt; 3  AT315         3   AT315        AT                        Traunviertel\n#&gt; 4  DE600         3   DE600        DE                             Hamburg\n#&gt; 5  DE711         3   DE711        DE         Darmstadt, Kreisfreie Stadt\n#&gt; 6  DE712         3   DE712        DE Frankfurt am Main, Kreisfreie Stadt\n#&gt; 7  DE713         3   DE713        DE Offenbach am Main, Kreisfreie Stadt\n#&gt; 8  DE714         3   DE714        DE         Wiesbaden, Kreisfreie Stadt\n#&gt; 9  DE715         3   DE715        DE                         Bergstraße\n#&gt; 10 BE353         3   BE353        BE                  Arr. Philippeville\n#&gt;                              NUTS_NAME MOUNT_TYPE URBN_TYPE COAST_TYPE   FID\n#&gt; 1          Krapinsko-zagorska županija          4         3          3 HR043\n#&gt; 2                      Steyr-Kirchdorf          3         3          3 AT314\n#&gt; 3                         Traunviertel          3         3          3 AT315\n#&gt; 4                              Hamburg          4         1          1 DE600\n#&gt; 5          Darmstadt, Kreisfreie Stadt          4         1          3 DE711\n#&gt; 6  Frankfurt am Main, Kreisfreie Stadt          4         1          3 DE712\n#&gt; 7  Offenbach am Main, Kreisfreie Stadt          4         1          3 DE713\n#&gt; 8          Wiesbaden, Kreisfreie Stadt          4         1          3 DE714\n#&gt; 9                          Bergstraße          4         1          3 DE715\n#&gt; 10                  Arr. Philippeville          4         3          3 BE353\n#&gt;                          geometry\n#&gt; 1  MULTIPOLYGON (((16.25128 46...\n#&gt; 2  MULTIPOLYGON (((14.48275 48...\n#&gt; 3  MULTIPOLYGON (((13.75402 48...\n#&gt; 4  MULTIPOLYGON (((9.945376 53...\n#&gt; 5  MULTIPOLYGON (((8.725708 49...\n#&gt; 6  MULTIPOLYGON (((8.590239 50...\n#&gt; 7  MULTIPOLYGON (((8.717834 50...\n#&gt; 8  MULTIPOLYGON (((8.327649 50...\n#&gt; 9  MULTIPOLYGON (((8.93188 49....\n#&gt; 10 MULTIPOLYGON (((4.588663 50..."
  },
  {
    "objectID": "day_07.html#스위스-데이터셋",
    "href": "day_07.html#스위스-데이터셋",
    "title": "지도제작 대회",
    "section": "2.2 스위스 데이터셋",
    "text": "2.2 스위스 데이터셋\n\n\n코드\n# Swiss dataset: https://www.bfs.admin.ch/asset/de/px-x-1502000000_101\nswiss_students &lt;- BFS::bfs_get_data(number_bfs = \"px-x-1502000000_101\", language = \"de\", clean_names = TRUE)\n#&gt;   Downloading large query (in 8 batches):\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |======================================================================| 100%\n\nswiss_students_gender &lt;- swiss_students %&gt;%\n  pivot_wider(names_from = geschlecht, values_from = lernende) %&gt;%\n  mutate(share_woman = round(Frau/`Geschlecht - Total`*100, 1))\n\nswiss_students_gender\n#&gt; # A tibble: 12,420 × 8\n#&gt;    bildungsstufe   schulkanton staatsangehorigkeit_…¹ jahr  `Geschlecht - Total`\n#&gt;    &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;                  &lt;chr&gt;                &lt;dbl&gt;\n#&gt;  1 Bildungsstufe … Schweiz     Staatsangehörigkeit -… 1999…              1309950\n#&gt;  2 Bildungsstufe … Schweiz     Staatsangehörigkeit -… 2000…              1311661\n#&gt;  3 Bildungsstufe … Schweiz     Staatsangehörigkeit -… 2001…              1312533\n#&gt;  4 Bildungsstufe … Schweiz     Schweiz                1999…              1025029\n#&gt;  5 Bildungsstufe … Schweiz     Schweiz                2000…              1026294\n#&gt;  6 Bildungsstufe … Schweiz     Schweiz                2001…              1023831\n#&gt;  7 Bildungsstufe … Schweiz     Ausland                1999…               256356\n#&gt;  8 Bildungsstufe … Schweiz     Ausland                2000…               256191\n#&gt;  9 Bildungsstufe … Schweiz     Ausland                2001…               258098\n#&gt; 10 Bildungsstufe … Schweiz     Unbekannt              1999…                28565\n#&gt; # ℹ 12,410 more rows\n#&gt; # ℹ abbreviated name: ¹​staatsangehorigkeit_kategorie\n#&gt; # ℹ 3 more variables: Mann &lt;dbl&gt;, Frau &lt;dbl&gt;, share_woman &lt;dbl&gt;"
  },
  {
    "objectID": "day_07.html#지도와-데이터-결합",
    "href": "day_07.html#지도와-데이터-결합",
    "title": "지도제작 대회",
    "section": "2.3 지도와 데이터 결합",
    "text": "2.3 지도와 데이터 결합\n\n\n코드\n# Preferably using NUTS-3 code if possible\nswiss_student_map &lt;- swiss_students_gender %&gt;%\n  filter(schulkanton != \"Schweiz\") %&gt;%\n  mutate(schulkanton = str_remove(schulkanton, \".*/\"),\n         schulkanton = str_trim(schulkanton),\n         schulkanton = recode(schulkanton, \"Berne\" = \"Bern\", \"Grischun\" = \"Graubünden\", \"Wallis\" = \"Valais\")) %&gt;%\n  left_join(switzerland_sf, by = c(\"schulkanton\" = \"NUTS_NAME\"))\n\nswiss_student_map\n#&gt; # A tibble: 12,420 × 18\n#&gt;    bildungsstufe   schulkanton staatsangehorigkeit_…¹ jahr  `Geschlecht - Total`\n#&gt;    &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;                  &lt;chr&gt;                &lt;dbl&gt;\n#&gt;  1 Bildungsstufe … Zürich      Staatsangehörigkeit -… 1999…               209028\n#&gt;  2 Bildungsstufe … Zürich      Staatsangehörigkeit -… 2000…               210844\n#&gt;  3 Bildungsstufe … Zürich      Staatsangehörigkeit -… 2001…               211811\n#&gt;  4 Bildungsstufe … Zürich      Schweiz                1999…               161170\n#&gt;  5 Bildungsstufe … Zürich      Schweiz                2000…               161670\n#&gt;  6 Bildungsstufe … Zürich      Schweiz                2001…               162710\n#&gt;  7 Bildungsstufe … Zürich      Ausland                1999…                47856\n#&gt;  8 Bildungsstufe … Zürich      Ausland                2000…                49167\n#&gt;  9 Bildungsstufe … Zürich      Ausland                2001…                49099\n#&gt; 10 Bildungsstufe … Zürich      Unbekannt              1999…                    2\n#&gt; # ℹ 12,410 more rows\n#&gt; # ℹ abbreviated name: ¹​staatsangehorigkeit_kategorie\n#&gt; # ℹ 13 more variables: Mann &lt;dbl&gt;, Frau &lt;dbl&gt;, share_woman &lt;dbl&gt;, id &lt;chr&gt;,\n#&gt; #   LEVL_CODE &lt;int&gt;, NUTS_ID &lt;chr&gt;, CNTR_CODE &lt;chr&gt;, NAME_LATN &lt;chr&gt;,\n#&gt; #   MOUNT_TYPE &lt;int&gt;, URBN_TYPE &lt;int&gt;, COAST_TYPE &lt;int&gt;, FID &lt;chr&gt;,\n#&gt; #   geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "day_07.html#교육수준",
    "href": "day_07.html#교육수준",
    "title": "지도제작 대회",
    "section": "3.1 교육수준",
    "text": "3.1 교육수준\n\n\n코드\nswiss_student_map_bildungsstufe &lt;- swiss_student_map %&gt;%\n  filter(jahr == \"2001/02\",\n         schulkanton != \"Schweiz\",\n         staatsangehorigkeit_kategorie == \"Schweiz\") %&gt;%\n  select(schulkanton, jahr, bildungsstufe, share_woman, geometry) %&gt;%\n  pivot_wider(names_from = \"bildungsstufe\", values_from = \"share_woman\") %&gt;%\n  sf::st_as_sf()\n\nswiss_student_map_bildungsstufe %&gt;%\n  mapview(zcol = \"Bildungsstufe - Total\", layer.name = \"Total education level, % Woman\")"
  },
  {
    "objectID": "day_07.html#동기화",
    "href": "day_07.html#동기화",
    "title": "지도제작 대회",
    "section": "3.2 동기화",
    "text": "3.2 동기화\n\n\n코드\n# Synchronize multiple maps -----------------------------------------------\n\nleafsync::sync(\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Tertiärstufe\", layer.name = \"Tertiary level, % Woman\"),\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Sekundarstufe II\", layer.name = \"Secondary level II, % Woman\"),\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Obligatorische Schule\", layer.name = \"Mandatory school, % Woman\"),\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Nicht auf Stufen aufteilbare Ausbildungen\", layer.name = \"Training that cannot be divided into levels, % Woman\")\n)"
  },
  {
    "objectID": "day_07.html#슬라이더",
    "href": "day_07.html#슬라이더",
    "title": "지도제작 대회",
    "section": "3.3 슬라이더",
    "text": "3.3 슬라이더\n\n\n\n코드\n# Comparing maps with a slider --------------------------------------------\n\nswiss_student_map_bildungsstufe_1999 &lt;- swiss_student_map %&gt;%\n  filter(jahr == \"1999/00\",\n         schulkanton != \"Schweiz\",\n         staatsangehorigkeit_kategorie == \"Schweiz\") %&gt;%\n  select(schulkanton, jahr, bildungsstufe, share_woman, geometry) %&gt;%\n  pivot_wider(names_from = \"bildungsstufe\", values_from = \"share_woman\") %&gt;%\n  sf::st_as_sf()\n\nmap1 &lt;- mapview(swiss_student_map_bildungsstufe, zcol = \"Bildungsstufe - Total\")\n\nmap2 &lt;- mapview(swiss_student_map_bildungsstufe_1999, zcol = \"Bildungsstufe - Total\")\n\nmap1 | map2"
  },
  {
    "objectID": "day_07.html#지도-1",
    "href": "day_07.html#지도-1",
    "title": "지도제작 대회",
    "section": "4.1 지도",
    "text": "4.1 지도\n\n\n코드\n# korea_sf &lt;- giscoR::gisco_get_nuts(\n#     resolution = \"1\",\n#     epsg = \"4326\",\n#     nuts_level = 1, \n#     cache = TRUE,\n#     update_cache = TRUE,\n#     country = \"KOR\") |&gt;\n#     sf::st_transform(crsLONGLAT)\n\nlibrary(sf)\nlibrary(tidyverse)\n\nkorea_sf_raw &lt;- sf::read_sf(\"data/gadm41_KOR_1.json\")\n\nkorea_sf &lt;- korea_sf_raw %&gt;% \n  separate(NL_NAME_1, into = c(\"시도명\", \"한자\"), sep=\"(\\\\||\\\\()\") %&gt;% \n  select(시도명, geometry) \n\nplot(korea_sf)"
  },
  {
    "objectID": "day_07.html#데이터-1",
    "href": "day_07.html#데이터-1",
    "title": "지도제작 대회",
    "section": "4.2 데이터",
    "text": "4.2 데이터\n\n\n코드\nlibrary(krvote)\n\nvotes_tbl &lt;- krvote::election_20220309$득표율 %&gt;% \n  group_by(시도명) %&gt;% \n  summarise(이재명 = sum(이재명),\n            윤석열 = sum(윤석열))\n\nvotes_tbl\n#&gt; # A tibble: 17 × 3\n#&gt;    시도명          이재명  윤석열\n#&gt;    &lt;chr&gt;            &lt;dbl&gt;   &lt;dbl&gt;\n#&gt;  1 강원도          419644  544980\n#&gt;  2 경기도         4428151 3965341\n#&gt;  3 경상남도        794130 1237346\n#&gt;  4 경상북도        418371 1278922\n#&gt;  5 광주광역시      830058  124511\n#&gt;  6 대구광역시      345045 1199888\n#&gt;  7 대전광역시      434950  464060\n#&gt;  8 부산광역시      831896 1270072\n#&gt;  9 서울특별시     2944981 3255747\n#&gt; 10 세종특별자치시  119349  101491\n#&gt; 11 울산광역시      297134  396321\n#&gt; 12 인천광역시      913320  878560\n#&gt; 13 전라남도       1094872  145549\n#&gt; 14 전라북도       1016863  176809\n#&gt; 15 제주특별자치도  213130  173014\n#&gt; 16 충청남도        589991  670283\n#&gt; 17 충청북도        455853  511921"
  },
  {
    "objectID": "day_07.html#결합",
    "href": "day_07.html#결합",
    "title": "지도제작 대회",
    "section": "4.3 결합",
    "text": "4.3 결합\n\n\n코드\n\nvote_sf &lt;- korea_sf %&gt;% \n  left_join(votes_tbl) %&gt;% \n  mutate(득표마진 = 이재명 - 윤석열)"
  },
  {
    "objectID": "day_07.html#대선이재명",
    "href": "day_07.html#대선이재명",
    "title": "지도제작 대회",
    "section": "5.1 대선(이재명)",
    "text": "5.1 대선(이재명)\n\n\n코드\nlibrary(mapview)\n\npalfunc &lt;- function (n, alpha = 1, begin = 0, end = 1, direction = 1) {\n  colors &lt;- RColorBrewer::brewer.pal(11, \"RdBu\")\n  if (direction &lt; 0) colors &lt;- rev(colors)\n  colorRampPalette(colors, alpha = alpha)(n)\n}\n\nvote_sf %&gt;%\n  mapview(zcol = \"득표마진\", layer.name = \"이재명 - 윤석열\", col.regions = palfunc)"
  },
  {
    "objectID": "day_07.html#이재명-vs-윤석열",
    "href": "day_07.html#이재명-vs-윤석열",
    "title": "지도제작 대회",
    "section": "5.2 이재명 vs 윤석열",
    "text": "5.2 이재명 vs 윤석열\n\n\n코드\nlibrary(mapview)\n\nleafsync::sync(\n  vote_sf %&gt;%\n    mapview(zcol = \"이재명\", layer.name = \"이재명 득표수\"),\n  vote_sf %&gt;%\n    mapview(zcol = \"윤석열\", layer.name = \"윤석열 득표수\")  \n)"
  },
  {
    "objectID": "day_07.html#대선-비교",
    "href": "day_07.html#대선-비교",
    "title": "지도제작 대회",
    "section": "5.3 대선 비교",
    "text": "5.3 대선 비교\n\n\n\n코드\nvote_2012 &lt;- krvote::election_20121219$득표율 %&gt;% \n  group_by(시도명) %&gt;% \n  summarise(박근혜 = sum(박근혜),\n            문재인 = sum(문재인))\n\nvote_2012_sf &lt;- korea_sf %&gt;% \n  left_join(vote_2012) %&gt;% \n  mutate(득표마진 = 문재인 - 박근혜)\n\nmap_2022 &lt;- mapview(vote_2012_sf, zcol = \"득표마진\", layer.name = \"이재명 - 윤석열\", col.regions = palfunc)\n\nmap_2012 &lt;- mapview(vote_sf, zcol = \"득표마진\", layer.name = \"문재인 - 박근혜\", col.regions = palfunc)\n\nmap_2012 | map_2022"
  },
  {
    "objectID": "day_08.html",
    "href": "day_08.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nFelixAnalytix/YouTube\n\n\n\n1 패키지\n\n\n코드\n# Install R packages if not installed -------------------------------------\n\nif (!require(tidyverse)) install.packages(\"tidyverse\")\nif (!require(rvest)) install.packages(\"rvest\")\nif (!require(usethis)) install.packages(\"usethis\")\nif (!require(tidygeocoder)) install.packages(\"tidygeocoder\")\nif (!require(leaflet)) install.packages(\"leaflet\")\n\n\n# Attach R packages -------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(usethis)\nlibrary(tidygeocoder)\nlibrary(leaflet)\n\n\n\n\n2 데이터\n\n\n코드\nlibrary(readxl)\nlibrary(tidyverse)\n\nmst_raw &lt;- read_excel(\"data/인천서구강소연구개발특구 기업현황 데이터 요청사항_230618.xlsx\", sheet = \"환경산업연구단지 입주기업\", skip = 1)\n\nmst_tbl &lt;- mst_raw %&gt;% \n  janitor::clean_names(ascii = FALSE) %&gt;% \n  select(!starts_with(\"x\")) \n\nmst_tbl\n#&gt; # A tibble: 129 × 19\n#&gt;     연번 회사명        대표자명 전화번호 분야  이메일주소 사업자번호 주소  매출 \n#&gt;    &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;\n#&gt;  1     1 주식회사 네…  전진오   070-422… 생활… neo@neost… 166-88-00… 인천… 5-9억\n#&gt;  2     2 프로덕트테크  박재민   &lt;NA&gt;     대기  &lt;NA&gt;       &lt;NA&gt;       인천… 5억 …\n#&gt;  3     3 (주)스피너스  조철호   02-2138… 폐기… ryam_cho@… 327-88-02… 인천… 5-9억\n#&gt;  4     4 한국도시재생… 이정학   032-467… 폐기… &lt;NA&gt;       339-87-00… 인천… 5-9억\n#&gt;  5     5 에코드릴 주…  박건준   02-808-… 대기  &lt;NA&gt;       116-88-01… 인천… 5-9억\n#&gt;  6     6 에코프로에이… 김종섭   043-210… 대기  ecopro@re… 283-87-02… 인천… 1,00…\n#&gt;  7     7 (주)어라운드… 최준영   070-485… 생활… aroundblu… 575-81-02… 인천… 5억 …\n#&gt;  8     8 주식회사 코…  이주혁   070-864… 생활… contact@c… 188-81-02… 인천… 10-4…\n#&gt;  9     9 주식회사 쉘…  최수빈   &lt;NA&gt;     생활… &lt;NA&gt;       443-87-02… 인천… 5억 …\n#&gt; 10    10 (주)에너지로… 이완구   032-573… 생활… e-road@e-… 120-88-03… 인천… 100-…\n#&gt; # ℹ 119 more rows\n#&gt; # ℹ 10 more variables: 녹색기술_녹색생활 &lt;chr&gt;, 기술1 &lt;chr&gt;, 기술2 &lt;chr&gt;,\n#&gt; #   기술3 &lt;chr&gt;, 개발예정품목 &lt;chr&gt;, 홈페이지 &lt;chr&gt;, 주요사업 &lt;chr&gt;,\n#&gt; #   주요취급품 &lt;chr&gt;, 주요매출처 &lt;chr&gt;, 비고 &lt;chr&gt;\n\n\n\n\n3 지오코딩\n\n\n코드\ntidygeocoder::api_info_reference %&gt;% \n  gt::gt() %&gt;% \n  gtExtras::gt_theme_538() %&gt;% \n  gt::cols_align(align = \"center\")\n\n\n\n\n\n\n  \n    \n    \n      method\n      method_display_name\n      site_url\n      api_documentation_url\n      api_usage_policy_url\n    \n  \n  \n    osm\nNominatim\nhttps://nominatim.org\nhttps://nominatim.org/release-docs/develop/api/Search/\nhttps://operations.osmfoundation.org/policies/nominatim/\n    census\nUS Census\nhttps://geocoding.geo.census.gov/\nhttps://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/census-geocoder.html\nhttps://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/census-geocoder.html\n    arcgis\nArcGIS\nhttps://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm\nhttps://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm\nhttps://developers.arcgis.com/rest/geocode/api-reference/geocoding-free-vs-paid.htm\n    geocodio\nGeocodio\nhttps://www.geocod.io/\nhttps://www.geocod.io/docs/\nhttps://www.geocod.io/pricing/\n    iq\nLocation IQ\nhttps://locationiq.com/\nhttps://locationiq.com/docs\nhttps://locationiq.com/pricing\n    google\nGoogle\nhttps://developers.google.com/maps/documentation/geocoding/overview\nhttps://developers.google.com/maps/documentation/geocoding/overview\nhttps://developers.google.com/maps/documentation/geocoding/usage-and-billing\n    opencage\nOpenCage\nhttps://opencagedata.com\nhttps://opencagedata.com/api\nhttps://opencagedata.com/pricing\n    mapbox\nMapbox\nhttps://docs.mapbox.com/api/search/\nhttps://docs.mapbox.com/api/search/geocoding/\nhttps://www.mapbox.com/pricing/\n    here\nHERE\nhttps://developer.here.com/products/geocoding-and-search\nhttps://developer.here.com/documentation/geocoding-search-api/dev_guide/index.html\nhttps://developer.here.com/pricing\n    tomtom\nTomTom\nhttps://developer.tomtom.com/search-api/search-api-documentation/geocoding\nhttps://developer.tomtom.com/search-api/search-api-documentation-geocoding/geocode\nhttps://developer.tomtom.com/store/maps-api\n    mapquest\nMapQuest\nhttps://developer.mapquest.com/documentation/geocoding-api/\nhttps://developer.mapquest.com/documentation/geocoding-api/\nhttps://developer.mapquest.com/plans\n    bing\nBing\nhttps://docs.microsoft.com/en-us/bingmaps/rest-services/locations/\nhttps://docs.microsoft.com/en-us/bingmaps/rest-services/locations/\nhttps://docs.microsoft.com/en-us/bingmaps/spatial-data-services/geocode-and-data-source-limits\n    geoapify\nGeoapify\nhttps://www.geoapify.com/geocoding-api\nhttps://apidocs.geoapify.com/docs/geocoding/api/\nhttps://www.geoapify.com/term-and-conditions\n  \n  \n  \n\n\n\n\n\n\n코드\nmst_tbl_geocodes &lt;- mst_tbl %&gt;%\n  geocode(address = 주소,  method = \"arcgis\")\n\nmst_tbl_geocodes_sample &lt;- mst_tbl_geocodes %&gt;% \n  select(회사명, 주소, lat, long) %&gt;% \n  group_by(lat) %&gt;% \n  slice_sample(n=1)\n\nmst_tbl_geocodes_sample %&gt;% \n  write_rds(\"data/incheon.rds\")\n\n\n\n\n4 시각화\n\n\n코드\n\nmst_tbl_geocodes_sample &lt;- \n  read_rds(\"data/incheon.rds\")\n\nmst_tbl_geocodes_sample %&gt;%\n  mutate(popup = paste0(\"&lt;b&gt;\", 회사명, \"&lt;/b&gt;\", \"&lt;br&gt;\",\n                        주소, \"&lt;br&gt;\")) %&gt;%\n  leaflet() %&gt;% \n  addTiles() %&gt;%\n  addProviderTiles(providers$CartoDB.Positron) %&gt;%\n  addMarkers(~long, ~lat, \n             popup  = ~popup) %&gt;%\n  addLayersControl(overlayGroups = ~회사명,\n                   options = layersControlOptions(collapsed = FALSE))"
  },
  {
    "objectID": "km_school.html",
    "href": "km_school.html",
    "title": "경기도 광명시",
    "section": "",
    "text": "행정안전부 주민등록, 인감 에서 행정기관(행정동) 및 관할구역(법정동) 코드를 다운로드 받을 수 있다.\n\n\n코드\nlibrary(readxl)\nlibrary(tidyverse)\n\nadmin_code_raw &lt;- read_excel(\"data/jsocde20230611/KIKcd_H.20230611.xlsx\")\n\nadmin_code &lt;- admin_code_raw %&gt;% \n  mutate(시도 = str_sub(행정동코드, 1, 2),\n         시군구 = str_sub(행정동코드, 1, 4),\n         읍면동 = str_sub(행정동코드, 1, 8)) %&gt;% \n  select(행정동코드, 시도, 시도명, 시군구, 시군구명, 읍면동, 읍면동명) \n\nadmin_code %&gt;%\n  write_rds(\"data/admin_code.rds\")\n\nadmin_code\n#&gt; # A tibble: 3,882 × 7\n#&gt;    행정동코드 시도  시도명     시군구 시군구명 읍면동   읍면동명  \n#&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     \n#&gt;  1 1100000000 11    서울특별시 1100   &lt;NA&gt;     11000000 &lt;NA&gt;      \n#&gt;  2 1111000000 11    서울특별시 1111   종로구   11110000 &lt;NA&gt;      \n#&gt;  3 1111051500 11    서울특별시 1111   종로구   11110515 청운효자동\n#&gt;  4 1111053000 11    서울특별시 1111   종로구   11110530 사직동    \n#&gt;  5 1111054000 11    서울특별시 1111   종로구   11110540 삼청동    \n#&gt;  6 1111055000 11    서울특별시 1111   종로구   11110550 부암동    \n#&gt;  7 1111056000 11    서울특별시 1111   종로구   11110560 평창동    \n#&gt;  8 1111057000 11    서울특별시 1111   종로구   11110570 무악동    \n#&gt;  9 1111058000 11    서울특별시 1111   종로구   11110580 교남동    \n#&gt; 10 1111060000 11    서울특별시 1111   종로구   11110600 가회동    \n#&gt; # ℹ 3,872 more rows\n\n\n\n\n\n2022-01-27 등록된 경기도 광명시_어린이보호구역 내 CCTV 정보_API를 공공데이터포털에서 다운로드 받는다.\n\n\n코드\nlibrary(sf)\n\ncctv_raw &lt;- read_csv(\"data/보호구역내cctv정보.csv\", locale=locale('ko',encoding='euc-kr'))\n\ncctv_tbl &lt;- cctv_raw %&gt;% \n  select(용도 = INST_PURPS, 도로명주소=RDNMADR, 경도, 위도)\n\ncctv_tbl\n#&gt; # A tibble: 98 × 4\n#&gt;    용도       도로명주소                     경도  위도\n#&gt;    &lt;chr&gt;      &lt;chr&gt;                         &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 어린이보호 경기도 광명시 안현로 80-2      127.  37.5\n#&gt;  2 다목적     경기도 광명시 소하일로 45      127.  37.4\n#&gt;  3 다목적     경기도 광명시 금당로 11-7      127.  37.5\n#&gt;  4 어린이보호 경기도 광명시 한내로13번길 17  127.  37.5\n#&gt;  5 다목적     경기도 광명시 금당로 11-7      127.  37.5\n#&gt;  6 어린이보호 경기도 광명시 금당로 11-7      127.  37.5\n#&gt;  7 다목적     경기도 광명시 소하일로 45      127.  37.4\n#&gt;  8 다목적     경기도 광명시 금당로 71        127.  37.5\n#&gt;  9 어린이보호 경기도 광명시 금당로 71        127.  37.5\n#&gt; 10 다목적     경기도 광명시 한내일로 5       127.  37.5\n#&gt; # ℹ 88 more rows\n\n\n\n\n\n통계청 (센서스경계)행정동경계 Z_SOP_BND_ADM_DONG_PG.zip 파일을 국가공간정보포털 에서 다운로드 받는다.\n\n통계청 (센서스경계)행정동경계: http://data.nsdi.go.kr/dataset/20171206ds00001\n국토교통부 행정구역시군구_경계: http://data.nsdi.go.kr/dataset/15144\n국토지리정보원 행정경계(시군구): http://data.nsdi.go.kr/dataset/20180927ds0058\n\n\n\n코드\nlibrary(sf)\n\nemd_raw &lt;- st_read(\"data/EMD_202302/emd.shp\")\n#&gt; Reading layer `emd' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\EMD_202302\\emd.shp' using driver `ESRI Shapefile'\n#&gt; Simple feature collection with 5065 features and 3 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 746110.3 ymin: 1458754 xmax: 1387948 ymax: 2068444\n#&gt; CRS:           NA\n\nemd_sf &lt;- emd_raw %&gt;% \n  filter(str_sub(EMD_CD, 1,2) == \"41\") %&gt;% \n  mutate(EMD_KOR_NM = iconv(EMD_KOR_NM, \"euc-kr\", \"utf-8\"))\n\nemd_sf %&gt;% \n  left_join(admin_code, by = c(\"EMD_CD\" = \"읍면동\" ))\n#&gt; Simple feature collection with 745 features and 9 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 900494.7 ymin: 1877295 xmax: 1030749 ymax: 2031397\n#&gt; CRS:           NA\n#&gt; First 10 features:\n#&gt;      EMD_CD        EMD_ENG_NM EMD_KOR_NM 행정동코드 시도 시도명 시군구 시군구명\n#&gt; 1  41111129       Pajang-dong     파장동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 2  41111130      Jeongja-dong     정자동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 3  41111131         Imok-dong     이목동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 4  41111132      Yuljeon-dong     율전동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 5  41111133   Cheoncheon-dong     천천동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 6  41111134     Yeonghwa-dong     영화동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 7  41111135      Songjuk-dong     송죽동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  41111136        Jowon-dong     조원동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 9  41111137       Yeonmu-dong     연무동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 41111138 Sanggwanggyo-dong   상광교동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt;    읍면동명                       geometry\n#&gt; 1      &lt;NA&gt; MULTIPOLYGON (((956654.4 19...\n#&gt; 2      &lt;NA&gt; MULTIPOLYGON (((954539.6 19...\n#&gt; 3      &lt;NA&gt; MULTIPOLYGON (((954024 1925...\n#&gt; 4      &lt;NA&gt; MULTIPOLYGON (((953427.5 19...\n#&gt; 5      &lt;NA&gt; MULTIPOLYGON (((954068.1 19...\n#&gt; 6      &lt;NA&gt; MULTIPOLYGON (((958026.4 19...\n#&gt; 7      &lt;NA&gt; MULTIPOLYGON (((956703.6 19...\n#&gt; 8      &lt;NA&gt; MULTIPOLYGON (((957721.7 19...\n#&gt; 9      &lt;NA&gt; MULTIPOLYGON (((958589.2 19...\n#&gt; 10     &lt;NA&gt; MULTIPOLYGON (((958517.4 19...\n\nadmin_code %&gt;% \n  filter(시도 == 41)\n#&gt; # A tibble: 625 × 7\n#&gt;    행정동코드 시도  시도명     시군구 시군구명      읍면동   읍면동명\n#&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 4100000000 41    경기도     4100   &lt;NA&gt;          41000000 &lt;NA&gt;    \n#&gt;  2 4110500000 41    북부출장소 4110   &lt;NA&gt;          41105000 &lt;NA&gt;    \n#&gt;  3 4111000000 41    경기도     4111   수원시        41110000 &lt;NA&gt;    \n#&gt;  4 4111100000 41    경기도     4111   수원시 장안구 41111000 &lt;NA&gt;    \n#&gt;  5 4111156000 41    경기도     4111   수원시 장안구 41111560 파장동  \n#&gt;  6 4111156600 41    경기도     4111   수원시 장안구 41111566 율천동  \n#&gt;  7 4111157100 41    경기도     4111   수원시 장안구 41111571 정자1동 \n#&gt;  8 4111157200 41    경기도     4111   수원시 장안구 41111572 정자2동 \n#&gt;  9 4111157300 41    경기도     4111   수원시 장안구 41111573 정자3동 \n#&gt; 10 4111158000 41    경기도     4111   수원시 장안구 41111580 영화동  \n#&gt; # ℹ 615 more rows"
  },
  {
    "objectID": "km_school.html#행정동-코드",
    "href": "km_school.html#행정동-코드",
    "title": "경기도 광명시",
    "section": "",
    "text": "행정안전부 주민등록, 인감 에서 행정기관(행정동) 및 관할구역(법정동) 코드를 다운로드 받을 수 있다.\n\n\n코드\nlibrary(readxl)\nlibrary(tidyverse)\n\nadmin_code_raw &lt;- read_excel(\"data/jsocde20230611/KIKcd_H.20230611.xlsx\")\n\nadmin_code &lt;- admin_code_raw %&gt;% \n  mutate(시도 = str_sub(행정동코드, 1, 2),\n         시군구 = str_sub(행정동코드, 1, 4),\n         읍면동 = str_sub(행정동코드, 1, 8)) %&gt;% \n  select(행정동코드, 시도, 시도명, 시군구, 시군구명, 읍면동, 읍면동명) \n\nadmin_code %&gt;%\n  write_rds(\"data/admin_code.rds\")\n\nadmin_code\n#&gt; # A tibble: 3,882 × 7\n#&gt;    행정동코드 시도  시도명     시군구 시군구명 읍면동   읍면동명  \n#&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     \n#&gt;  1 1100000000 11    서울특별시 1100   &lt;NA&gt;     11000000 &lt;NA&gt;      \n#&gt;  2 1111000000 11    서울특별시 1111   종로구   11110000 &lt;NA&gt;      \n#&gt;  3 1111051500 11    서울특별시 1111   종로구   11110515 청운효자동\n#&gt;  4 1111053000 11    서울특별시 1111   종로구   11110530 사직동    \n#&gt;  5 1111054000 11    서울특별시 1111   종로구   11110540 삼청동    \n#&gt;  6 1111055000 11    서울특별시 1111   종로구   11110550 부암동    \n#&gt;  7 1111056000 11    서울특별시 1111   종로구   11110560 평창동    \n#&gt;  8 1111057000 11    서울특별시 1111   종로구   11110570 무악동    \n#&gt;  9 1111058000 11    서울특별시 1111   종로구   11110580 교남동    \n#&gt; 10 1111060000 11    서울특별시 1111   종로구   11110600 가회동    \n#&gt; # ℹ 3,872 more rows"
  },
  {
    "objectID": "km_school.html#cctv-정보",
    "href": "km_school.html#cctv-정보",
    "title": "경기도 광명시",
    "section": "",
    "text": "2022-01-27 등록된 경기도 광명시_어린이보호구역 내 CCTV 정보_API를 공공데이터포털에서 다운로드 받는다.\n\n\n코드\nlibrary(sf)\n\ncctv_raw &lt;- read_csv(\"data/보호구역내cctv정보.csv\", locale=locale('ko',encoding='euc-kr'))\n\ncctv_tbl &lt;- cctv_raw %&gt;% \n  select(용도 = INST_PURPS, 도로명주소=RDNMADR, 경도, 위도)\n\ncctv_tbl\n#&gt; # A tibble: 98 × 4\n#&gt;    용도       도로명주소                     경도  위도\n#&gt;    &lt;chr&gt;      &lt;chr&gt;                         &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 어린이보호 경기도 광명시 안현로 80-2      127.  37.5\n#&gt;  2 다목적     경기도 광명시 소하일로 45      127.  37.4\n#&gt;  3 다목적     경기도 광명시 금당로 11-7      127.  37.5\n#&gt;  4 어린이보호 경기도 광명시 한내로13번길 17  127.  37.5\n#&gt;  5 다목적     경기도 광명시 금당로 11-7      127.  37.5\n#&gt;  6 어린이보호 경기도 광명시 금당로 11-7      127.  37.5\n#&gt;  7 다목적     경기도 광명시 소하일로 45      127.  37.4\n#&gt;  8 다목적     경기도 광명시 금당로 71        127.  37.5\n#&gt;  9 어린이보호 경기도 광명시 금당로 71        127.  37.5\n#&gt; 10 다목적     경기도 광명시 한내일로 5       127.  37.5\n#&gt; # ℹ 88 more rows"
  },
  {
    "objectID": "km_school.html#지도",
    "href": "km_school.html#지도",
    "title": "경기도 광명시",
    "section": "",
    "text": "통계청 (센서스경계)행정동경계 Z_SOP_BND_ADM_DONG_PG.zip 파일을 국가공간정보포털 에서 다운로드 받는다.\n\n통계청 (센서스경계)행정동경계: http://data.nsdi.go.kr/dataset/20171206ds00001\n국토교통부 행정구역시군구_경계: http://data.nsdi.go.kr/dataset/15144\n국토지리정보원 행정경계(시군구): http://data.nsdi.go.kr/dataset/20180927ds0058\n\n\n\n코드\nlibrary(sf)\n\nemd_raw &lt;- st_read(\"data/EMD_202302/emd.shp\")\n#&gt; Reading layer `emd' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\EMD_202302\\emd.shp' using driver `ESRI Shapefile'\n#&gt; Simple feature collection with 5065 features and 3 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 746110.3 ymin: 1458754 xmax: 1387948 ymax: 2068444\n#&gt; CRS:           NA\n\nemd_sf &lt;- emd_raw %&gt;% \n  filter(str_sub(EMD_CD, 1,2) == \"41\") %&gt;% \n  mutate(EMD_KOR_NM = iconv(EMD_KOR_NM, \"euc-kr\", \"utf-8\"))\n\nemd_sf %&gt;% \n  left_join(admin_code, by = c(\"EMD_CD\" = \"읍면동\" ))\n#&gt; Simple feature collection with 745 features and 9 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 900494.7 ymin: 1877295 xmax: 1030749 ymax: 2031397\n#&gt; CRS:           NA\n#&gt; First 10 features:\n#&gt;      EMD_CD        EMD_ENG_NM EMD_KOR_NM 행정동코드 시도 시도명 시군구 시군구명\n#&gt; 1  41111129       Pajang-dong     파장동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 2  41111130      Jeongja-dong     정자동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 3  41111131         Imok-dong     이목동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 4  41111132      Yuljeon-dong     율전동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 5  41111133   Cheoncheon-dong     천천동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 6  41111134     Yeonghwa-dong     영화동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 7  41111135      Songjuk-dong     송죽동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  41111136        Jowon-dong     조원동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 9  41111137       Yeonmu-dong     연무동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 41111138 Sanggwanggyo-dong   상광교동       &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;\n#&gt;    읍면동명                       geometry\n#&gt; 1      &lt;NA&gt; MULTIPOLYGON (((956654.4 19...\n#&gt; 2      &lt;NA&gt; MULTIPOLYGON (((954539.6 19...\n#&gt; 3      &lt;NA&gt; MULTIPOLYGON (((954024 1925...\n#&gt; 4      &lt;NA&gt; MULTIPOLYGON (((953427.5 19...\n#&gt; 5      &lt;NA&gt; MULTIPOLYGON (((954068.1 19...\n#&gt; 6      &lt;NA&gt; MULTIPOLYGON (((958026.4 19...\n#&gt; 7      &lt;NA&gt; MULTIPOLYGON (((956703.6 19...\n#&gt; 8      &lt;NA&gt; MULTIPOLYGON (((957721.7 19...\n#&gt; 9      &lt;NA&gt; MULTIPOLYGON (((958589.2 19...\n#&gt; 10     &lt;NA&gt; MULTIPOLYGON (((958517.4 19...\n\nadmin_code %&gt;% \n  filter(시도 == 41)\n#&gt; # A tibble: 625 × 7\n#&gt;    행정동코드 시도  시도명     시군구 시군구명      읍면동   읍면동명\n#&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt;   \n#&gt;  1 4100000000 41    경기도     4100   &lt;NA&gt;          41000000 &lt;NA&gt;    \n#&gt;  2 4110500000 41    북부출장소 4110   &lt;NA&gt;          41105000 &lt;NA&gt;    \n#&gt;  3 4111000000 41    경기도     4111   수원시        41110000 &lt;NA&gt;    \n#&gt;  4 4111100000 41    경기도     4111   수원시 장안구 41111000 &lt;NA&gt;    \n#&gt;  5 4111156000 41    경기도     4111   수원시 장안구 41111560 파장동  \n#&gt;  6 4111156600 41    경기도     4111   수원시 장안구 41111566 율천동  \n#&gt;  7 4111157100 41    경기도     4111   수원시 장안구 41111571 정자1동 \n#&gt;  8 4111157200 41    경기도     4111   수원시 장안구 41111572 정자2동 \n#&gt;  9 4111157300 41    경기도     4111   수원시 장안구 41111573 정자3동 \n#&gt; 10 4111158000 41    경기도     4111   수원시 장안구 41111580 영화동  \n#&gt; # ℹ 615 more rows"
  }
]