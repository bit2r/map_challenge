[
  {
    "objectID": "day_01.html",
    "href": "day_01.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "1 아시아 대륙 색칠\n\n코드# Libraries Loading -------------------------------------------------------\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggtext)\nlibrary(maps)\nextrafont::loadfonts(\"win\")\n\n\n# Data Reading and Wrangling ----------------------------------------------\n# Generating pixel grid \nlat &lt;- tibble(lat = seq(-90, 90, by = .5))\nlong &lt;- tibble(long = seq(-180, 180, by = .5))\n\ndots &lt;- lat %&gt;% \n  full_join(long, by = character()) %&gt;% \n  as_tibble()\n\ndots &lt;- dots %&gt;% \n  mutate(country = map.where('world', long, lat),\n         lakes = map.where('lakes', long, lat)) %&gt;% \n  filter(!is.na(country) & is.na(lakes)) %&gt;% \n  dplyr::select(-lakes)\n\nworld &lt;- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\") %&gt;% \n  filter(region_wb != \"Antarctica\")\n\ndots &lt;- dots %&gt;% \n  mutate(\n    country = case_when(\n      country %in% c(\"Comoros:Grande Comore\", \"Comoros:Anjouan\") ~ \"Comoros\",\n      country %in% c(\"Cape Verde:Santo Antao\",\"Cape Verde:Sao Tiago\") ~ \"Cape Verde\",\n      country == \"Guinea-Bissau\" ~ \"Guinea Bissau\", \n      country == \"Equatorial Guinea:Rio Muni\" ~ \"Equatorial Guinea\", \n      country ==  \"Malawi:3\" ~ \"Malawi\",\n      country == \"Somalia:Somaliland\" ~ \"Somaliland\",\n      country == \"Tanzania\" ~ \"United Republic of Tanzania\", \n      TRUE ~ country))\n\nasia_dots &lt;- world %&gt;%\n  filter(continent == \"Asia\") %&gt;% \n  dplyr::select(admin, mapcolor7) %&gt;% \n  left_join(dots, by = c(\"admin\" = \"country\")) \n\n# Graphic -----------------------------------------------------------------\npalette &lt;- c(\"#8931EF\", \"#F2CA19\", \"#FF00BD\" , \"#0057E9\", \"#87E911\", \"#E11845\", \"#FF8A12\") \n\n# 2021 Version ----\nasia_dots %&gt;% \n  ggplot() + \n  geom_point(aes(x = long, y = lat, color = factor(mapcolor7)), size = .95) + \n  guides(color =\"none\") +\n  scale_color_manual(\n    values = palette\n  ) + \n  labs(\n    title = \"아시아\", \n    subtitle = glue::glue(\"1 대륙, {scales::comma(nrow(asia_dots))} 점\"), \n    caption = \"#30DayMapChallenge - 1일 : 대륙색칠\"\n  ) + \n  annotate(geom = \"text\", x = 130, y = 38, label = \"대한민국\", size = 4, family = \"MaruBuri\") + \n  annotate(geom = \"segment\", x = -23.5, y = 12, xend = -23.5, yend = 14.5, size = .125, color = \"white\") + \n  coord_fixed(clip = \"off\") + \n  theme_void(base_family = \"MaruBuri\") + \n  theme(\n    plot.background = element_rect(fill = \"#111111\",color = NA),\n    plot.title = element_text(hjust = .5, size = rel(3), color = \"white\", family = \"MaruBuri\", margin = margin(t = 25,b = 15)),\n    plot.subtitle = element_text(hjust = .5, size = rel(2.5), color = \"white\",family = \"MaruBuri\", face = \"bold\", margin = margin(b = 35)),\n    plot.caption = element_text(size = rel(1.125), hjust = .5, color = \"white\", family = \"MaruBuri\", margin = margin(b = 15))\n  )\n\n\n\n\n\n\n\n\n2 아시아 대륙 점\n\n코드# 2022 Version ---- \nasia_dots %&gt;% \n  ggplot() + \n  geom_point(aes(x = long, y = lat), color = \"#F61753\", size = .05) + \n  labs(\n    title = \"아시아\", \n    subtitle = glue::glue(\"1 대륙, {scales::comma(nrow(asia_dots))} 점\"), \n    caption = \"#30DayMapChallenge - 1일 : 대륙색칠\"\n  ) + \n  annotate(geom = \"text\", x = 130, y = 38, label = \"대한민국\", size = 4, family = \"MaruBuri\") + \n  annotate(geom = \"segment\", x = -23.5, y = 12, xend = -23.5, yend = 14.5, size = .125) + \n  coord_fixed(clip = \"off\") + \n  theme_void(base_family = \"MaruBuri\") + \n  theme(\n    plot.background = element_rect(fill = \"#FFFFFF\",color = NA),\n    plot.title = element_text(hjust = .5, size = rel(3),  family = \"MaruBuri\", margin = margin(t = 25,b = 15)),\n    plot.subtitle = element_text(hjust = .5, color =\"grey30\", size = rel(2.5), family = \"MaruBuri\", face = \"bold\", margin = margin(b = 35)),\n    plot.caption = element_text(size = rel(1.5), hjust = .5, family = \"MaruBuri\", margin = margin(b = 15))\n  )"
  },
  {
    "objectID": "day_02.html",
    "href": "day_02.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nGIS 101: How do I map data points in R"
  },
  {
    "objectID": "day_02.html#인구수",
    "href": "day_02.html#인구수",
    "title": "지도제작 대회",
    "section": "\n1.1 인구수",
    "text": "1.1 인구수\n\n코드library(readxl)\nlibrary(tidyverse)\n\ngeonames_raw &lt;- read_excel(\"data/geonames-all-cities-with-a-population-1000@public.xlsx\") %&gt;% \n    janitor::clean_names()\n\nkorea_raw &lt;- geonames_raw %&gt;% \n  select(name, country_code, population, coordinates) %&gt;% \n  filter(country_code  == \"KR\") %&gt;% \n  separate(coordinates, into = c(\"lat\", \"long\"), sep = \",\", convert = TRUE)\n\n\nkorea &lt;- korea_raw %&gt;% \n  mutate(도시명 = c(\"한천리\", \"청송군\", \"청산\", \"함열\", \"동면\",\n\"유려\", \"심원\", \"법성\", \"연천\", \"동복\", \"산티옥\",\n\"난겐\", \"제주시\", \"안남\", \"금정\", \"상사\", \"승주\",\n\"불갑\", \"원주\", \"벌교\", \"법원\", \"광주\", \"신안\",\n\"군서\", \"군북\", \"신동\", \"조성\", \"문경\", \"임실\",\n\"용산동\", \"하성\", \"겸백\", \"영광\", \"예산\",\n\"양주\", \"당진\", \"상주\", \"고창\", \"해남\", \"주문진\",\n\"청주시\", \"진천\", \"가이게투리\", \"규암\", \"선원\",\n\"탄현\", \"울산\", \"의정부시\", \"상주\", \"문경\", \"가평\",\n\"현풍\", \"홍성\", \"정옥\", \"장성\", \"신현\",\n\"광명\", \"회남\", \"용산\", \"번암\", \"월곶\", \"장흥\",\n\"아이센\", \"영덕\", \"전산\", \"부여\", \"부산\", \"오산\",\n\"고성\", \"경산시\", \"군위\", \"장흥\", \"성남시\",\n\"미조\", \"옥곡\", \"대구\", \"김제\", \"김천\", \"익산\",\n\"광양\", \"통해\", \"동이\", \"오남\", \"봉강\", \"용화\",\n\"성환\", \"강포\", \"싱왕\", \"정읍\", \"강동\", \"청풍\",\n\"진상\", \"옹룡\", \"봉래\", \"인계\", \"비인\", \"공주\",\n\"충주\", \"안양시\", \"장평\", \"해안\", \"문덕\",\n\"미력\", \"해리\", \"물량\", \"구림\", \"대전\", \"고성\",\n\"교사이\", \"연무\", \"화남\", \"서상\", \"서석\", \"남면\",\n\"해령\", \"송광\", \"상하\", \"동계\", \"서울\", \"아산\",\n\"괴산\", \"하양\", \"진안군\", \"장안\", \"남양주\", \"안내\",\n\"교동\", \"진월\", \"주암\", \"대산\", \"영동\", \"백전\",\n\"토성\", \"공음\", \"담양\", \"보령\", \"속초\", \"광주\",\n\"구룡포\", \"강화군\", \"청양\", \"진주\", \"진잠\", \"안산시\",\n\"발금\", \"별량\", \"남면\", \"태백\", \"푸안\", \"화순\", \"화천\", \"전주\",\n\"지도\", \"이원\", \"화원\", \"서귀포\", \"병곡\", \"통진\",\n\"진접\", \"보성\", \"영암\", \"염산\", \"칠보\", \"아이센\",\n\"포항\", \"목포\", \"구미\", \"김해\", \"천안\", \"일광\",\n\"산서\", \"산내\", \"덕진\", \"대마\", \"완주\", \"수원\",\n\"평창\", \"군포\", \"인천\", \"화성시\", \"창원\", \"창수\",\n\"홍농\", \"양사\", \"광탄\", \"유치\", \"연일\", \"양평\",\n\"왜관\", \"심천\", \"무안\", \"강릉\", \"화도\", \"와부\",\n\"설천\", \"대합\", \"동래\", \"네이츠\", \"신탄신\", \"금산\",\n\"추풍령\", \"안동\", \"청남\", \"황간\", \"창녕\", \"여주\",\n\"밀양\", \"홍천\", \"철원\", \"한남\", \"세종\", \"반남\",\n\"금성\", \"하동\", \"영천\", \"춘천\", \"백수\", \"성수\",\n\"학산\", \"순천\", \"군산\", \"청평\", \"송강동\", \"수동\",\n\"외서\", \"낙월\", \"강진\", \"용안\", \"동래\", \"나주\",\n\"문산\", \"구리시\", \"창평\", \"하점\", \"압해\", \"도포\",\n\"군서\", \"흥해\", \"유성\", \"이양\", \"태산리\", \"부천시\",\n\"논산\", \"광양\", \"이천시\", \"여수\", \"웅상\", \"내선\",\n\"파주\", \"청성\", \"서산\", \"경주\", \"관촌\", \"상월\", \"시종\",\n\"구정\", \"동면\", \"마산\", \"고양시\", \"기장\", \"안성\",\n\"청하\", \"군북\", \"송해\", \"광적\", \"관인\", \"방산\",\n\"노동\", \"나산\", \"임자\", \"양구\", \"일로\", \"오천\",\n\"신서\", \"부평\", \"화양\", \"세지\", \"해보\", \"군남\",\n\"쌍치\", \"양산\", \"옥천\", \"구례\", \"푸발\", \"삼승\",\n\"삼산\", \"신안\", \"정량\", \"해제\")) %&gt;% \n  filter(population &gt; 0) %&gt;% \n  arrange(desc(population))\n\nkorea\n#&gt; # A tibble: 130 × 6\n#&gt;    name        country_code population   lat  long 도시명\n#&gt;    &lt;chr&gt;       &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; \n#&gt;  1 Seoul       KR             10349312  37.6  127. 서울  \n#&gt;  2 Busan       KR              3678555  35.1  129. 부산  \n#&gt;  3 Incheon     KR              2954955  37.5  127. 인천  \n#&gt;  4 Daegu       KR              2566540  35.9  129. 대구  \n#&gt;  5 Gwangju     KR              1490092  35.2  127. 광주  \n#&gt;  6 Daejeon     KR              1469543  36.3  127. 대전  \n#&gt;  7 Suwon       KR              1241311  37.3  127. 수원  \n#&gt;  8 Goyang-si   KR              1073069  37.7  127. 고양시\n#&gt;  9 Seongnam-si KR              1031935  37.4  127. 성남시\n#&gt; 10 Ulsan       KR               962865  35.5  129. 울산  \n#&gt; # ℹ 120 more rows"
  },
  {
    "objectID": "day_02.html#df-sf-객체",
    "href": "day_02.html#df-sf-객체",
    "title": "지도제작 대회",
    "section": "\n2.1 DF → sf 객체",
    "text": "2.1 DF → sf 객체\n\n코드crsLONGLAT &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nkorea_sf &lt;- korea |&gt;\n    sf::st_as_sf(\n        coords = c(\"long\", \"lat\"),\n        crs = crsLONGLAT\n    )\n\nggplot() +\n    geom_sf(\n        data = korea_sf,\n        color = \"#7d1d53\", fill = \"#7d1d53\"\n    )"
  },
  {
    "objectID": "day_02.html#shapefile",
    "href": "day_02.html#shapefile",
    "title": "지도제작 대회",
    "section": "\n2.2 shapefile\n",
    "text": "2.2 shapefile\n\ngiscoR 유로스탯 - GISCO(유럽집행위원회 지리정보시스템)에서 데이터를 다운로드 없이 바로 사용할 수 있는 가벼운 API를 제공한다.\n\n코드kr &lt;- giscoR::gisco_get_countries(\n    resolution = \"1\",\n    country = \"KOR\") |&gt;\n    sf::st_transform(crsLONGLAT)\n\nplot(kr)"
  },
  {
    "objectID": "day_02.html#결합",
    "href": "day_02.html#결합",
    "title": "지도제작 대회",
    "section": "\n2.3 결합",
    "text": "2.3 결합\n\n코드kr_pop_sf &lt;- sf::st_intersection(korea_sf, kr)\n\nplot(sf::st_geometry(kr_pop_sf))"
  },
  {
    "objectID": "day_03.html",
    "href": "day_03.html",
    "title": "스파이크(Spike map)",
    "section": "",
    "text": "소스코드\n\n\n\nMaking crisp spike maps with R\n\n\n\n1 패키지\n\n코드### 0. PACKAGES\n### ------------------------\nlibs &lt;- c(\n    \"tidyverse\", \"R.utils\",\n    \"httr\", \"sf\", \"stars\",\n    \"rayshader\"\n)\n\n# install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n    install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n\n\n\n2 인구 데이터\n인도주의적 영역에서 신뢰할 수 있는 인구 데이터를 확보하는 것은 생명을 구하는 활동의 우선순위를 정하는 데 매우 중요하다. KONTUR: Population Density Dataset 인구 데이터 세트는 400m 해상도의 인구 수를 가진 H3 육각형으로 표현된다. 일반적인 정사각형 그리드 대신 H3 그리드를 사용하는 이유는 정사각형과 달리 육각형은 육각형 중심점과 인접한 셀의 중심 사이의 거리가 같기 때문이다. Republic of Korea: Population Density for 400m H3 Hexagons 데이터도 다운로드 가능하다.\n\n코드### 1. DOWNLOAD & UNZIP DATA\n### ------------------------\nurl &lt;-\n    \"https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_KR_20220630.gpkg.gz\"\nfile_name &lt;- \"korea-population.gpkg.gz\"\n\nget_population_data &lt;- function() {\n    res &lt;- httr::GET(\n        url,\n        write_disk(file_name, overwrite = TRUE),\n        progress()\n    )\n\n    R.utils::gunzip(file_name, remove = F)\n}\n\nget_population_data()\n\n\n\n3 데이터 불러오기\n\n코드### 2. LOAD DATA\n### -------------\nload_file_name &lt;- gsub(\".gz\", \"\", \"korea-population.gpkg.gz\")\n\ncrsWGS &lt;- \"+proj=tmerc +lat_0=38 +lon_0=128 +k=0.9999 +x_0=400000 +y_0=600000 +ellps=bessel +towgs84=-115.8,474.99,674.11,1.16,-2.31,-1.63,6.43 +units=m +no_defs\"\n\nget_population_data &lt;- function() {\n    pop_df &lt;- sf::st_read(\n        load_file_name\n    ) |&gt;\n        sf::st_transform(crs = crsWGS)\n}\n\npop_sf &lt;- get_population_data()\n\nhead(pop_sf)\nggplot() +\n    geom_sf(\n        data = pop_sf,\n        color = \"grey10\", fill = \"grey10\"\n    )\n\n\n\n4 Shape to Raster\n\n코드### 3. SHP TO RASTER\n### ----------------\n\nbb &lt;- sf::st_bbox(pop_sf)\n\nget_raster_size &lt;- function() {\n    height &lt;- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymax\"]]))\n    )\n    width &lt;- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmax\"]], bb[[\"ymin\"]]))\n    )\n\n    if (height &gt; width) {\n        height_ratio &lt;- 1\n        width_ratio &lt;- width / height\n    } else {\n        width_ratio &lt;- 1\n        height_ratio &lt;- height / width\n    }\n\n    return(list(width_ratio, height_ratio))\n}\nwidth_ratio &lt;- get_raster_size()[[1]]\nheight_ratio &lt;- get_raster_size()[[2]]\n\nsize &lt;- 3000\nwidth &lt;- round((size * width_ratio), 0)\nheight &lt;- round((size * height_ratio), 0)\n\nget_population_raster &lt;- function() {\n    pop_rast &lt;- stars::st_rasterize(\n        pop_sf |&gt;\n            dplyr::select(population, geom),\n        nx = width, ny = height\n    )\n\n    return(pop_rast)\n}\n\npop_rast &lt;- get_population_raster()\nplot(pop_rast)\n\npop_mat &lt;- pop_rast |&gt;\n    as(\"Raster\") |&gt;\n    rayshader::raster_to_matrix()\n\nlibrary(MetBrewer)\n# Specify the palette name in its own variable so that\n# we can reference it easily later.\npal &lt;- \"Demuth\"\ncolors &lt;- met.brewer(pal)\n\n# cols &lt;- rev(c(\n#     '#00004d', '#342863', '#595078', '#7d7b8a', '#a7a88b'\n# ))\n\ntexture &lt;- grDevices::colorRampPalette(colors)(256)\n\n# Create the initial 3D object\npop_mat |&gt;\n    rayshader::height_shade(texture = texture) |&gt;\n    rayshader::plot_3d(\n        heightmap = pop_mat,\n        solid = F,\n        soliddepth = 0,\n        zscale = 15,\n        shadowdepth = 0,\n        shadow_darkness = .95,\n        windowsize = c(800, 800),\n        phi = 65,\n        zoom = .65,\n        theta = -30,\n        background = \"white\"\n    )\n\n# Use this to adjust the view after building the window object\nrayshader::render_camera(phi = 75, zoom = .7, theta = 0)\n\nlibrary(rayrender)\n\nrayshader::render_highquality(\n    filename = \"images/korea_population_2022.png\",\n    preview = FALSE,\n    light = T,\n    lightdirection = 225,\n    lightaltitude = 60,\n    lightintensity = 400,\n    interactive = F,\n    width = width, height = height\n)"
  },
  {
    "objectID": "day_04.html",
    "href": "day_04.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nCreate crisp topographic maps with R\n\n\n\n1 패키지\n\n코드### 0. PACKAGES\n### ------------------------\nlibs &lt;- c(\n    \"elevatr\", \"terra\", \"tidyverse\",\n    \"sf\", \"giscoR\", \"osmdata\", \"marmap\"\n)\n\n# install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n    install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n\n\n\n2 국가 데이터\n\n코드# 1. GET COUNTRY MAP\n#------------------\ncrsLONGLAT &lt;- \"+proj=longlat +datum=WGS84 +no_defs\"\nget_country_sf &lt;- function() {\n    country_sf &lt;- giscoR::gisco_get_countries(\n        year = \"2020\",\n        epsg = \"4326\",\n        resolution = \"10\",\n        country = \"KR\"\n    ) |&gt;\n        sf::st_transform(crs = crsLONGLAT)\n\n    return(country_sf)\n}\n\ncountry_sf &lt;- get_country_sf()\n\n\n\n3 국가 고도 데이터\n\n코드# 2. GET COUNTRY ELEVATION DATA\n#------------------------------\nget_elevation_data &lt;- function() {\n    country_elevation &lt;- elevatr::get_elev_raster(\n        locations = country_sf,\n        z = 7,\n        clip = \"locations\"\n    )\n\n    return(country_elevation)\n}\n\ncountry_elevation &lt;- get_elevation_data()\nterra::plot(country_elevation)\n\n\n\n4 BBOX 고도 데이터\n\n코드# 3. GET BBOX ELEVATION DATA\n#------------------------------\nget_elevation_data_bbox &lt;- function() {\n    country_elevation &lt;- elevatr::get_elev_raster(\n        locations = country_sf,\n        z = 7,\n        clip = \"bbox\"\n    )\n\n    return(country_elevation)\n}\n\ncountry_elevation &lt;- get_elevation_data_bbox() |&gt;\n    terra::rast()\n\n\n\n\n\n\n\n코드# 4. PLOT\n#---------\nkr_elevation_gg &lt;- country_elevation |&gt;\n    as.data.frame(xy = TRUE) |&gt; \n    ggplot() +\n    geom_tile(\n        aes(x = x, y = y, fill = fileb78875126249 )\n    ) +\n    geom_sf(\n        data = country_sf,\n        fill = \"transparent\", color = \"yellow\", size = .25\n    ) +\n    theme_void()\n\nggsave(\n    filename = \"images/kr_blue_map.png\", width = 7, \n    height = 8.5, dpi = 600, device = \"png\", \n    kr_elevation_gg, bg = \"white\"\n)\n\n\n\n\n\n\n\n5 시각화\n\n코드# 7. FINAL MAP\n#-------------\n\ncountry_elevation_df &lt;- country_elevation |&gt;\n    as.data.frame(xy = T) |&gt;\n    na.omit()\n\nnames(country_elevation_df)[3] &lt;- \"elevation\"\n\ncountry_map &lt;-\n    ggplot(data = country_elevation_df) +\n    geom_raster(\n        aes(x = x, y = y, fill = elevation),\n        alpha = 1\n    ) +\n    marmap::scale_fill_etopo() +\n    coord_sf(crs = crsLONGLAT) +\n    labs(\n        x = \"\",\n        y = \"\",\n        title = \"\",\n        subtitle = \"\",\n        caption = \"\"\n    ) +\n    theme_minimal() +\n    theme(\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.margin = unit(c(t = 0, r = 0, b = 0, l = 0), \"cm\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        panel.border = element_blank()\n    )\n\ncountry_map\n\nggsave(\n    filename = \"images/korea_topo_map.png\", width = 7, \n    height = 8.5, dpi = 600, device = \"png\", \n    country_map, bg = \"white\"\n)\n\n\n\n\n\n\n\n6 추가작업\nhttp://bboxfinder.com/ 에서 제거할 영역을 선정한다.\n\n코드# 5. CROP AREA\n#--------------------\n# 7.805786,38.779781,10.134888,41.294317\nget_area_bbox &lt;- function() {\n    xmin &lt;- 7.805786\n    xmax &lt;- 10.134888\n    ymin &lt;- 38.779781\n    ymax &lt;- 41.294317\n\n    bbox &lt;- sf::st_sfc(\n        sf::st_polygon(list(cbind(\n            c(xmin, xmax, xmax, xmin, xmin),\n            c(ymin, ymin, ymax, ymax, ymin)\n        ))),\n        crs = crsLONGLAT\n    )\n\n    return(bbox)\n}\n\nbbox &lt;- get_area_bbox()\n\ncrop_area_with_polygon &lt;- function() {\n    bbox_vect &lt;- terra::vect(bbox)\n    bbox_raster &lt;- terra::crop(country_elevation, bbox_vect)\n    bbox_raster_final &lt;- terra::mask(\n        bbox_raster, bbox_vect\n    )\n    return(bbox_raster_final)\n}\n\nbbox_raster_final &lt;- crop_area_with_polygon()\n\nbbox_raster_final |&gt;\n    as.data.frame(xy = T) |&gt;\n    ggplot() +\n    geom_tile(\n        aes(x = x, y = y, fill = file514862c13e19)\n    ) +\n    geom_sf(\n        data = country_sf,\n        fill = \"transparent\", color = \"black\", size = .25\n    ) +\n    theme_void()\n\n# 6. GET REGION LINES\n#--------------------\nregion &lt;- \"Sardinia\"\n# define longlat projection\n\nsardinia_sf &lt;- osmdata::getbb(\n    region,\n    format_out = \"sf_polygon\"\n)\n\nsardinia_sf\n\nggplot() +\n    geom_sf(\n        data = sardinia_sf$multipolygon,\n        color = \"red\", fill = \"grey80\", size = .5\n    ) +\n    theme_void()\n\ncrop_region_with_polygon &lt;- function() {\n    region_vect &lt;- terra::vect(sardinia_sf$multipolygon)\n    region_raster &lt;- terra::crop(country_elevation, region_vect)\n    region_raster_final &lt;- terra::mask(\n        region_raster, region_vect\n    )\n    return(region_raster_final)\n}\n\nregion_raster_final &lt;- crop_region_with_polygon()\n\nregion_raster_final |&gt;\n    as.data.frame(xy = T) |&gt;\n    ggplot() +\n    geom_tile(\n        aes(x = x, y = y, fill = file514862c13e19)\n    ) +\n    geom_sf(\n        data = country_sf,\n        fill = \"transparent\", color = \"black\", size = .25\n    ) +\n    theme_void()"
  },
  {
    "objectID": "day_05.html",
    "href": "day_05.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\n3D digital elevation maps with R\n\n\n\n1 패키지\n\n코드# install rayvista\n# devtools::install_github(\"h-a-graham/rayvista\", dependencies = T)\n# # install elevatr\n# devtools::install_github(\"jhollist/elevatr\")\n# \n# remotes::install_github(\"tylermorganwall/rayshader\")\n# remotes::install_github(\"tylermorganwall/rayrender\")\n# remotes::install_github(\"dmurdoch/rgl\")\n\n# libraries we need\nlibs &lt;- c(\n    \"rayvista\", \"elevatr\",\n    \"rayshader\", \"sf\", \"giscoR\"\n)\n\n# install missing libraries\ninstalled_libs &lt;- libs %in% rownames(installed.packages())\nif (any(installed_libs == F)) {\n    install.packages(libs[!installed_libs])\n}\n\n# load libraries\ninvisible(lapply(libs, library, character.only = T))\n\ncrs_LONGLAT &lt;- \"+proj=longlat +datum=WGS84 +no_defs\"\n\n\n\n2 대한민국\n\n코드# 3. RAYVISTA - COUNTRY\n#----------------------\n\nkorea_sf &lt;- giscoR::gisco_get_countries(country = \"KR\",\n                                        resolution = \"1\") |&gt; \n  sf::st_transform(crs = crs_LONGLAT)\n\n\n\ncountry_elevation &lt;- elevatr::get_elev_raster(\n    locations = korea_sf,\n    z = 7,\n    clip = \"locations\"\n)\n\n\nnames(country_elevation) &lt;- \"elevation\"\n\nrgl::close3d()\n\nkorea_dem &lt;- rayvista::plot_3d_vista(\n    dem = country_elevation$elevation,\n    overlay_detail = 11,\n    zscale = 10,\n    zoom = .8,\n    phi = 85,\n    theta = 0,\n    solid = F,\n    windowsize = c(800, 800)\n)\n\nrayshader::render_camera(phi = 75, zoom = .7, theta = 0)\n\nrayshader::render_highquality(\n    filename = \"images/korea-dem.png\",\n    preview = FALSE,\n    light = T,\n    lightdirection = 225,\n    lightaltitude = 60,\n    lightintensity = 400,\n    parallel = TRUE,\n    width = 4000,\n    height = 4000,\n    interactive = FALSE\n)\n\n\n\n\n\n\n\n3 독도\n\n코드get_area_bbox &lt;- function() {\n    xmin &lt;- 131.860035\n    ymin &lt;- 37.237007\n    xmax &lt;- 131.874372\n    ymax &lt;- 37.245153\n\n    bbox &lt;- sf::st_sfc(\n        sf::st_polygon(\n            list(\n                cbind(\n                    c(xmin, xmax, xmax, xmin, xmin),\n                    c(ymin, ymin, ymax, ymax, ymin)\n                )\n            )\n        ), crs = crs_LONGLAT\n    ) |&gt; sf::st_as_sf()\n\n    return(bbox)\n}\n\ndokdo_bbox &lt;- get_area_bbox()\n\nrgl::close3d()\n\ndokdo_dem &lt;- rayvista::plot_3d_vista(\n    req_area = dokdo_bbox,\n    phi = 80,\n    theta = 0,\n    zscale = 0.1,\n    outlier_filter = .001\n)\n\nrayshader::render_snapshot(\n    filename = \"images/dokdo.png\",\n    clear = T\n)\n\n\n\n4 독도 (위경도)\n\n코드.lat  &lt;- (37.237007 + 37.245153) / 2\n.long &lt;- (131.860035 + 131.874372) / 2\n \ndokdo &lt;- plot_3d_vista(lat = .lat, long = .long,\n    radius =1000,\n    zscale = 5,\n    zoom = .8,\n    solid = TRUE,\n    elevation_detail = 13,\n    overlay_detail = 15,\n    theta = 0,\n    windowsize = 800)\n\nrayshader::render_camera(\n    zoom = .7, theta = 0, phi = 30\n)\n\nrayshader::render_highquality(\n    filename = \"images/dokdo_highqual.png\",\n    preview = T,\n    light = T,\n    lightdirection = 225,\n    lightintensity = 1200,\n    lightaltitude = 60,\n    interactive = F,\n    width = 4000,\n    height = 4000\n)"
  },
  {
    "objectID": "day_06.html",
    "href": "day_06.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nFelixAnalytix/YouTube"
  },
  {
    "objectID": "day_06.html#지도",
    "href": "day_06.html#지도",
    "title": "지도제작 대회",
    "section": "\n2.1 지도",
    "text": "2.1 지도\n\n코드world &lt;- ne_countries(scale=\"medium\", returnclass=\"sf\") %&gt;%\n  filter(admin != \"Antarctica\")\n\n## ----Change World map projection-----------------\n# Mollweide proj\ntarget_crs &lt;- \"+proj=longlat +datum=WGS84 +no_defs\"\n\nworld_wsg &lt;- world %&gt;%\n  st_transform(crs = target_crs)"
  },
  {
    "objectID": "day_06.html#실업율",
    "href": "day_06.html#실업율",
    "title": "지도제작 대회",
    "section": "\n2.2 실업율",
    "text": "2.2 실업율\n\n코드## ----Get data from the World Bank----------------\n# Example: Unemployment (% of labor force)\n# https://data.worldbank.org/indicator/SL.UEM.TOTL.ZS\nind &lt;- \"SL.UEM.TOTL.ZS\"\n\nindicator_info &lt;- wb_cachelist$indicators %&gt;%\n  filter(indicator_id == ind)\n\nindicator_info$indicator\n#&gt; [1] \"Unemployment, total (% of total labor force) (modeled ILO estimate)\"\n\n\n## ----Download data from World Bank---------------\ndf &lt;- wb_data(ind, start_date = 2020) %&gt;%\n  filter(date == 2020)\n\nglimpse(df)\n#&gt; Rows: 217\n#&gt; Columns: 9\n#&gt; $ iso2c          &lt;chr&gt; \"AW\", \"AF\", \"AO\", \"AL\", \"AD\", \"AE\", \"AR\", \"AM\", \"AS\", \"…\n#&gt; $ iso3c          &lt;chr&gt; \"ABW\", \"AFG\", \"AGO\", \"ALB\", \"AND\", \"ARE\", \"ARG\", \"ARM\",…\n#&gt; $ country        &lt;chr&gt; \"Aruba\", \"Afghanistan\", \"Angola\", \"Albania\", \"Andorra\",…\n#&gt; $ date           &lt;dbl&gt; 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2…\n#&gt; $ SL.UEM.TOTL.ZS &lt;dbl&gt; NA, 11.710, 10.350, 13.067, NA, 4.290, 11.460, 12.180, …\n#&gt; $ unit           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ obs_status     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ footnote       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ last_updated   &lt;date&gt; 2023-05-10, 2023-05-10, 2023-05-10, 2023-05-10, 2023-0…"
  },
  {
    "objectID": "day_06.html#전세계",
    "href": "day_06.html#전세계",
    "title": "지도제작 대회",
    "section": "\n3.1 전세계",
    "text": "3.1 전세계\n\n코드## ----Plot world map------------------------------\nworld_wsg %&gt;%\n  left_join(df, by = c(\"iso_a3\" = \"iso3c\")) %&gt;%\n  ggplot() +\n  geom_sf(aes(fill = SL.UEM.TOTL.ZS)) +\n  scale_fill_viridis_c(\n    trans = \"sqrt\",\n    labels = scales::percent_format(scale = 1),\n    breaks = c(1:5)^2) +\n  # fix labels if needed: https://stackoverflow.com/a/60733863\n  scale_x_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"W\")\n    ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"N\")\n    ) +\n  theme_bw() +\n  theme(panel.background = element_rect(fill = \"aliceblue\")) +\n  labs(\n    title = paste(unique(df$date), indicator_info$indicator),\n    fill = NULL,\n    caption = paste(\"자료출처:\", indicator_info$source_org) \n  )"
  },
  {
    "objectID": "day_06.html#아시아",
    "href": "day_06.html#아시아",
    "title": "지도제작 대회",
    "section": "\n3.2 아시아",
    "text": "3.2 아시아\nOpenStreetMap 내보내기(Export) 에서 테두리 상자(Bounding Box) 를 특정하여 아시아 지역으로 한정하여 시각화한다.\n\n코드## ----Create bounding box-------------------------\n# Choose manually the region to plot with Open Street Map\n# https://www.openstreetmap.org/export\nwindow_coord &lt;- st_sfc(\n  st_point(c(60, -10)), #left, bottom\n  st_point(c(150,50)), #right, top\n  crs = 4326 #the EPSG identifier of WGS84 (used in GPS)\n)\n\nwindow_coord_sf &lt;- window_coord %&gt;%\n  st_transform(crs = target_crs) %&gt;%\n  st_coordinates() # retrieve coordinates\n\n\n\n\n코드## ----Plot regional map---------------------------\nworld_wsg %&gt;%\n  left_join(df, by = c(\"iso_a3\" = \"iso3c\")) %&gt;% \n  ggplot() + \n  geom_sf(aes(fill = SL.UEM.TOTL.ZS)) +\n  # window of the map\n  coord_sf(\n    xlim = window_coord_sf[, \"X\"],\n    ylim = window_coord_sf[, \"Y\"],\n    expand = FALSE\n  ) +\n  scale_fill_viridis_c(\n    trans = \"sqrt\", \n    labels = scales::percent_format(scale = 1),\n    breaks = c(1:5)^2\n  ) +\n  # fix labels if needed: https://stackoverflow.com/a/60733863\n  scale_x_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"W\")\n    ) +\n  scale_y_continuous(\n    labels = function(x) paste0(x, '\\u00B0', \"N\")\n    ) +\n  theme_bw() +\n  theme(panel.background = element_rect(fill = \"aliceblue\")) +\n  labs(\n    title = indicator_info$indicator,\n    fill = NULL,\n    caption = paste(\"Source:\", indicator_info$source_org) \n  )"
  },
  {
    "objectID": "day_07.html",
    "href": "day_07.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nFelixAnalytix/YouTube"
  },
  {
    "objectID": "day_07.html#지도",
    "href": "day_07.html#지도",
    "title": "지도제작 대회",
    "section": "\n2.1 지도",
    "text": "2.1 지도\n\n코드# switzerland_sf &lt;- gisco_get_nuts(\n  # country = \"Switzerland\", \n  # nuts_level = 3, \n  # resolution = \"01\",\n  # cache = TRUE,\n  # update_cache = TRUE)\n\nswitzerland_sf &lt;- sf::st_read(\"data/gisco-services.ec.europa.eu_distribution_v2_nuts_geojson_NUTS_RG_01M_2016_4326_LEVL_3.geojson\")\n#&gt; Reading layer `gisco-services.ec.europa.eu_distribution_v2_nuts_geojson_NUTS_RG_01M_2016_4326_LEVL_3' from data source `D:\\tcs\\map_challenge\\data\\gisco-services.ec.europa.eu_distribution_v2_nuts_geojson_NUTS_RG_01M_2016_4326_LEVL_3.geojson' \n#&gt;   using driver `GeoJSON'\n#&gt; Simple feature collection with 1522 features and 10 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -63.15119 ymin: -21.38885 xmax: 55.83578 ymax: 71.18416\n#&gt; Geodetic CRS:  WGS 84\n\nswitzerland_sf\n#&gt; Simple feature collection with 1522 features and 10 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -63.15119 ymin: -21.38885 xmax: 55.83578 ymax: 71.18416\n#&gt; Geodetic CRS:  WGS 84\n#&gt; First 10 features:\n#&gt;       id LEVL_CODE NUTS_ID CNTR_CODE                           NAME_LATN\n#&gt; 1  HR043         3   HR043        HR         Krapinsko-zagorska županija\n#&gt; 2  AT314         3   AT314        AT                     Steyr-Kirchdorf\n#&gt; 3  AT315         3   AT315        AT                        Traunviertel\n#&gt; 4  DE600         3   DE600        DE                             Hamburg\n#&gt; 5  DE711         3   DE711        DE         Darmstadt, Kreisfreie Stadt\n#&gt; 6  DE712         3   DE712        DE Frankfurt am Main, Kreisfreie Stadt\n#&gt; 7  DE713         3   DE713        DE Offenbach am Main, Kreisfreie Stadt\n#&gt; 8  DE714         3   DE714        DE         Wiesbaden, Kreisfreie Stadt\n#&gt; 9  DE715         3   DE715        DE                         Bergstraße\n#&gt; 10 BE353         3   BE353        BE                  Arr. Philippeville\n#&gt;                              NUTS_NAME MOUNT_TYPE URBN_TYPE COAST_TYPE   FID\n#&gt; 1          Krapinsko-zagorska županija          4         3          3 HR043\n#&gt; 2                      Steyr-Kirchdorf          3         3          3 AT314\n#&gt; 3                         Traunviertel          3         3          3 AT315\n#&gt; 4                              Hamburg          4         1          1 DE600\n#&gt; 5          Darmstadt, Kreisfreie Stadt          4         1          3 DE711\n#&gt; 6  Frankfurt am Main, Kreisfreie Stadt          4         1          3 DE712\n#&gt; 7  Offenbach am Main, Kreisfreie Stadt          4         1          3 DE713\n#&gt; 8          Wiesbaden, Kreisfreie Stadt          4         1          3 DE714\n#&gt; 9                          Bergstraße          4         1          3 DE715\n#&gt; 10                  Arr. Philippeville          4         3          3 BE353\n#&gt;                          geometry\n#&gt; 1  MULTIPOLYGON (((16.25128 46...\n#&gt; 2  MULTIPOLYGON (((14.48275 48...\n#&gt; 3  MULTIPOLYGON (((13.75402 48...\n#&gt; 4  MULTIPOLYGON (((9.945376 53...\n#&gt; 5  MULTIPOLYGON (((8.725708 49...\n#&gt; 6  MULTIPOLYGON (((8.590239 50...\n#&gt; 7  MULTIPOLYGON (((8.717834 50...\n#&gt; 8  MULTIPOLYGON (((8.327649 50...\n#&gt; 9  MULTIPOLYGON (((8.93188 49....\n#&gt; 10 MULTIPOLYGON (((4.588663 50..."
  },
  {
    "objectID": "day_07.html#스위스-데이터셋",
    "href": "day_07.html#스위스-데이터셋",
    "title": "지도제작 대회",
    "section": "\n2.2 스위스 데이터셋",
    "text": "2.2 스위스 데이터셋\n\n코드# Swiss dataset: https://www.bfs.admin.ch/asset/de/px-x-1502000000_101\nswiss_students &lt;- BFS::bfs_get_data(number_bfs = \"px-x-1502000000_101\", language = \"de\", clean_names = TRUE)\n#&gt;   Downloading large query (in 8 batches):\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |======================================================================| 100%\n\nswiss_students_gender &lt;- swiss_students %&gt;%\n  pivot_wider(names_from = geschlecht, values_from = lernende) %&gt;%\n  mutate(share_woman = round(Frau/`Geschlecht - Total`*100, 1))\n\nswiss_students_gender\n#&gt; # A tibble: 12,420 × 8\n#&gt;    bildungsstufe   schulkanton staatsangehorigkeit_…¹ jahr  `Geschlecht - Total`\n#&gt;    &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;                  &lt;chr&gt;                &lt;dbl&gt;\n#&gt;  1 Bildungsstufe … Schweiz     Staatsangehörigkeit -… 1999…              1309950\n#&gt;  2 Bildungsstufe … Schweiz     Staatsangehörigkeit -… 2000…              1311661\n#&gt;  3 Bildungsstufe … Schweiz     Staatsangehörigkeit -… 2001…              1312533\n#&gt;  4 Bildungsstufe … Schweiz     Schweiz                1999…              1025029\n#&gt;  5 Bildungsstufe … Schweiz     Schweiz                2000…              1026294\n#&gt;  6 Bildungsstufe … Schweiz     Schweiz                2001…              1023831\n#&gt;  7 Bildungsstufe … Schweiz     Ausland                1999…               256356\n#&gt;  8 Bildungsstufe … Schweiz     Ausland                2000…               256191\n#&gt;  9 Bildungsstufe … Schweiz     Ausland                2001…               258098\n#&gt; 10 Bildungsstufe … Schweiz     Unbekannt              1999…                28565\n#&gt; # ℹ 12,410 more rows\n#&gt; # ℹ abbreviated name: ¹​staatsangehorigkeit_kategorie\n#&gt; # ℹ 3 more variables: Mann &lt;dbl&gt;, Frau &lt;dbl&gt;, share_woman &lt;dbl&gt;"
  },
  {
    "objectID": "day_07.html#지도와-데이터-결합",
    "href": "day_07.html#지도와-데이터-결합",
    "title": "지도제작 대회",
    "section": "\n2.3 지도와 데이터 결합",
    "text": "2.3 지도와 데이터 결합\n\n코드# Preferably using NUTS-3 code if possible\nswiss_student_map &lt;- swiss_students_gender %&gt;%\n  filter(schulkanton != \"Schweiz\") %&gt;%\n  mutate(schulkanton = str_remove(schulkanton, \".*/\"),\n         schulkanton = str_trim(schulkanton),\n         schulkanton = recode(schulkanton, \"Berne\" = \"Bern\", \"Grischun\" = \"Graubünden\", \"Wallis\" = \"Valais\")) %&gt;%\n  left_join(switzerland_sf, by = c(\"schulkanton\" = \"NUTS_NAME\"))\n\nswiss_student_map\n#&gt; # A tibble: 12,420 × 18\n#&gt;    bildungsstufe   schulkanton staatsangehorigkeit_…¹ jahr  `Geschlecht - Total`\n#&gt;    &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;                  &lt;chr&gt;                &lt;dbl&gt;\n#&gt;  1 Bildungsstufe … Zürich      Staatsangehörigkeit -… 1999…               209028\n#&gt;  2 Bildungsstufe … Zürich      Staatsangehörigkeit -… 2000…               210844\n#&gt;  3 Bildungsstufe … Zürich      Staatsangehörigkeit -… 2001…               211811\n#&gt;  4 Bildungsstufe … Zürich      Schweiz                1999…               161170\n#&gt;  5 Bildungsstufe … Zürich      Schweiz                2000…               161670\n#&gt;  6 Bildungsstufe … Zürich      Schweiz                2001…               162710\n#&gt;  7 Bildungsstufe … Zürich      Ausland                1999…                47856\n#&gt;  8 Bildungsstufe … Zürich      Ausland                2000…                49167\n#&gt;  9 Bildungsstufe … Zürich      Ausland                2001…                49099\n#&gt; 10 Bildungsstufe … Zürich      Unbekannt              1999…                    2\n#&gt; # ℹ 12,410 more rows\n#&gt; # ℹ abbreviated name: ¹​staatsangehorigkeit_kategorie\n#&gt; # ℹ 13 more variables: Mann &lt;dbl&gt;, Frau &lt;dbl&gt;, share_woman &lt;dbl&gt;, id &lt;chr&gt;,\n#&gt; #   LEVL_CODE &lt;int&gt;, NUTS_ID &lt;chr&gt;, CNTR_CODE &lt;chr&gt;, NAME_LATN &lt;chr&gt;,\n#&gt; #   MOUNT_TYPE &lt;int&gt;, URBN_TYPE &lt;int&gt;, COAST_TYPE &lt;int&gt;, FID &lt;chr&gt;,\n#&gt; #   geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "day_07.html#교육수준",
    "href": "day_07.html#교육수준",
    "title": "지도제작 대회",
    "section": "\n3.1 교육수준",
    "text": "3.1 교육수준\n\n코드swiss_student_map_bildungsstufe &lt;- swiss_student_map %&gt;%\n  filter(jahr == \"2001/02\",\n         schulkanton != \"Schweiz\",\n         staatsangehorigkeit_kategorie == \"Schweiz\") %&gt;%\n  select(schulkanton, jahr, bildungsstufe, share_woman, geometry) %&gt;%\n  pivot_wider(names_from = \"bildungsstufe\", values_from = \"share_woman\") %&gt;%\n  sf::st_as_sf()\n\nswiss_student_map_bildungsstufe %&gt;%\n  mapview(zcol = \"Bildungsstufe - Total\", layer.name = \"Total education level, % Woman\")"
  },
  {
    "objectID": "day_07.html#동기화",
    "href": "day_07.html#동기화",
    "title": "지도제작 대회",
    "section": "\n3.2 동기화",
    "text": "3.2 동기화\n\n코드# Synchronize multiple maps -----------------------------------------------\n\nleafsync::sync(\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Tertiärstufe\", layer.name = \"Tertiary level, % Woman\"),\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Sekundarstufe II\", layer.name = \"Secondary level II, % Woman\"),\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Obligatorische Schule\", layer.name = \"Mandatory school, % Woman\"),\n  swiss_student_map_bildungsstufe %&gt;%\n    mapview(zcol = \"Nicht auf Stufen aufteilbare Ausbildungen\", layer.name = \"Training that cannot be divided into levels, % Woman\")\n)"
  },
  {
    "objectID": "day_07.html#슬라이더",
    "href": "day_07.html#슬라이더",
    "title": "지도제작 대회",
    "section": "\n3.3 슬라이더",
    "text": "3.3 슬라이더\n\n\n코드# Comparing maps with a slider --------------------------------------------\n\nswiss_student_map_bildungsstufe_1999 &lt;- swiss_student_map %&gt;%\n  filter(jahr == \"1999/00\",\n         schulkanton != \"Schweiz\",\n         staatsangehorigkeit_kategorie == \"Schweiz\") %&gt;%\n  select(schulkanton, jahr, bildungsstufe, share_woman, geometry) %&gt;%\n  pivot_wider(names_from = \"bildungsstufe\", values_from = \"share_woman\") %&gt;%\n  sf::st_as_sf()\n\nmap1 &lt;- mapview(swiss_student_map_bildungsstufe, zcol = \"Bildungsstufe - Total\")\n\nmap2 &lt;- mapview(swiss_student_map_bildungsstufe_1999, zcol = \"Bildungsstufe - Total\")\n\nmap1 | map2"
  },
  {
    "objectID": "day_07.html#지도-1",
    "href": "day_07.html#지도-1",
    "title": "지도제작 대회",
    "section": "\n4.1 지도",
    "text": "4.1 지도\n\n코드# korea_sf &lt;- giscoR::gisco_get_nuts(\n#     resolution = \"1\",\n#     epsg = \"4326\",\n#     nuts_level = 1, \n#     cache = TRUE,\n#     update_cache = TRUE,\n#     country = \"KOR\") |&gt;\n#     sf::st_transform(crsLONGLAT)\n\nlibrary(sf)\nlibrary(tidyverse)\n\nkorea_sf_raw &lt;- sf::read_sf(\"data/gadm41_KOR_1.json\")\n\nkorea_sf &lt;- korea_sf_raw %&gt;% \n  separate(NL_NAME_1, into = c(\"시도명\", \"한자\"), sep=\"(\\\\||\\\\()\") %&gt;% \n  select(시도명, geometry) \n\nplot(korea_sf)"
  },
  {
    "objectID": "day_07.html#데이터-1",
    "href": "day_07.html#데이터-1",
    "title": "지도제작 대회",
    "section": "\n4.2 데이터",
    "text": "4.2 데이터\n\n코드library(krvote)\n\nvotes_tbl &lt;- krvote::election_20220309$득표율 %&gt;% \n  group_by(시도명) %&gt;% \n  summarise(이재명 = sum(이재명),\n            윤석열 = sum(윤석열))\n\nvotes_tbl\n#&gt; # A tibble: 17 × 3\n#&gt;    시도명          이재명  윤석열\n#&gt;    &lt;chr&gt;            &lt;dbl&gt;   &lt;dbl&gt;\n#&gt;  1 강원도          419644  544980\n#&gt;  2 경기도         4428151 3965341\n#&gt;  3 경상남도        794130 1237346\n#&gt;  4 경상북도        418371 1278922\n#&gt;  5 광주광역시      830058  124511\n#&gt;  6 대구광역시      345045 1199888\n#&gt;  7 대전광역시      434950  464060\n#&gt;  8 부산광역시      831896 1270072\n#&gt;  9 서울특별시     2944981 3255747\n#&gt; 10 세종특별자치시  119349  101491\n#&gt; 11 울산광역시      297134  396321\n#&gt; 12 인천광역시      913320  878560\n#&gt; 13 전라남도       1094872  145549\n#&gt; 14 전라북도       1016863  176809\n#&gt; 15 제주특별자치도  213130  173014\n#&gt; 16 충청남도        589991  670283\n#&gt; 17 충청북도        455853  511921"
  },
  {
    "objectID": "day_07.html#결합",
    "href": "day_07.html#결합",
    "title": "지도제작 대회",
    "section": "\n4.3 결합",
    "text": "4.3 결합\n\n코드\nvote_sf &lt;- korea_sf %&gt;% \n  left_join(votes_tbl) %&gt;% \n  mutate(득표마진 = 이재명 - 윤석열)"
  },
  {
    "objectID": "day_07.html#대선이재명",
    "href": "day_07.html#대선이재명",
    "title": "지도제작 대회",
    "section": "\n5.1 대선(이재명)",
    "text": "5.1 대선(이재명)\n\n코드library(mapview)\n\npalfunc &lt;- function (n, alpha = 1, begin = 0, end = 1, direction = 1) {\n  colors &lt;- RColorBrewer::brewer.pal(11, \"RdBu\")\n  if (direction &lt; 0) colors &lt;- rev(colors)\n  colorRampPalette(colors, alpha = alpha)(n)\n}\n\nvote_sf %&gt;%\n  mapview(zcol = \"득표마진\", layer.name = \"이재명 - 윤석열\", col.regions = palfunc)"
  },
  {
    "objectID": "day_07.html#이재명-vs-윤석열",
    "href": "day_07.html#이재명-vs-윤석열",
    "title": "지도제작 대회",
    "section": "\n5.2 이재명 vs 윤석열",
    "text": "5.2 이재명 vs 윤석열\n\n코드library(mapview)\n\nleafsync::sync(\n  vote_sf %&gt;%\n    mapview(zcol = \"이재명\", layer.name = \"이재명 득표수\"),\n  vote_sf %&gt;%\n    mapview(zcol = \"윤석열\", layer.name = \"윤석열 득표수\")  \n)"
  },
  {
    "objectID": "day_07.html#대선-비교",
    "href": "day_07.html#대선-비교",
    "title": "지도제작 대회",
    "section": "\n5.3 대선 비교",
    "text": "5.3 대선 비교\n\n\n코드vote_2012 &lt;- krvote::election_20121219$득표율 %&gt;% \n  group_by(시도명) %&gt;% \n  summarise(박근혜 = sum(박근혜),\n            문재인 = sum(문재인))\n\nvote_2012_sf &lt;- korea_sf %&gt;% \n  left_join(vote_2012) %&gt;% \n  mutate(득표마진 = 문재인 - 박근혜)\n\nmap_2022 &lt;- mapview(vote_2012_sf, zcol = \"득표마진\", layer.name = \"이재명 - 윤석열\", col.regions = palfunc)\n\nmap_2012 &lt;- mapview(vote_sf, zcol = \"득표마진\", layer.name = \"문재인 - 박근혜\", col.regions = palfunc)\n\nmap_2012 | map_2022"
  },
  {
    "objectID": "day_08.html",
    "href": "day_08.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "소스코드\n\n\n\nFelixAnalytix/YouTube\n\n\n\n1 패키지\n\n코드# Install R packages if not installed -------------------------------------\n\nif (!require(tidyverse)) install.packages(\"tidyverse\")\nif (!require(rvest)) install.packages(\"rvest\")\nif (!require(usethis)) install.packages(\"usethis\")\nif (!require(tidygeocoder)) install.packages(\"tidygeocoder\")\nif (!require(leaflet)) install.packages(\"leaflet\")\n\n\n# Attach R packages -------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(usethis)\nlibrary(tidygeocoder)\nlibrary(leaflet)\n\n\n\n2 데이터\n\n코드library(readxl)\nlibrary(tidyverse)\n\nmst_raw &lt;- read_excel(\"data/인천서구강소연구개발특구 기업현황 데이터 요청사항_230618.xlsx\", sheet = \"환경산업연구단지 입주기업\", skip = 1)\n\nmst_tbl &lt;- mst_raw %&gt;% \n  janitor::clean_names(ascii = FALSE) %&gt;% \n  select(!starts_with(\"x\")) \n\nmst_tbl\n#&gt; # A tibble: 129 × 19\n#&gt;     연번 회사명        대표자명 전화번호 분야  이메일주소 사업자번호 주소  매출 \n#&gt;    &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;\n#&gt;  1     1 주식회사 네…  전진오   070-422… 생활… neo@neost… 166-88-00… 인천… 5-9억\n#&gt;  2     2 프로덕트테크  박재민   &lt;NA&gt;     대기  &lt;NA&gt;       &lt;NA&gt;       인천… 5억 …\n#&gt;  3     3 (주)스피너스  조철호   02-2138… 폐기… ryam_cho@… 327-88-02… 인천… 5-9억\n#&gt;  4     4 한국도시재생… 이정학   032-467… 폐기… &lt;NA&gt;       339-87-00… 인천… 5-9억\n#&gt;  5     5 에코드릴 주…  박건준   02-808-… 대기  &lt;NA&gt;       116-88-01… 인천… 5-9억\n#&gt;  6     6 에코프로에이… 김종섭   043-210… 대기  ecopro@re… 283-87-02… 인천… 1,00…\n#&gt;  7     7 (주)어라운드… 최준영   070-485… 생활… aroundblu… 575-81-02… 인천… 5억 …\n#&gt;  8     8 주식회사 코…  이주혁   070-864… 생활… contact@c… 188-81-02… 인천… 10-4…\n#&gt;  9     9 주식회사 쉘…  최수빈   &lt;NA&gt;     생활… &lt;NA&gt;       443-87-02… 인천… 5억 …\n#&gt; 10    10 (주)에너지로… 이완구   032-573… 생활… e-road@e-… 120-88-03… 인천… 100-…\n#&gt; # ℹ 119 more rows\n#&gt; # ℹ 10 more variables: 녹색기술_녹색생활 &lt;chr&gt;, 기술1 &lt;chr&gt;, 기술2 &lt;chr&gt;,\n#&gt; #   기술3 &lt;chr&gt;, 개발예정품목 &lt;chr&gt;, 홈페이지 &lt;chr&gt;, 주요사업 &lt;chr&gt;,\n#&gt; #   주요취급품 &lt;chr&gt;, 주요매출처 &lt;chr&gt;, 비고 &lt;chr&gt;\n\n\n\n3 지오코딩\n\n코드tidygeocoder::api_info_reference %&gt;% \n  gt::gt() %&gt;% \n  gtExtras::gt_theme_538() %&gt;% \n  gt::cols_align(align = \"center\")\n\n\n\n\n\n\nmethod\n      method_display_name\n      site_url\n      api_documentation_url\n      api_usage_policy_url\n    \n\n\nosm\nNominatim\nhttps://nominatim.org\nhttps://nominatim.org/release-docs/develop/api/Search/\nhttps://operations.osmfoundation.org/policies/nominatim/\n\n\ncensus\nUS Census\nhttps://geocoding.geo.census.gov/\nhttps://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/census-geocoder.html\nhttps://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/census-geocoder.html\n\n\narcgis\nArcGIS\nhttps://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm\nhttps://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm\nhttps://developers.arcgis.com/rest/geocode/api-reference/geocoding-free-vs-paid.htm\n\n\ngeocodio\nGeocodio\nhttps://www.geocod.io/\nhttps://www.geocod.io/docs/\nhttps://www.geocod.io/pricing/\n\n\niq\nLocation IQ\nhttps://locationiq.com/\nhttps://locationiq.com/docs\nhttps://locationiq.com/pricing\n\n\ngoogle\nGoogle\nhttps://developers.google.com/maps/documentation/geocoding/overview\nhttps://developers.google.com/maps/documentation/geocoding/overview\nhttps://developers.google.com/maps/documentation/geocoding/usage-and-billing\n\n\nopencage\nOpenCage\nhttps://opencagedata.com\nhttps://opencagedata.com/api\nhttps://opencagedata.com/pricing\n\n\nmapbox\nMapbox\nhttps://docs.mapbox.com/api/search/\nhttps://docs.mapbox.com/api/search/geocoding/\nhttps://www.mapbox.com/pricing/\n\n\nhere\nHERE\nhttps://developer.here.com/products/geocoding-and-search\nhttps://developer.here.com/documentation/geocoding-search-api/dev_guide/index.html\nhttps://developer.here.com/pricing\n\n\ntomtom\nTomTom\nhttps://developer.tomtom.com/search-api/search-api-documentation/geocoding\nhttps://developer.tomtom.com/search-api/search-api-documentation-geocoding/geocode\nhttps://developer.tomtom.com/store/maps-api\n\n\nmapquest\nMapQuest\nhttps://developer.mapquest.com/documentation/geocoding-api/\nhttps://developer.mapquest.com/documentation/geocoding-api/\nhttps://developer.mapquest.com/plans\n\n\nbing\nBing\nhttps://docs.microsoft.com/en-us/bingmaps/rest-services/locations/\nhttps://docs.microsoft.com/en-us/bingmaps/rest-services/locations/\nhttps://docs.microsoft.com/en-us/bingmaps/spatial-data-services/geocode-and-data-source-limits\n\n\ngeoapify\nGeoapify\nhttps://www.geoapify.com/geocoding-api\nhttps://apidocs.geoapify.com/docs/geocoding/api/\nhttps://www.geoapify.com/term-and-conditions\n\n\n\n\n\n\n\n코드mst_tbl_geocodes &lt;- mst_tbl %&gt;%\n  geocode(address = 주소,  method = \"arcgis\")\n\nmst_tbl_geocodes_sample &lt;- mst_tbl_geocodes %&gt;% \n  select(회사명, 주소, lat, long) %&gt;% \n  group_by(lat) %&gt;% \n  slice_sample(n=1)\n\nmst_tbl_geocodes_sample %&gt;% \n  write_rds(\"data/incheon.rds\")\n\n\n\n4 시각화\n\n코드\nmst_tbl_geocodes_sample &lt;- \n  read_rds(\"data/incheon.rds\")\n\nmst_tbl_geocodes_sample %&gt;%\n  mutate(popup = paste0(\"&lt;b&gt;\", 회사명, \"&lt;/b&gt;\", \"&lt;br&gt;\",\n                        주소, \"&lt;br&gt;\")) %&gt;%\n  leaflet() %&gt;% \n  addTiles() %&gt;%\n  addProviderTiles(providers$CartoDB.Positron) %&gt;%\n  addMarkers(~long, ~lat, \n             popup  = ~popup) %&gt;%\n  addLayersControl(overlayGroups = ~회사명,\n                   options = layersControlOptions(collapsed = FALSE))"
  },
  {
    "objectID": "day_heatmap.html",
    "href": "day_heatmap.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "프롬프트\n응답결과\n실행결과\n\n\n\ngenerate dataset for leaflet heatmap in r\n\n\nCreating a dataset for a leaflet heatmap in R involves a few steps. You’ll need a set of geographic points, each with a latitude and longitude, and an associated value that you want to use to generate the heat map. The value might represent anything from population density to temperature to the number of occurrences of a specific event.\nHere’s an example of how to create a basic dataset in R:\n\n코드# Create a data frame\nheatmap_data &lt;- data.frame(\n  \"Lat\" = c(40.7128, 34.0522, 41.8781, 29.7604, 39.7392),    # latitudes of some US cities\n  \"Lon\" = c(-74.0060, -118.2437, -87.6298, -95.3698, -104.9903),   # longitudes of some US cities\n  \"Value\" = c(100, 200, 150, 80, 120)    # some made-up values\n)\n\n# Print the data frame\nprint(heatmap_data)\n\n\nThis script generates a simple data frame with latitude, longitude, and a value column. The latitude and longitude represent locations (in this case, some major US cities), and the ‘Value’ represents some made-up values.\nPlease replace the coordinates and values with your own data.\nOnce the dataset is ready, you can use the leaflet package in R to create a heatmap. Here is a simple example:\n\n코드# install the necessary packages if you haven't already\ninstall.packages(c(\"leaflet\", \"viridis\"))\nlibrary(leaflet)\nlibrary(viridis)\n\n# create the heatmap\nleaflet(heatmap_data) %&gt;%\n  addTiles() %&gt;%\n  addHeatmap(\n    lng = ~Lon,\n    lat = ~Lat,\n    intensity = ~Value,\n    radius = 20,\n    blur = 15,\n    max = 0.05,\n    gradient = colorRampPalette(viridis(6))(6)\n  )\n\n\nThis script generates a leaflet heatmap using the leaflet and viridis libraries. The addHeatmap function adds a heatmap layer to the map. The lng, lat, and intensity arguments specify the longitude, latitude, and values to use for the heatmap. The radius, blur, and max parameters control the appearance of the heatmap, and the gradient argument sets the color scheme.\n\n\n\n코드# Create a data frame\nheatmap_data &lt;- data.frame(\n  \"Lat\" = c(40.7128, 34.0522, 41.8781, 29.7604, 39.7392),    # latitudes of some US cities\n  \"Lon\" = c(-74.0060, -118.2437, -87.6298, -95.3698, -104.9903),   # longitudes of some US cities\n  \"Value\" = c(100, 200, 150, 80, 120)    # some made-up values\n)\n\n# install.packages(c(\"leaflet\", \"leaflet.extras\", \"viridis\"))\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(viridis)\n\n# create the heatmap\nleaflet(heatmap_data) %&gt;%\n  addTiles() %&gt;%\n  addHeatmap(\n    lng = ~Lon,\n    lat = ~Lat,\n    intensity = ~Value,\n    radius = 20,\n    blur = 15,\n    max = 0.05,\n    gradient = colorRampPalette(viridis(6))(6)\n  )"
  },
  {
    "objectID": "day_heatmap.html#데이터",
    "href": "day_heatmap.html#데이터",
    "title": "지도제작 대회",
    "section": "\n2.1 데이터",
    "text": "2.1 데이터\n기상청_지진정보 조회서비스에서 활용신청을 한 후에 API를 통해 기상청에서 제공하는 지진정보 데이터를 가져온다. 현재날짜기준 3일간 데이터만 최근 발생한 지진 데이터만 제공한다.\n\n코드library(tidyverse)\nlibrary(httr)\n\neq_req &lt;- glue::glue(\"http://apis.data.go.kr/1360000/EqkInfoService/getEqkMsg\",\n                     \"?serviceKey={Sys.getenv('EARTHQUAKE_API_KEY')}\",\n                     \"&pageNo=1\", \n                     \"&numOfRows=1000\", \n                     \"&dataType=JSON\", \n                     \"&fromTmFc={str_remove_all(Sys.Date()-3, '-')}\",\n                     \"&toTmFc={str_remove_all(Sys.Date(), '-')}\")\n\n\neq_resp &lt;- GET(eq_req)\n\neq_json &lt;- content(eq_resp, type = \"text\")\n\neq_list &lt;- jsonlite::fromJSON(eq_json) \n\nlistviewer::jsonedit(eq_list)"
  },
  {
    "objectID": "day_heatmap.html#데이터프레임",
    "href": "day_heatmap.html#데이터프레임",
    "title": "지도제작 대회",
    "section": "\n2.2 데이터프레임",
    "text": "2.2 데이터프레임\n\n코드library(gt)\nlibrary(gtExtras)\n\neq_tbl &lt;- pluck(eq_list, \"response\") %&gt;% \n  pluck(\"body\") %&gt;% \n  pluck(\"items\") %&gt;% \n  pluck(\"item\") %&gt;% \n  as_tibble() %&gt;% \n  mutate(lat = as.numeric(lat),\n        lon = as.numeric(lon))\n\neq_tbl %&gt;% \n  select(지도=img, 발생위치=loc, 진앙시=tmEqk, 규모=mt, 진도=inT, 깊이=dep, 참고사항=rem) %&gt;% \n  mutate(진앙시 = lubridate::ymd_hms(진앙시)) %&gt;% \n  gt() %&gt;% \n    cols_align(align=\"center\")  %&gt;% \n    gt_img_rows(columns = 지도, height = 200) %&gt;% \n    gt_theme_538()\n\n\n\n\n\n\n지도\n      발생위치\n      진앙시\n      규모\n      진도\n      깊이\n      참고사항\n    \n\n\n\n통가 누쿠알로파 남쪽 325km 해역\n2023-06-25 16:16:59\n6.0\n\n7\n국내영향없음. 위 자료는 미지질조사소(USGS) 분석결과임.\n\n\n\n북한 함경북도 길주 북북서쪽 42km 지역\n2023-06-25 11:55:14\n2.4\n최대진도 Ⅰ\n17\n자연지진으로 분석됨\n\n\n\n\n\n코드\n# eq_tbl %&gt;%\n#   write_rds(\"data/eq_tbl_20230627.rds\")"
  },
  {
    "objectID": "day_heatmap.html#시각화",
    "href": "day_heatmap.html#시각화",
    "title": "지도제작 대회",
    "section": "\n2.3 시각화",
    "text": "2.3 시각화\n\n코드library(leaflet.extras)\nlibrary(leaflet)\nlibrary(viridis)\n\neq_tbl &lt;- \n  read_rds(\"data/eq_tbl_20230627.rds\")\n\neq_tbl %&gt;% \n  leaflet() %&gt;%\n    addTiles() %&gt;%\n    addHeatmap(\n      lng = ~lon,\n      lat = ~lat,\n      intensity = ~mt,\n      radius = 20,\n      blur = 15,\n      max = 0.05,\n      gradient = colorRampPalette(viridis(6))(6)\n    )"
  },
  {
    "objectID": "day_heatmap.html#지진-데이터",
    "href": "day_heatmap.html#지진-데이터",
    "title": "지도제작 대회",
    "section": "\n3.1 지진 데이터",
    "text": "3.1 지진 데이터\n기상청 국내지진조회에서 엑셀파일로 데이터를 다운로드 받는다. 조회조건을 1900년 1월 1일부터하면 1978년이 첫 번째 기록된 지진기록으로 나온다.\n\n코드library(readxl)\n\neq_xlsx &lt;- read_excel(\"data/기상청_지진_19000101_20230627.xlsx\", skip = 1)\n\neq_xlsx %&gt;% \n  count(최대)\n#&gt; # A tibble: 7 × 2\n#&gt;   최대      n\n#&gt;   &lt;chr&gt; &lt;int&gt;\n#&gt; 1 Ⅰ       258\n#&gt; 2 Ⅱ        55\n#&gt; 3 Ⅲ        65\n#&gt; 4 Ⅳ        20\n#&gt; 5 Ⅴ         4\n#&gt; 6 진도      1\n#&gt; 7 &lt;NA&gt;   1753\n\neq_xlsx_tbl &lt;- eq_xlsx %&gt;% \n  slice(2:n()) %&gt;% \n  janitor::clean_names(ascii = FALSE) %&gt;% \n  mutate(lat = parse_number(위도),\n         lon = parse_number(경도)) %&gt;% \n  mutate(깊이_km = as.numeric(깊이_km))\n\neq_xlsx_tbl %&gt;% \n  select(지도=img, 위치, 규모, 발생시각, 깊이_km) %&gt;%  \n  slice_sample(n = 20) %&gt;% \n  gt() %&gt;% \n    cols_align(align=\"center\")  %&gt;% \n    gt_img_rows(columns = 지도, height = 200) %&gt;% \n    gt_theme_538()\n\n\n\n\n\n\n지도\n      위치\n      규모\n      발생시각\n      깊이_km\n    \n\n\n\n충남 태안군 서격렬비도 남서쪽 134km 해역\n2.3\n2022-09-23 07:40:30\nNA\n\n\n\n경북 울진군 서쪽 7km 지역\n2.5\n2018-08-29 05:01:29\n11\n\n\n\n강원 원주시 동남동쪽 15km 지역\n2.5\n2002-04-01 07:46:02\nNA\n\n\n\n충남 태안군 서격렬비열도 서남서쪽 40km 해역\n2.6\n2003-06-08 02:07:57\nNA\n\n\n\n경북 문경시 북동쪽 26km 지역\n2.2\n2018-09-14 09:08:13\n14\n\n\n\n경북 포항시 북구 북쪽 6km 지역\n2.4\n2017-11-15 14:50:05\n8\n\n\n\n경북 영덕군 북북동쪽 22km 해역\n2.6\n2017-05-04 01:08:27\n16\n\n\n\n경북 포항시 남구 동남동쪽 33km 해역\n2.6\n2016-06-15 02:07:18\n20\n\n\n\n북한 황해남도 용연 남쪽 32km 해역\n2.2\n2009-12-26 10:55:50\nNA\n\n\n\n제주 서귀포시 동쪽 58km 해역\n2.4\n2019-05-13 23:50:38\n17\n\n\n\n북한 황해북도 사리원 서쪽 9km 지역\n2.1\n2013-11-16 22:32:45\nNA\n\n\n\n경북 포항시 남구 동남동쪽 41km 해역\n2.1\n2002-07-12 08:17:37\nNA\n\n\n\n경북 안동시 서북서쪽 12km 지역\n2.9\n1985-05-13 18:26:38\nNA\n\n\n\n서울 북방 약 150km 지역\n3.1\n1983-07-27 00:25:23\nNA\n\n\n\n북한 황해북도 송림시 동쪽 19km 지역\n2.5\n2016-02-28 16:52:38\n6\n\n\n\n경북 안동시 동쪽 15km 지역\n3.1\n2013-02-04 05:39:25\nNA\n\n\n\n충남 보령시 서남서쪽 43km 해역\n2.3\n2013-06-29 13:32:48\nNA\n\n\n\n경북 영덕군 동북동쪽 28km 해역\n2.0\n2019-10-13 19:52:44\n20\n\n\n\n북한 함경북도 길주 북북서쪽 54km 지역\n2.7\n2017-10-13 01:41:08\nNA\n\n\n\n경북 의성군 서북서쪽 19km 지역\n2.1\n2018-06-15 11:10:02\n14"
  },
  {
    "objectID": "day_heatmap.html#발전소-데이터",
    "href": "day_heatmap.html#발전소-데이터",
    "title": "지도제작 대회",
    "section": "\n3.2 발전소 데이터",
    "text": "3.2 발전소 데이터\n공간통계를 위한 데이터 과학: 데이터프레임 → 지도 변환 - 지진과 원전\n\n코드library(sf)\n\n## 1.2. 원전 데이터 \nnp_df &lt;- tribble(~name, ~address, ~lat, ~lon,\n                \"고리\", \"부산광역시 기장군 장안읍 고리\", 35.459936176050455, 129.31042595766428,\n                \"월성\", \"경상북도 경주시 양남면 나아리\", 35.61415131635102, 129.47316094301584,\n                \"한빛\", \"전라남도 영광군 홍농읍 계마리\", 35.51221255154207, 126.578604835085,\n                \"한울\", \"경상북도 울진군 북면 부구리\", 37.18011679577809, 129.16451181750688)\n\nprojcrs &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nnp_sf &lt;- st_as_sf(x = np_df,                         \n           coords = c(\"lon\", \"lat\"),\n           crs = projcrs)"
  },
  {
    "objectID": "day_heatmap.html#시각화-1",
    "href": "day_heatmap.html#시각화-1",
    "title": "지도제작 대회",
    "section": "\n3.3 시각화",
    "text": "3.3 시각화\n\n코드eq_xlsx_tbl %&gt;% \n  select(lat,lon, 규모) %&gt;% \n  drop_na() %&gt;% \n  leaflet() %&gt;%\n    addTiles() %&gt;%\n    addHeatmap(\n      lng = ~lon,\n      lat = ~lat,\n      intensity = ~규모,\n      # radius = 30,\n      blur = 40,\n      max = 0.05,\n      gradient = colorRampPalette(viridis(5))(5)\n      # gradient=\"RdYlGn\"\n    ) %&gt;% \n    addMarkers(data = np_df, lng=~lon, lat=~lat, clusterOptions = markerClusterOptions(),\n                popup = ~ as.character(paste0(\"&lt;strong&gt;\", name, \"&lt;/strong&gt;&lt;br&gt;\",\n                                             \"--------------------------------&lt;br&gt;\",\n                                             \"&middot; 주소: \", address)))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "1 참고 웹사이트\n\n#30DayMapChallenge 🌎🌏🌎\n30 DAY MAP CHALLENGE IN R\nAbdoulMa/30DayMapChallenge\n\n2 원천 지도\n\n\n국토교통부\n\n\nLX 한국국토정보공사, 구 한국지적공사\n\n공간정보산업진흥원\n\nVWorld, 공간정보오픈플랫폼\n\n\n\n국토지리정보원\n\n국토정보플랫폼\n\n국가공간정보포털\n\n오픈마켓, 90m 표고 데이터: [국토지리정보원] 수치표고모델(DEM)_90M\n\n\n\n\n\n\n대한민국 행정동 경계: admdongkor\n대한민국 최신 행정구역(SHP) 다운로드\n\n3 세계지도\n출처: Fixing maps library data for Pacific centred (0°-360° longitude) display\n\n\n세계지도: giscoR\n세계지도: maps\n세계지도: rnaturalearth\n아시아\n대한민국\n태평양 중심\n\n\n\n\n코드library(tidyverse)\nlibrary(sf)\n\n# download.file(url = \"https://gisco-services.ec.europa.eu/distribution/v2/countries/geojson/CNTR_RG_01M_2016_4326.geojson\", destfile = \"data/world.geojson\", mode = \"w\")\n# \n# world_sf &lt;- giscoR::gisco_get_countries(\n#   epsg = \"4326\",\n#   region = \"Asia\",\n#   resolution = \"1\",\n#   cache = TRUE, \n#   update_cache = TRUE\n# )\n\nworld_sf &lt;- sf::st_read(\"data/world.geojson\")\n#&gt; Reading layer `world' from data source `D:\\tcs\\map_challenge\\data\\world.geojson' using driver `GeoJSON'\n#&gt; Simple feature collection with 257 features and 6 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.66498\n#&gt; Geodetic CRS:  WGS 84\n\nplot(st_geometry(world_sf))\n\n\n\n\n\n\n\n\n\n\n코드# 필요한 라이브러리를 불러옵니다.\nlibrary(ggplot2)\nlibrary(maps)\n\n# 월드맵 데이터를 불러옵니다.\nworld_map &lt;- map_data(\"world\")\n\n# ggplot2를 사용해 지도를 그립니다.\nggplot() +\n  geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = \"white\", color = \"black\") +\n  coord_cartesian(xlim = c(-180, 180)) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n코드library(rnaturalearth)\n\n# Get the world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Shift the map to center on the Pacific Ocean\nworld_trans &lt;- st_transform(st_wrap_dateline(world, options = c(\"WRAPDATELINE=YES\", \"DATELINEOFFSET=-180\")), crs = \"+proj=robin\")\n\n# Plot the world map\nggplot(data = world_trans) +\n  geom_sf() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n코드asia_sf &lt;- giscoR::gisco_get_countries(\n  epsg = \"4326\",\n  region = \"Asia\",\n  resolution = \"60\",\n  cache = TRUE,\n  update_cache = TRUE\n)\n\nplot(st_geometry(asia_sf))\n\n\n\n\n\n\n\n\n\n\n코드library(tidyverse)\nlibrary(sf)\nlibrary(giscoR)\n\nkorea &lt;- giscoR::gisco_get_countries(\n    resolution = \"1\",\n    country = \"KOR\"\n) |&gt;\n    sf::st_transform(\"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\")\n\nplot(st_geometry(korea))\n\n\n\n\n\n\n\n\n\n\n코드library(maps)\n\nplot.map&lt;- function(database,center,...){\n    Obj &lt;- map(database,...,plot=F)\n    coord &lt;- cbind(Obj[[1]],Obj[[2]])\n\n    # split up the coordinates\n    id &lt;- rle(!is.na(coord[,1]))\n    id &lt;- matrix(c(1,cumsum(id$lengths)),ncol=2,byrow=T)\n    polygons &lt;- apply(id,1,function(i){coord[i[1]:i[2],]})\n\n    # split up polygons that differ too much\n    polygons &lt;- lapply(polygons,function(x){\n        x[,1] &lt;- x[,1] + center\n        x[,1] &lt;- ifelse(x[,1]&gt;180,x[,1]-360,x[,1])\n        if(sum(diff(x[,1])&gt;300,na.rm=T) &gt;0){\n          id &lt;- x[,1] &lt; 0\n          x &lt;- rbind(x[id,],c(NA,NA),x[!id,])\n       }\n       x\n    })\n    # reconstruct the object\n    polygons &lt;- do.call(rbind,polygons)\n    Obj[[1]] &lt;- polygons[,1]\n    Obj[[2]] &lt;- polygons[,2]\n\n    map(Obj,...)\n}\n\nplot.map(\"world\", center=210, col=\"white\",bg=\"gray\",\n         fill=TRUE, ylim=c(-60,90),mar=c(0,0,0,0))"
  },
  {
    "objectID": "km_school.html",
    "href": "km_school.html",
    "title": "경기도 광명시",
    "section": "",
    "text": "행정안전부 주민등록, 인감 에서 행정기관(행정동) 및 관할구역(법정동) 코드를 다운로드 받을 수 있다.\n\n코드library(readxl)\nlibrary(tidyverse)\n\nadmin_code_raw &lt;- read_excel(\"data/jsocde20230611/KIKcd_H.20230611.xlsx\")\n\nadmin_code &lt;- admin_code_raw %&gt;% \n  mutate(시도 = str_sub(행정동코드, 1, 2),\n         시군구 = str_sub(행정동코드, 1, 4),\n         읍면동 = str_sub(행정동코드, 1, 8)) %&gt;% \n  select(행정동코드, 시도, 시도명, 시군구, 시군구명, 읍면동, 읍면동명) \n\nadmin_code %&gt;%\n  write_rds(\"data/admin_code.rds\")\n\nadmin_code\n#&gt; # A tibble: 3,882 × 7\n#&gt;    행정동코드 시도  시도명     시군구 시군구명 읍면동   읍면동명  \n#&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     \n#&gt;  1 1100000000 11    서울특별시 1100   &lt;NA&gt;     11000000 &lt;NA&gt;      \n#&gt;  2 1111000000 11    서울특별시 1111   종로구   11110000 &lt;NA&gt;      \n#&gt;  3 1111051500 11    서울특별시 1111   종로구   11110515 청운효자동\n#&gt;  4 1111053000 11    서울특별시 1111   종로구   11110530 사직동    \n#&gt;  5 1111054000 11    서울특별시 1111   종로구   11110540 삼청동    \n#&gt;  6 1111055000 11    서울특별시 1111   종로구   11110550 부암동    \n#&gt;  7 1111056000 11    서울특별시 1111   종로구   11110560 평창동    \n#&gt;  8 1111057000 11    서울특별시 1111   종로구   11110570 무악동    \n#&gt;  9 1111058000 11    서울특별시 1111   종로구   11110580 교남동    \n#&gt; 10 1111060000 11    서울특별시 1111   종로구   11110600 가회동    \n#&gt; # ℹ 3,872 more rows\n\n\n\n경기데이터드림 공공데이터 개방포털에서 초․중등학교 위치 현황(제공표준)에서 광명시만 해당 학교를 추출한다.\n\n코드gg_school &lt;- read_excel(\"data/초․중등학교위치현황(제공표준).xlsx\")\n\n## 광명시 초등학교\nkm_school &lt;- gg_school %&gt;% \n  filter(학교급구분 == \"초등학교\",\n         교육지원청명 == \"경기도광명교육지원청\") %&gt;% \n  select(주소 = 소재지도로명주소, 학교명, 경도, 위도, 설립형태, 설립일자) %&gt;% \n  mutate(경도 = as.numeric(경도),\n         위도 = as.numeric(위도))\n\nkm_school\n#&gt; # A tibble: 25 × 6\n#&gt;    주소                        학교명          경도  위도 설립형태 설립일자  \n#&gt;    &lt;chr&gt;                       &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;     \n#&gt;  1 경기도 광명시 가마산로 28   도덕초등학교    127.  37.5 공립     1986-04-25\n#&gt;  2 경기도 광명시 성채안로 16   충현초등학교    127.  37.4 공립     2011-03-01\n#&gt;  3 경기도 광명시 한내일로 5    구름산초등학교  127.  37.5 공립     2010-03-01\n#&gt;  4 경기도 광명시 소하일로 45   소하초등학교    127.  37.4 공립     1997-05-01\n#&gt;  5 경기도 광명시 도덕공원로 5  안현초등학교    127.  37.5 공립     2010-03-01\n#&gt;  6 경기도 광명시 안현로 16     하안초등학교    127.  37.5 공립     1989-10-12\n#&gt;  7 경기도 광명시 금당로 11-7   가림초등학교    127.  37.5 공립     1990-03-26\n#&gt;  8 경기도 광명시 가학로 247-55 안서초등학교    127.  37.4 공립     1964-03-04\n#&gt;  9 경기도 광명시 범안로 657    온신초등학교    127.  37.4 공립     1947-04-30\n#&gt; 10 경기도 광명시 광이로 21     광명초등학교    127.  37.5 공립     1971-03-01\n#&gt; # ℹ 15 more rows\n\n\n\n2022-01-27 등록된 경기도 광명시_어린이보호구역 내 CCTV 정보_API를 공공데이터포털에서 다운로드 받는다.\n\n코드library(sf)\n\ncctv_raw &lt;- read_csv(\"data/보호구역내cctv정보.csv\", locale=locale('ko',encoding='euc-kr'))\n\ncctv_tbl &lt;- cctv_raw %&gt;% \n  select(기기번호 = SFZN_ID, 용도 = INST_PURPS, 도로명주소=RDNMADR, 경도, 위도, 설치대수=CCTV_CNT, 일자=REF_DATE)\n\ncctv_tbl\n#&gt; # A tibble: 98 × 7\n#&gt;    기기번호 용도       도로명주소                 경도  위도 설치대수 일자      \n#&gt;       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;                     &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;    \n#&gt;  1       20 어린이보호 경기도 광명시 안현로 80-2  127.  37.5        1 2021-10-01\n#&gt;  2       21 다목적     경기도 광명시 소하일로 45  127.  37.4        1 2021-10-26\n#&gt;  3       11 다목적     경기도 광명시 금당로 11-7  127.  37.5        4 2021-10-14\n#&gt;  4       38 어린이보호 경기도 광명시 한내로13번…  127.  37.5        1 2021-10-12\n#&gt;  5       11 다목적     경기도 광명시 금당로 11-7  127.  37.5        1 2021-10-14\n#&gt;  6       11 어린이보호 경기도 광명시 금당로 11-7  127.  37.5        1 2021-10-14\n#&gt;  7       21 다목적     경기도 광명시 소하일로 45  127.  37.4        1 2021-10-26\n#&gt;  8       12 다목적     경기도 광명시 금당로 71    127.  37.5        1 2021-10-14\n#&gt;  9       12 어린이보호 경기도 광명시 금당로 71    127.  37.5        1 2021-10-14\n#&gt; 10       22 다목적     경기도 광명시 한내일로 5   127.  37.5        1 2021-10-26\n#&gt; # ℹ 88 more rows\n\n\n\n행정동 관련 다양한 지도가 존재한다. 국가공간정보포털을 통해 공간정보 포탈의 역할을 수행하였으나, 브이월드로 통합되고 있다. 브이월드는 공간정보오픈플랫폼으로 기존 국가공간정보포탈을 확장한 것으로 보인다.\n\n대한민국 행정동 경계(admdongkor): https://github.com/vuski/admdongkor\n\n통계청 (센서스경계)행정동경계: http://data.nsdi.go.kr/dataset/20171206ds00001\n\n국토교통부 행정구역시군구_경계: http://data.nsdi.go.kr/dataset/15144\n\n국토지리정보원 행정경계(시군구): http://data.nsdi.go.kr/dataset/20180927ds0058\n\n\n\n코드library(sf)\n\nadmin_sf &lt;- st_read(\"data/HangJeongDong_ver20230401.geojson\")\n#&gt; Reading layer `HangJeongDong_ver20230401' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\HangJeongDong_ver20230401.geojson' \n#&gt;   using driver `GeoJSON'\n#&gt; Simple feature collection with 3520 features and 10 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 124.6097 ymin: 33.11187 xmax: 131.8713 ymax: 38.61695\n#&gt; Geodetic CRS:  WGS 84\n\nkm_sf &lt;- admin_sf %&gt;% \n  filter(sgg == \"41210\") %&gt;% \n  st_transform(crs = 4326) %&gt;% \n  separate(temp, into = c(\"구시군\", \"읍면동\"), sep = \" \")\n\nplot(st_geometry(km_sf))"
  },
  {
    "objectID": "km_school.html#행정동-코드",
    "href": "km_school.html#행정동-코드",
    "title": "경기도 광명시",
    "section": "",
    "text": "행정안전부 주민등록, 인감 에서 행정기관(행정동) 및 관할구역(법정동) 코드를 다운로드 받을 수 있다.\n\n코드library(readxl)\nlibrary(tidyverse)\n\nadmin_code_raw &lt;- read_excel(\"data/jsocde20230611/KIKcd_H.20230611.xlsx\")\n\nadmin_code &lt;- admin_code_raw %&gt;% \n  mutate(시도 = str_sub(행정동코드, 1, 2),\n         시군구 = str_sub(행정동코드, 1, 4),\n         읍면동 = str_sub(행정동코드, 1, 8)) %&gt;% \n  select(행정동코드, 시도, 시도명, 시군구, 시군구명, 읍면동, 읍면동명) \n\nadmin_code %&gt;%\n  write_rds(\"data/admin_code.rds\")\n\nadmin_code\n#&gt; # A tibble: 3,882 × 7\n#&gt;    행정동코드 시도  시도명     시군구 시군구명 읍면동   읍면동명  \n#&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     \n#&gt;  1 1100000000 11    서울특별시 1100   &lt;NA&gt;     11000000 &lt;NA&gt;      \n#&gt;  2 1111000000 11    서울특별시 1111   종로구   11110000 &lt;NA&gt;      \n#&gt;  3 1111051500 11    서울특별시 1111   종로구   11110515 청운효자동\n#&gt;  4 1111053000 11    서울특별시 1111   종로구   11110530 사직동    \n#&gt;  5 1111054000 11    서울특별시 1111   종로구   11110540 삼청동    \n#&gt;  6 1111055000 11    서울특별시 1111   종로구   11110550 부암동    \n#&gt;  7 1111056000 11    서울특별시 1111   종로구   11110560 평창동    \n#&gt;  8 1111057000 11    서울특별시 1111   종로구   11110570 무악동    \n#&gt;  9 1111058000 11    서울특별시 1111   종로구   11110580 교남동    \n#&gt; 10 1111060000 11    서울특별시 1111   종로구   11110600 가회동    \n#&gt; # ℹ 3,872 more rows"
  },
  {
    "objectID": "km_school.html#초등학교",
    "href": "km_school.html#초등학교",
    "title": "경기도 광명시",
    "section": "",
    "text": "경기데이터드림 공공데이터 개방포털에서 초․중등학교 위치 현황(제공표준)에서 광명시만 해당 학교를 추출한다.\n\n코드gg_school &lt;- read_excel(\"data/초․중등학교위치현황(제공표준).xlsx\")\n\n## 광명시 초등학교\nkm_school &lt;- gg_school %&gt;% \n  filter(학교급구분 == \"초등학교\",\n         교육지원청명 == \"경기도광명교육지원청\") %&gt;% \n  select(주소 = 소재지도로명주소, 학교명, 경도, 위도, 설립형태, 설립일자) %&gt;% \n  mutate(경도 = as.numeric(경도),\n         위도 = as.numeric(위도))\n\nkm_school\n#&gt; # A tibble: 25 × 6\n#&gt;    주소                        학교명          경도  위도 설립형태 설립일자  \n#&gt;    &lt;chr&gt;                       &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;     \n#&gt;  1 경기도 광명시 가마산로 28   도덕초등학교    127.  37.5 공립     1986-04-25\n#&gt;  2 경기도 광명시 성채안로 16   충현초등학교    127.  37.4 공립     2011-03-01\n#&gt;  3 경기도 광명시 한내일로 5    구름산초등학교  127.  37.5 공립     2010-03-01\n#&gt;  4 경기도 광명시 소하일로 45   소하초등학교    127.  37.4 공립     1997-05-01\n#&gt;  5 경기도 광명시 도덕공원로 5  안현초등학교    127.  37.5 공립     2010-03-01\n#&gt;  6 경기도 광명시 안현로 16     하안초등학교    127.  37.5 공립     1989-10-12\n#&gt;  7 경기도 광명시 금당로 11-7   가림초등학교    127.  37.5 공립     1990-03-26\n#&gt;  8 경기도 광명시 가학로 247-55 안서초등학교    127.  37.4 공립     1964-03-04\n#&gt;  9 경기도 광명시 범안로 657    온신초등학교    127.  37.4 공립     1947-04-30\n#&gt; 10 경기도 광명시 광이로 21     광명초등학교    127.  37.5 공립     1971-03-01\n#&gt; # ℹ 15 more rows"
  },
  {
    "objectID": "km_school.html#cctv-정보",
    "href": "km_school.html#cctv-정보",
    "title": "경기도 광명시",
    "section": "",
    "text": "2022-01-27 등록된 경기도 광명시_어린이보호구역 내 CCTV 정보_API를 공공데이터포털에서 다운로드 받는다.\n\n코드library(sf)\n\ncctv_raw &lt;- read_csv(\"data/보호구역내cctv정보.csv\", locale=locale('ko',encoding='euc-kr'))\n\ncctv_tbl &lt;- cctv_raw %&gt;% \n  select(기기번호 = SFZN_ID, 용도 = INST_PURPS, 도로명주소=RDNMADR, 경도, 위도, 설치대수=CCTV_CNT, 일자=REF_DATE)\n\ncctv_tbl\n#&gt; # A tibble: 98 × 7\n#&gt;    기기번호 용도       도로명주소                 경도  위도 설치대수 일자      \n#&gt;       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;                     &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;    \n#&gt;  1       20 어린이보호 경기도 광명시 안현로 80-2  127.  37.5        1 2021-10-01\n#&gt;  2       21 다목적     경기도 광명시 소하일로 45  127.  37.4        1 2021-10-26\n#&gt;  3       11 다목적     경기도 광명시 금당로 11-7  127.  37.5        4 2021-10-14\n#&gt;  4       38 어린이보호 경기도 광명시 한내로13번…  127.  37.5        1 2021-10-12\n#&gt;  5       11 다목적     경기도 광명시 금당로 11-7  127.  37.5        1 2021-10-14\n#&gt;  6       11 어린이보호 경기도 광명시 금당로 11-7  127.  37.5        1 2021-10-14\n#&gt;  7       21 다목적     경기도 광명시 소하일로 45  127.  37.4        1 2021-10-26\n#&gt;  8       12 다목적     경기도 광명시 금당로 71    127.  37.5        1 2021-10-14\n#&gt;  9       12 어린이보호 경기도 광명시 금당로 71    127.  37.5        1 2021-10-14\n#&gt; 10       22 다목적     경기도 광명시 한내일로 5   127.  37.5        1 2021-10-26\n#&gt; # ℹ 88 more rows"
  },
  {
    "objectID": "km_school.html#지도",
    "href": "km_school.html#지도",
    "title": "경기도 광명시",
    "section": "",
    "text": "행정동 관련 다양한 지도가 존재한다. 국가공간정보포털을 통해 공간정보 포탈의 역할을 수행하였으나, 브이월드로 통합되고 있다. 브이월드는 공간정보오픈플랫폼으로 기존 국가공간정보포탈을 확장한 것으로 보인다.\n\n대한민국 행정동 경계(admdongkor): https://github.com/vuski/admdongkor\n\n통계청 (센서스경계)행정동경계: http://data.nsdi.go.kr/dataset/20171206ds00001\n\n국토교통부 행정구역시군구_경계: http://data.nsdi.go.kr/dataset/15144\n\n국토지리정보원 행정경계(시군구): http://data.nsdi.go.kr/dataset/20180927ds0058\n\n\n\n코드library(sf)\n\nadmin_sf &lt;- st_read(\"data/HangJeongDong_ver20230401.geojson\")\n#&gt; Reading layer `HangJeongDong_ver20230401' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\HangJeongDong_ver20230401.geojson' \n#&gt;   using driver `GeoJSON'\n#&gt; Simple feature collection with 3520 features and 10 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 124.6097 ymin: 33.11187 xmax: 131.8713 ymax: 38.61695\n#&gt; Geodetic CRS:  WGS 84\n\nkm_sf &lt;- admin_sf %&gt;% \n  filter(sgg == \"41210\") %&gt;% \n  st_transform(crs = 4326) %&gt;% \n  separate(temp, into = c(\"구시군\", \"읍면동\"), sep = \" \")\n\nplot(st_geometry(km_sf))"
  },
  {
    "objectID": "km_school.html#cctv-x-행정동",
    "href": "km_school.html#cctv-x-행정동",
    "title": "경기도 광명시",
    "section": "\n2.1 CCTV x 행정동",
    "text": "2.1 CCTV x 행정동\n\n코드# devtools::install_github(\"yutannihilation/ggsflabel\")\nlibrary(ggsflabel)\n\ncctv_sf &lt;- st_as_sf(cctv_tbl, coords = c(\"경도\", \"위도\"),\n           crs = 4326)\n\ncctv_admin_gg &lt;- ggplot() +\n  geom_sf(data = cctv_sf, aes(geometry = geometry)) +\n  geom_sf(data = km_sf, aes(geometry = geometry), alpha=0) +\n  theme_void() +\n  geom_sf_label_repel(data = km_sf, aes(label=읍면동))\n\ncctv_admin_gg"
  },
  {
    "objectID": "km_school.html#cctv-x-행정동-인터랙티브",
    "href": "km_school.html#cctv-x-행정동-인터랙티브",
    "title": "경기도 광명시",
    "section": "\n2.2 CCTV x 행정동 (인터랙티브)",
    "text": "2.2 CCTV x 행정동 (인터랙티브)\n\n코드library(plotly)\nlibrary(ggiraph)\n\ninfo &lt;- glue::glue(\"&middot; 용도: {cctv_sf$용도}&lt;br&gt;\",\n                   \"&middot; 일자: {cctv_sf$일자}&lt;br&gt;\",\n                   \"&middot; 설치대수: {cctv_sf$설치대수}&lt;br&gt;\",\n                   \"&middot; 위치: {cctv_sf$도로명주소}\")\n\ncctv_admin_plotly &lt;- ggplot() +\n  geom_sf(data = km_sf, aes(geometry = geometry), alpha=0) +\n  geom_sf_interactive(data=cctv_sf, aes(geometry = geometry, tooltip = info, size=as.integer(설치대수),\n                                        color = 용도), \n                      size =1) +\n  geom_sf_text_repel(data = km_sf, aes(label = 읍면동), color=\"blue\", size = 2) +\n  theme_void() +\n  labs(color = \"CCTV 용도\")\n\ngirafe(ggobj = cctv_admin_plotly)"
  },
  {
    "objectID": "km_school.html#광명시-현황",
    "href": "km_school.html#광명시-현황",
    "title": "경기도 광명시",
    "section": "\n3.1 광명시 현황",
    "text": "3.1 광명시 현황\n\n코드info &lt;- glue::glue(\"&middot; 용도: {cctv_sf$용도}&lt;br&gt;\",\n                   \"&middot; 일자: {cctv_sf$일자}&lt;br&gt;\",\n                   \"&middot; 설치대수: {cctv_sf$설치대수}&lt;br&gt;\",\n                   \"&middot; 위치: {cctv_sf$도로명주소}\")\n\nkm_school_sf  &lt;- \n  st_as_sf(km_school, coords = c(\"경도\", \"위도\"),\n           crs = 4326)\n\ncctv_school_plotly &lt;- ggplot() +\n  geom_sf(data = km_sf, aes(geometry = geometry), alpha=0) +\n  geom_sf_text_repel(data = km_school_sf, aes(label = 학교명), color=\"red\", size = 2) +\n  geom_sf(data = km_school_sf, aes(geometry = geometry), alpha=1) +\n  geom_sf_interactive(data=cctv_sf, aes(geometry = geometry, tooltip = info, size=as.integer(설치대수),\n                                        color = 용도), size =1) +\n  geom_sf_text_repel(data = km_sf, aes(label = 읍면동), color=\"blue\", size = 2) +\n  theme_void() +\n  labs(color = \"CCTV 용도\")\n\ngirafe(ggobj = cctv_school_plotly)"
  },
  {
    "objectID": "km_school.html#동별",
    "href": "km_school.html#동별",
    "title": "경기도 광명시",
    "section": "\n3.2 동별",
    "text": "3.2 동별\n\n3.2.1 스크립트\n\n코드## 동별지도 \nkm_dong_sf &lt;- km_sf %&gt;% filter(읍면동 == \"소하1동\")\nschool_dong_sf &lt;- st_filter(km_school_sf, km_dong_sf)\ncctv_dong_sf &lt;- st_filter(cctv_sf, km_dong_sf)\n\n## 동별 툴팁\ndong_info &lt;- glue::glue(\"&middot; 용도: {cctv_dong_sf$용도}&lt;br&gt;\",\n                   \"&middot; 일자: {cctv_dong_sf$일자}&lt;br&gt;\",\n                   \"&middot; 설치대수: {cctv_dong_sf$설치대수}&lt;br&gt;\",\n                   \"&middot; 위치: {cctv_dong_sf$도로명주소}\")\n\n\nggplot() +\n  ## 행정동 -------------\n  geom_sf(data = km_dong_sf , aes(geometry = geometry), alpha=0) +\n  geom_sf_text_repel(data = km_dong_sf, aes(label = 읍면동), color=\"blue\", size = 2) +\n  ## 학교 ---------------\n  geom_sf_text_repel(data = school_dong_sf, aes(label = 학교명), color=\"red\", size = 3) +\n  geom_sf(data = school_dong_sf, aes(geometry = geometry), alpha=1) +\n  ## CCTV ---------------\n  geom_sf_interactive(data=cctv_dong_sf, aes(geometry = geometry, tooltip = dong_info,\n                                             size=as.integer(설치대수), color = 용도), size =1) +\n  theme_void() +\n  labs(color = \"CCTV 용도\")\n\n\n\n\n\n\n\n\n3.2.2 함수\n\n코드draw_cctv_shcool_map &lt;- function(dong_name = \"소하1동\") {\n  ## 동별지도 \n  km_dong_sf &lt;- km_sf %&gt;% filter(읍면동 == dong_name)\n  school_dong_sf &lt;- st_filter(km_school_sf, km_dong_sf)\n  cctv_dong_sf &lt;- st_filter(cctv_sf, km_dong_sf)\n  \n  ## 동별 툴팁\n  dong_info &lt;- glue::glue(\"&middot; 용도: {cctv_dong_sf$용도}&lt;br&gt;\",\n                     \"&middot; 일자: {cctv_dong_sf$일자}&lt;br&gt;\",\n                     \"&middot; 설치대수: {cctv_dong_sf$설치대수}&lt;br&gt;\",\n                     \"&middot; 위치: {cctv_dong_sf$도로명주소}\")\n  \n  dong_interactive_gg &lt;- ggplot() +\n    ## 행정동 -------------\n    geom_sf(data = km_dong_sf , aes(geometry = geometry), alpha=0) +\n    geom_sf_text_repel(data = km_dong_sf, aes(label = 읍면동), color=\"blue\", size = 5) +\n    ## 학교 ---------------\n    geom_sf_text_repel(data = school_dong_sf, aes(label = 학교명), color=\"red\", size = 4) +\n    geom_sf(data = school_dong_sf, aes(geometry = geometry), alpha=1) +\n    ## CCTV ---------------\n    geom_sf_interactive(data=cctv_dong_sf, aes(geometry = geometry, tooltip = dong_info,\n                                               size=as.integer(설치대수), color = 용도), size =1) +\n    theme_void() +\n    labs(color = \"CCTV 용도\",\n         title = glue::glue(\"광명시: {dong_name}\"))\n  \n  # girafe(ggobj = dong_interactive_gg)\n  dong_interactive_gg\n}\n\ndraw_cctv_shcool_map(\"소하1동\")\n\n\n\n\n\n\n\n\n3.2.3 전체동\n\n코드\ndong_plots &lt;- map(km_sf$읍면동, draw_cctv_shcool_map)\nnames(dong_plots) &lt;- km_sf$읍면동\n\n\n\n\n\n광명1동\n광명2동\n광명3동\n광명4동\n광명5동\n광명6동\n광명7동\n철산1동\n철산2동\n철산3동\n철산4동\n하안1동\n하안2동\n하안3동\n하안4동\n소하1동\n일직동\n학온동\n소하2동"
  },
  {
    "objectID": "km_school.html#기본",
    "href": "km_school.html#기본",
    "title": "경기도 광명시",
    "section": "\n4.1 기본",
    "text": "4.1 기본\n\n코드library(leaflet)\nlibrary(fontawesome)\n\nkm_dong_sf &lt;- km_sf %&gt;% filter(읍면동 == \"소하1동\")\nschool_dong_sf &lt;- st_filter(km_school_sf, km_dong_sf)\ncctv_dong_sf &lt;- st_filter(cctv_sf, km_dong_sf)\n\n\ncctv_icons &lt;- awesomeIconList(\n  \"다목적\" = makeAwesomeIcon(\n    icon = \"camera\",\n    markerColor = \"blue\",\n    library = \"fa\",\n    text = fa(\"camera\")\n  ),\n  \"생활방범\" = makeAwesomeIcon(\n    icon = \"camera\",\n    markerColor = \"green\",\n    library = \"fa\",\n    text = fa(\"camera\")\n  ),\n  \"쓰레기단속\" = makeAwesomeIcon(\n    icon = \"camera\",\n    markerColor = \"purple\",\n    library = \"fa\",\n    text = fa(\"camera\")\n  ),\n  \"어린이보호\" = makeAwesomeIcon(\n    icon = \"camera\",\n    markerColor = \"red\",\n    library = \"fa\",\n    text = fa(\"camera\")\n  )\n)\n\nleaflet(data = cctv_tbl) %&gt;% \n  addProviderTiles(providers$OpenStreetMap) %&gt;% \n  ## 행정동\n  addPolygons(data = km_sf, \n              opacity = 1.0, fillOpacity = 0.0,\n            weight = 1,\n            highlightOptions = highlightOptions(color = \"black\", weight = 3,  bringToFront = TRUE),\n            label = ~읍면동,\n            labelOptions = labelOptions(\n            style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n            textsize = \"15px\",\n            direction = \"auto\")) %&gt;% \n  addMarkers(data = km_school, lng=~경도, lat=~위도, clusterOptions = markerClusterOptions(),\n            popup = ~ as.character(paste0(\"&lt;strong&gt;\", `학교명`, \"&lt;/strong&gt;&lt;br&gt;\",\n                                          \"--------------------------------&lt;br&gt;\",\n                                          \"&middot; 주소: \", `주소`, \"&lt;br&gt;\",\n                                          \"&middot; 설립형태: \", `설립형태`, \"&lt;br&gt;\",\n                                          \"&middot; 설립일자: \", `설립일자`))) %&gt;% \n\n  addAwesomeMarkers(data = cctv_tbl, lng=~경도, lat=~위도, clusterOptions = markerClusterOptions(),\n                    group = ~용도,\n             icon = ~ cctv_icons[용도],\n             popup = ~ as.character(paste0(\"&lt;strong&gt;\", 기기번호, \"&lt;/strong&gt;&lt;br&gt;\",\n                                           \"--------------------------------&lt;br&gt;\",\n                                           \"&middot; 설치위치: \", `도로명주소`, \"&lt;br&gt;\",\n                                           \"&middot; 설립대수: \", 설치대수, \"&lt;br&gt;\",\n                                           \"&middot; 용도: \", 용도)))"
  },
  {
    "objectID": "km_school.html#용도별-인터랙티브",
    "href": "km_school.html#용도별-인터랙티브",
    "title": "경기도 광명시",
    "section": "\n4.2 용도별 인터랙티브",
    "text": "4.2 용도별 인터랙티브\n참고: Show/Hide Layers\n\n\n코드cctv_tbl_split &lt;- split(cctv_tbl, cctv_tbl$용도)\n\nl &lt;- leaflet() %&gt;% addProviderTiles(providers$OpenStreetMap)\n\nunique(cctv_tbl$용도) %&gt;%\n  purrr::walk( function(df) {\n    l &lt;&lt;- l %&gt;%\n    ## 행정동\n    addPolygons(data = km_sf, \n                opacity = 1.0, fillOpacity = 0.0,\n              weight = 1,\n              highlightOptions = highlightOptions(color = \"black\", weight = 3,  bringToFront = TRUE),\n              label = ~읍면동,\n              labelOptions = labelOptions(\n              style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n              textsize = \"15px\",\n              direction = \"auto\")) %&gt;% \n      \n    addMarkers(data = km_school, lng=~경도, lat=~위도, clusterOptions = markerClusterOptions(),\n              popup = ~ as.character(paste0(\"&lt;strong&gt;\", `학교명`, \"&lt;/strong&gt;&lt;br&gt;\",\n                                            \"--------------------------------&lt;br&gt;\",\n                                            \"&middot; 주소: \", `주소`, \"&lt;br&gt;\",\n                                            \"&middot; 설립형태: \", `설립형태`, \"&lt;br&gt;\",\n                                            \"&middot; 설립일자: \", `설립일자`))) %&gt;% \n  \n    addAwesomeMarkers(data = cctv_tbl_split[[df]], \n                      lng=~경도, lat=~위도, clusterOptions = markerClusterOptions(),\n                      group = df,\n               icon = ~ cctv_icons[용도],\n               popup = ~ as.character(paste0(\"&lt;strong&gt;\", 기기번호, \"&lt;/strong&gt;&lt;br&gt;\",\n                                             \"--------------------------------&lt;br&gt;\",\n                                             \"&middot; 설치위치: \", `도로명주소`, \"&lt;br&gt;\",\n                                             \"&middot; 설립대수: \", 설치대수, \"&lt;br&gt;\",\n                                             \"&middot; 용도: \", 용도)))\n  })\n\n  l %&gt;%\n    addLayersControl(\n      overlayGroups = unique(cctv_tbl$용도),\n      options = layersControlOptions(collapsed = FALSE)\n    )"
  },
  {
    "objectID": "km_school.html#ppt",
    "href": "km_school.html#ppt",
    "title": "경기도 광명시",
    "section": "\n4.3 PPT",
    "text": "4.3 PPT\n\n코드cctv_tbl %&gt;% \n  write_rds(\"data/km_cctv_tbl.rds\")\n\nkm_sf %&gt;% \n  write_rds(\"data/km_km_sf.rds\")\n\nkm_school %&gt;% \n  write_rds(\"data/km_km_school.rds\")"
  },
  {
    "objectID": "km_school.html#어린이-교통사고",
    "href": "km_school.html#어린이-교통사고",
    "title": "경기도 광명시",
    "section": "\n5.1 어린이 교통사고",
    "text": "5.1 어린이 교통사고\n통계청 어린이 교통사고건수(시도/시/군/구)에서 광명시만 특정하여 데이터를 추출한다.\n\n코드library(readxl)\n\naccident_raw &lt;- read_excel(\"data/어린이_교통사고건수_시도_시_군_구__20230624195028.xlsx\", sheet = \"데이터\",\n           skip = 2)\n\naccident &lt;- accident_raw %&gt;% \n  select(1, 5:7) %&gt;% \n  set_names(c(\"시점\", \"사고건수\", \"사망자수\", \"부상자수\")) %&gt;% \n  mutate_all(as.integer) %&gt;% \n  pivot_longer(cols=-시점, names_to = \"구분\", values_to = \"건수\") %&gt;% \n  mutate(건수 = ifelse(is.na(건수), 0, 건수))\n\naccident\n#&gt; # A tibble: 51 × 3\n#&gt;     시점 구분      건수\n#&gt;    &lt;int&gt; &lt;chr&gt;    &lt;dbl&gt;\n#&gt;  1  2005 사고건수    93\n#&gt;  2  2005 사망자수     1\n#&gt;  3  2005 부상자수   106\n#&gt;  4  2006 사고건수    77\n#&gt;  5  2006 사망자수     0\n#&gt;  6  2006 부상자수    90\n#&gt;  7  2007 사고건수    60\n#&gt;  8  2007 사망자수     0\n#&gt;  9  2007 부상자수    62\n#&gt; 10  2008 사고건수    48\n#&gt; # ℹ 41 more rows\n\n\n\n코드extrafont::loadfonts()\n\naccident %&gt;% \n  ggplot(aes(x = 시점, y=건수, color = 구분)) +\n    geom_line() +\n    geom_point() +\n    labs(title = \"광명시 어린이 교통사고건수\",\n         x = \"\",\n         y = \"교통사고건수\",\n         caption = \"출처: KOSIS https://kosis.kr/statHtml/statHtml.do?orgId=101&tblId=DT_1YL202107\") +\n    theme_minimal(base_family = \"MaruBuri\")"
  },
  {
    "objectID": "km_school.html#어린이-교통사고-1",
    "href": "km_school.html#어린이-교통사고-1",
    "title": "경기도 광명시",
    "section": "\n5.2 어린이 교통사고",
    "text": "5.2 어린이 교통사고\n도로교통공단 교통사고 GIS 분석시스템 에서 2014~2022년 사이 경기도 광명시 “보행 어린이 사고”를 특정하여 분석한다.\n\n코드library(janitor)\nlibrary(gt)\nlibrary(gtExtras)\n\naccident_2016 &lt;- read_excel(\"data/km_accident_2014_2016.xlsx\")\naccident_2019 &lt;- read_excel(\"data/km_accident_2017_2019.xlsx\")\naccident_2022 &lt;- read_excel(\"data/km_accident_2020_2022.xlsx\")\n\naccident_tbl &lt;- bind_rows(accident_2016, accident_2019) %&gt;% \n  bind_rows(accident_2022)\n\naccident_tbl %&gt;% \n  group_by(사고유형) %&gt;% \n  summarize(사망자수 = sum(사망자수),\n            중상자수 = sum(중상자수),\n            경상자수 = sum(경상자수)) %&gt;% \n  adorn_totals(where = \"row\", name = \"합계\") %&gt;% \n  adorn_totals(where = \"col\", name = \"합계\") %&gt;% \n  ## 표 \n  gt::gt() %&gt;% \n    tab_header(\n      title = md(\"광명시 **보행 어린이** 교통사고\"),\n      subtitle = md(\"`TAAS` 교통사고분석시스템 (2014~2022)\")\n    ) %&gt;% \n    gt::cols_align(align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"교통사고 어린이 구분\",\n      columns = c(\n        사망자수, 중상자수, 경상자수\n      )\n    ) %&gt;% \n    gt_theme_538() %&gt;% \n     gt_highlight_rows(\n       rows = 사고유형 == \"차대사람 - 횡단중\",\n       fill = \"lightgrey\",\n       bold_target_only = TRUE,\n       target_col = everything()\n     )\n\n\n\n\n\n\n\n광명시 보행 어린이 교통사고\n    \n\n\nTAAS 교통사고분석시스템 (2014~2022)\n    \n\n사고유형\n      \n        교통사고 어린이 구분\n      \n      합계\n    \n\n사망자수\n      중상자수\n      경상자수\n    \n\n\n\n차대사람 - 기타\n0\n11\n34\n45\n\n\n차대사람 - 길가장자리구역통행중\n0\n3\n12\n15\n\n\n차대사람 - 보도통행중\n0\n2\n5\n7\n\n\n차대사람 - 차도통행중\n0\n3\n8\n11\n\n\n차대사람 - 횡단중\n3\n33\n59\n95\n\n\n차대차 - 기타\n0\n1\n2\n3\n\n\n차대차 - 측면충돌\n0\n3\n0\n3\n\n\n합계\n3\n56\n120\n179"
  },
  {
    "objectID": "spatial_map.html",
    "href": "spatial_map.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "raster 패키지 getData() 함수를 사용해서 지도제작을 할 수 있었으나, geodata 패키지로 기능이 이관되어 이를 사용한다.\n\n\n\n대한민국\n시도\n시군구\n\n\n\n\n코드library(raster)\nlibrary(sf)\nlibrary(geodata)\nlibrary(tidyverse)\nlibrary(osmdata)\nlibrary(stars)\nlibrary(rayshader)\nlibrary(MetBrewer)\nlibrary(colorspace)\n\n# 대한민국 전체\n\nfs::dir_create(\"data/gadm\")\n\n# korea &lt;- raster::getData(\"GADM\", country = \"KOR\", level = 0, path=\"data/gadm\") |&gt; \n#   st_as_sf()\n\nkorea &lt;- read_rds(\"data/gadm/gadm36_KOR_0_sp.rds\") %&gt;% st_as_sf()\n \nkorea |&gt; \n  ggplot() +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_sido &lt;- raster::getData(\"GADM\", country = \"KOR\", level = 1, path=\"data/gadm\") |&gt; \n#   st_as_sf()\n\nkorea_sido &lt;- read_rds(\"data/gadm/gadm36_KOR_1_sp.rds\") %&gt;% st_as_sf()\n \nkorea_sido |&gt; \n  ggplot() +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_sgg &lt;- raster::getData(\"GADM\", country = \"KOR\", level = 2, path=\"data/gadm\") |&gt; \n#   st_as_sf()\n\nkorea_sgg &lt;- read_rds(\"data/gadm/gadm36_KOR_2_sp.rds\") %&gt;% st_as_sf()\n \nkorea_sgg |&gt; \n  ggplot() +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n\ngeodata 웹사이트에 다양한 지도가 포함되어 있다.\n\n\n대한민국\n시도\n시군구\n\n\n\n\n코드library(raster)\nlibrary(sf)\nlibrary(geodata)\n\n# 대한민국 전체\n\n# korea_geo &lt;- gadm(\"KOR\", level=0, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#     st_as_sf()\n\nkorea_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_0_pk.rds\") %&gt;% st_as_sf()\n\nkorea_geo |&gt; \n  ggplot() +\n    geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_sido_geo &lt;- gadm(\"KOR\", level=1, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#     st_as_sf()\n\nkorea_sido_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_1_pk.rds\") %&gt;% st_as_sf()\n\nkorea_sido_geo |&gt; \n  ggplot() +\n    geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_geo_sgg &lt;- gadm(\"KOR\", level=2, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#   st_as_sf()\n\nkorea_sgg_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_2_pk.rds\") %&gt;% st_as_sf()\n \nkorea_sgg_geo |&gt; \n  ggplot() +\n    geom_sf()"
  },
  {
    "objectID": "spatial_map.html#raster-행정지도",
    "href": "spatial_map.html#raster-행정지도",
    "title": "지도제작 대회",
    "section": "",
    "text": "대한민국\n시도\n시군구\n\n\n\n\n코드library(raster)\nlibrary(sf)\nlibrary(geodata)\nlibrary(tidyverse)\nlibrary(osmdata)\nlibrary(stars)\nlibrary(rayshader)\nlibrary(MetBrewer)\nlibrary(colorspace)\n\n# 대한민국 전체\n\nfs::dir_create(\"data/gadm\")\n\n# korea &lt;- raster::getData(\"GADM\", country = \"KOR\", level = 0, path=\"data/gadm\") |&gt; \n#   st_as_sf()\n\nkorea &lt;- read_rds(\"data/gadm/gadm36_KOR_0_sp.rds\") %&gt;% st_as_sf()\n \nkorea |&gt; \n  ggplot() +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_sido &lt;- raster::getData(\"GADM\", country = \"KOR\", level = 1, path=\"data/gadm\") |&gt; \n#   st_as_sf()\n\nkorea_sido &lt;- read_rds(\"data/gadm/gadm36_KOR_1_sp.rds\") %&gt;% st_as_sf()\n \nkorea_sido |&gt; \n  ggplot() +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_sgg &lt;- raster::getData(\"GADM\", country = \"KOR\", level = 2, path=\"data/gadm\") |&gt; \n#   st_as_sf()\n\nkorea_sgg &lt;- read_rds(\"data/gadm/gadm36_KOR_2_sp.rds\") %&gt;% st_as_sf()\n \nkorea_sgg |&gt; \n  ggplot() +\n  geom_sf()"
  },
  {
    "objectID": "spatial_map.html#geodata-행정지도",
    "href": "spatial_map.html#geodata-행정지도",
    "title": "지도제작 대회",
    "section": "",
    "text": "geodata 웹사이트에 다양한 지도가 포함되어 있다.\n\n\n대한민국\n시도\n시군구\n\n\n\n\n코드library(raster)\nlibrary(sf)\nlibrary(geodata)\n\n# 대한민국 전체\n\n# korea_geo &lt;- gadm(\"KOR\", level=0, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#     st_as_sf()\n\nkorea_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_0_pk.rds\") %&gt;% st_as_sf()\n\nkorea_geo |&gt; \n  ggplot() +\n    geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_sido_geo &lt;- gadm(\"KOR\", level=1, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#     st_as_sf()\n\nkorea_sido_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_1_pk.rds\") %&gt;% st_as_sf()\n\nkorea_sido_geo |&gt; \n  ggplot() +\n    geom_sf()\n\n\n\n\n\n\n\n\n\n\n코드# korea_geo_sgg &lt;- gadm(\"KOR\", level=2, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#   st_as_sf()\n\nkorea_sgg_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_2_pk.rds\") %&gt;% st_as_sf()\n \nkorea_sgg_geo |&gt; \n  ggplot() +\n    geom_sf()"
  },
  {
    "objectID": "jeju_map.html",
    "href": "jeju_map.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드library(tidyverse)\nlibrary(rnaturalearth)\nlibrary(elevatr)\nlibrary(terra)\nlibrary(sf)\nlibrary(stars)\n\nkorea_map &lt;- ne_countries(type = \"countries\", country = \"south korea\", scale = \"medium\", returnclass = \"sf\")\n\nkorea_map %&gt;% \n  ggplot() +\n    geom_sf()\n\n\n\n\n\n\n\n\n\n코드library(tidyterra)\n\nkorea_dem &lt;- get_elev_raster(locations = korea_map, z = 5, clip = \"locations\") \n\nnames(korea_dem) &lt;- \"대한민국\"\n\nkorea_dem_tbl &lt;- as.data.frame(korea_dem, xy=TRUE) %&gt;% \n  as_tibble() %&gt;% \n  set_names(c(\"x\", \"y\", \"elevation\"))\n\nint_elevation &lt;- classInt::classIntervals(\n    korea_dem_tbl$elevation,\n    n = 5,\n    style = \"equal\"\n)$brks %&gt;% as.integer(.)\n\nggplot() +\n  geom_spatraster(data = korea_dem) +\n  facet_wrap(~lyr) +\n  theme(\n    legend.text.align = 1,\n    panel.spacing.x = unit(0, \"lines\"), axis.title.x = element_blank(),\n    axis.text = element_blank(), axis.ticks = element_blank(),\n    axis.title.y = element_blank(), plot.title = element_text(\n      hjust = 0.5,\n      size = 18, face = \"bold\"\n    ), strip.background = element_blank(),\n    strip.text = element_text(size = 14, color = \"black\", face = \"bold\"),\n    legend.text = element_text(size = 10, family=\"D2 Coding\"),\n    legend.title = element_text(hjust = 0.1, size = 16, face = \"bold\"), \n    panel.background = element_blank()\n  ) +\n  scale_fill_gradient2(\n     low = \"grey40\",\n     mid = \"white\",\n     high = \"blue\",\n     midpoint = 448, # 한반도의 평균 고도는 약 448m 정도로 동아시아 전체 평균(910m)에 비하면 현저히 낮다.\n     guide = \"colourbar\",\n     na.value = NA, \n     breaks = int_elevation,\n     labels = scales::label_number(suffix = \" m\", big.mark = \",\")\n  ) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(fill = \"높이\") +\n  coord_sf(crs = 4326)"
  },
  {
    "objectID": "jeju_map.html#sf",
    "href": "jeju_map.html#sf",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드library(tidyverse)\nlibrary(rnaturalearth)\nlibrary(elevatr)\nlibrary(terra)\nlibrary(sf)\nlibrary(stars)\n\nkorea_map &lt;- ne_countries(type = \"countries\", country = \"south korea\", scale = \"medium\", returnclass = \"sf\")\n\nkorea_map %&gt;% \n  ggplot() +\n    geom_sf()"
  },
  {
    "objectID": "jeju_map.html#tidyterra",
    "href": "jeju_map.html#tidyterra",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드library(tidyterra)\n\nkorea_dem &lt;- get_elev_raster(locations = korea_map, z = 5, clip = \"locations\") \n\nnames(korea_dem) &lt;- \"대한민국\"\n\nkorea_dem_tbl &lt;- as.data.frame(korea_dem, xy=TRUE) %&gt;% \n  as_tibble() %&gt;% \n  set_names(c(\"x\", \"y\", \"elevation\"))\n\nint_elevation &lt;- classInt::classIntervals(\n    korea_dem_tbl$elevation,\n    n = 5,\n    style = \"equal\"\n)$brks %&gt;% as.integer(.)\n\nggplot() +\n  geom_spatraster(data = korea_dem) +\n  facet_wrap(~lyr) +\n  theme(\n    legend.text.align = 1,\n    panel.spacing.x = unit(0, \"lines\"), axis.title.x = element_blank(),\n    axis.text = element_blank(), axis.ticks = element_blank(),\n    axis.title.y = element_blank(), plot.title = element_text(\n      hjust = 0.5,\n      size = 18, face = \"bold\"\n    ), strip.background = element_blank(),\n    strip.text = element_text(size = 14, color = \"black\", face = \"bold\"),\n    legend.text = element_text(size = 10, family=\"D2 Coding\"),\n    legend.title = element_text(hjust = 0.1, size = 16, face = \"bold\"), \n    panel.background = element_blank()\n  ) +\n  scale_fill_gradient2(\n     low = \"grey40\",\n     mid = \"white\",\n     high = \"blue\",\n     midpoint = 448, # 한반도의 평균 고도는 약 448m 정도로 동아시아 전체 평균(910m)에 비하면 현저히 낮다.\n     guide = \"colourbar\",\n     na.value = NA, \n     breaks = int_elevation,\n     labels = scales::label_number(suffix = \" m\", big.mark = \",\")\n  ) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(fill = \"높이\") +\n  coord_sf(crs = 4326)"
  },
  {
    "objectID": "yellow_sea.html",
    "href": "yellow_sea.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "참고자료: Intro to spatial data in R - Open and plot raster and vector data with base plot\n\n코드library(tidyverse)\nlibrary(sf)\nlibrary(rgdal)\n\n# 세계 해안선 shapefile을 불러옵니다.\nworld_coastline &lt;- st_read(\"data/ne_10m_coastline/ne_10m_coastline.shp\")\n#&gt; Reading layer `ne_10m_coastline' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\ne_10m_coastline\\ne_10m_coastline.shp' \n#&gt;   using driver `ESRI Shapefile'\n#&gt; Simple feature collection with 4133 features and 3 fields\n#&gt; Geometry type: LINESTRING\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -180 ymin: -85.22194 xmax: 180 ymax: 83.6341\n#&gt; Geodetic CRS:  WGS 84\n\nplot(st_geometry(world_coastline))\n\n\n\n\n\n\n\n\n\n코드# korea_geo_sgg &lt;- gadm(\"KOR\", level=2, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#   st_as_sf()\n\nkorea_sgg_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_2_pk.rds\") %&gt;% st_as_sf()\n \nkorea_sgg_geo |&gt; \n  ggplot() +\n    geom_sf()\n\n\n\n\n\n\n\n\n\n코드korea_coastline &lt;- st_join(korea_sgg_geo, world_coastline, join = st_intersects)\n\n# st_join(korea_sgg_geo, world_coastline, join = st_difference)\n\nplot(st_geometry(korea_coastline))"
  },
  {
    "objectID": "yellow_sea.html#전세계-해안선",
    "href": "yellow_sea.html#전세계-해안선",
    "title": "지도제작 대회",
    "section": "",
    "text": "참고자료: Intro to spatial data in R - Open and plot raster and vector data with base plot\n\n코드library(tidyverse)\nlibrary(sf)\nlibrary(rgdal)\n\n# 세계 해안선 shapefile을 불러옵니다.\nworld_coastline &lt;- st_read(\"data/ne_10m_coastline/ne_10m_coastline.shp\")\n#&gt; Reading layer `ne_10m_coastline' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\ne_10m_coastline\\ne_10m_coastline.shp' \n#&gt;   using driver `ESRI Shapefile'\n#&gt; Simple feature collection with 4133 features and 3 fields\n#&gt; Geometry type: LINESTRING\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -180 ymin: -85.22194 xmax: 180 ymax: 83.6341\n#&gt; Geodetic CRS:  WGS 84\n\nplot(st_geometry(world_coastline))"
  },
  {
    "objectID": "yellow_sea.html#대한민국",
    "href": "yellow_sea.html#대한민국",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드# korea_geo_sgg &lt;- gadm(\"KOR\", level=2, path=\"data/\", version=\"latest\", resolution=1) %&gt;% \n#   st_as_sf()\n\nkorea_sgg_geo &lt;- terra::readRDS(\"data/gadm/gadm41_KOR_2_pk.rds\") %&gt;% st_as_sf()\n \nkorea_sgg_geo |&gt; \n  ggplot() +\n    geom_sf()"
  },
  {
    "objectID": "yellow_sea.html#대한민국-해안선",
    "href": "yellow_sea.html#대한민국-해안선",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드korea_coastline &lt;- st_join(korea_sgg_geo, world_coastline, join = st_intersects)\n\n# st_join(korea_sgg_geo, world_coastline, join = st_difference)\n\nplot(st_geometry(korea_coastline))"
  },
  {
    "objectID": "yellow_sea.html#시군구",
    "href": "yellow_sea.html#시군구",
    "title": "지도제작 대회",
    "section": "\n2.1 시군구",
    "text": "2.1 시군구\n\n총 5 시군구: 김포시, 안산시 단원구, 화성시, 평택시, 시흥시\n\n\n코드sf_use_s2(FALSE)\n\nadmin_sf &lt;- st_read(\"data/HangJeongDong_ver20230401.geojson\")\n#&gt; Reading layer `HangJeongDong_ver20230401' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\HangJeongDong_ver20230401.geojson' \n#&gt;   using driver `GeoJSON'\n#&gt; Simple feature collection with 3520 features and 10 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 124.6097 ymin: 33.11187 xmax: 131.8713 ymax: 38.61695\n#&gt; Geodetic CRS:  WGS 84\n\ngg_incheon_sf &lt;- admin_sf %&gt;% \n  filter(sidonm %in% c(\"경기도\")) %&gt;% \n  group_by(sidonm, sggnm) %&gt;% \n  summarize(geometry = st_union(geometry)) %&gt;% \n  mutate(바다인접 = ifelse(str_detect(sggnm, \"김포|안산|화성|평택|시흥\"), \"바다인접\", \"비인접\")) %&gt;% \n  ungroup()\n\ngg_incheon_sf %&gt;% \n  ggplot() +\n    geom_sf(aes(fill=바다인접), linewidth = 0.1) +\n    ggrepel::geom_text_repel(\n      aes(label = sggnm, geometry = geometry), stat = \"sf_coordinates\", \n      min.segment.length = 1, size = 3\n    ) +\n    theme_void() +\n    scale_fill_manual(values = c(\"gray95\", \"skyblue\")) +\n    labs(title = \"경기도 바다인접 시군구\",\n         fill = \"바다인접 여부\")"
  },
  {
    "objectID": "yellow_sea.html#항구",
    "href": "yellow_sea.html#항구",
    "title": "지도제작 대회",
    "section": "\n2.2 항구",
    "text": "2.2 항구\n\n공공데이터 해양수산부 항만정보\n\n\n\n코드ports &lt;- read_csv(\"data/해양수산부_항만정보_20210105.csv\",locale=locale('ko',encoding='euc-kr'))\n\nports %&gt;% \n  filter(str_detect(항만위치, \"^경기\"))\n#&gt; # A tibble: 1 × 23\n#&gt;   국가관리구분 항구분 항만명     관리청    항만위치 항구역 `수(물)면적` 부지면적\n#&gt;   &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 국가관리     신항만 평택당진항 해양수산… 경기도 … 현면…         90992     6440\n#&gt; # ℹ 15 more variables: 설계파고 &lt;dbl&gt;, 설계파향 &lt;chr&gt;, 최고조위 &lt;dbl&gt;,\n#&gt; #   평균해면 &lt;dbl&gt;, 해저지질 &lt;chr&gt;, 방파제길이 &lt;dbl&gt;, 안벽길이 &lt;dbl&gt;,\n#&gt; #   `물양장(소형선부두)길이` &lt;dbl&gt;, `잔교수(기)` &lt;dbl&gt;, `상옥수(동)` &lt;dbl&gt;,\n#&gt; #   야적장면적 &lt;dbl&gt;, `접안능력수(선석)` &lt;dbl&gt;, 하역능력수 &lt;dbl&gt;,\n#&gt; #   기타시설물현황 &lt;chr&gt;, 주요취급화물 &lt;chr&gt;\n\n\n\n코드fishing_sf &lt;- st_read(\"data/해양경찰청_낚시어선 출입항 항포구 위치정보_20221129/D159-6.낚시어선 출입항 항포구 위치정보_v1.0.shp\")\n#&gt; Reading layer `D159-6.낚시어선 출입항 항포구 위치정보_v1.0' from data source `D:\\tcs\\map_challenge\\data\\해양경찰청_낚시어선 출입항 항포구 위치정보_20221129\\D159-6.낚시어선 출입항 항포구 위치정보_v1.0.shp' \n#&gt;   using driver `ESRI Shapefile'\n#&gt; Simple feature collection with 135 features and 9 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 856626.6 ymin: 1469293 xmax: 1301571 ymax: 2050009\n#&gt; Projected CRS: Korea 2000 / Unified CS\n\nfishing_sf &lt;- st_transform(fishing_sf, crs = st_crs(gg_incheon_sf))\n\nfishing_sf %&gt;% \n  ggplot() +\n    geom_sf() +\n    ggrepel::geom_text_repel(\n      aes(label = DEPART_NM, geometry = geometry), stat = \"sf_coordinates\", \n      min.segment.length = 1, size = 3\n    ) +\n    theme_void() +\n    labs(title = \"해양경찰청 낚시어선 출입항\")"
  },
  {
    "objectID": "yellow_sea.html#경기도-x-낚시항포구",
    "href": "yellow_sea.html#경기도-x-낚시항포구",
    "title": "지도제작 대회",
    "section": "\n2.3 경기도 X 낚시항포구",
    "text": "2.3 경기도 X 낚시항포구\n\n코드# gg_incheon_sf %&gt;% \n#   st_touches(fishing_sf %&gt;% select(DEPART_NM, geometry), left=FALSE) \n\ngg_fishing_sf &lt;- st_crop(fishing_sf, xmin = 126.3797, xmax = 127.8495,\n                                     ymin = 36.893530, ymax = 38.29204)\n\nggplot() +\n  geom_sf(data = gg_incheon_sf) +\n  geom_sf(data = gg_fishing_sf, color = \"red\") +\n  ggrepel::geom_text_repel(\n    data = gg_fishing_sf,\n      aes(label = DEPART_NM, geometry = geometry), stat = \"sf_coordinates\", \n      min.segment.length = 1, size = 3\n    ) +\n    theme_void() +\n    labs(title = \"해양경찰청 낚시어선 출입항\")"
  },
  {
    "objectID": "yellow_sea.html#경기도-x-어촌어항",
    "href": "yellow_sea.html#경기도-x-어촌어항",
    "title": "지도제작 대회",
    "section": "\n2.4 경기도 X 어촌어항",
    "text": "2.4 경기도 X 어촌어항\n\n해양수산부 어촌어항관리시스템\n\n\n코드library(readxl)\nlibrary(tidyverse)\nlibrary(httr)\nlibrary(jsonlite)\n\n## 국가어항\nnport_raw &lt;- read_excel(\"data/어촌어항.xlsx\", sheet = \"국가어항\", skip = 2)\n\nggport_tbl &lt;- nport_raw %&gt;% \n  janitor::clean_names(ascii = FALSE) %&gt;% \n  filter(str_detect(주소, \"^경기\")) %&gt;% \n  mutate(주소 = ifelse(어항_명 == \"제부항\", \"경기도 화성시 서신면 제부리 289-20\", 주소))\n\n\n\n코드get_lonlat &lt;- function(address) {\n  address_resp &lt;- GET(url = 'https://dapi.kakao.com/v2/local/search/address.json',\n           query = list(query = address),\n           add_headers(Authorization = paste0(\"KakaoAK \", Sys.getenv(\"DAUM_MAP_API_KEY\"))))\n\n  address_list &lt;- address_resp %&gt;% \n    content(as = 'text') %&gt;% \n    fromJSON()\n  \n  address_tbl &lt;- address_list$documents$road_address %&gt;% \n    dplyr::select(x,y) %&gt;% \n    mutate(x = as.numeric(x),\n           y = as.numeric(y))\n  \n  return(address_tbl)\n}\n\n# get_lonlat(kpmg_addr)\n\nsafely_get_lonlat &lt;- safely(get_lonlat, otherwise = \"error\")\n\nggport_geo &lt;- ggport_tbl %&gt;% \n  mutate(data = map(주소, safely_get_lonlat))\n\n# get_lonlat(ggport_tbl$주소[5])\n\n# get_lonlat(\"경기도 화성시 서신면 제부리 289-20\")\n\nggport_geo &lt;- ggport_geo %&gt;% \n  mutate(lonlat = map(data, \"result\")) %&gt;% \n  mutate(lonlat = ifelse(어항_명 == \"제부항\", list(data.frame(x = 126.6228811, y=37.1795305)), lonlat)) %&gt;% \n  mutate(lon = map(lonlat, select, x) %&gt;% unlist,\n         lat = map(lonlat, select, y) %&gt;% unlist)\n\nggport_geo %&gt;% \n  write_rds(\"data/ggport_geo.rds\")\n\n\n\n코드ggport_geo &lt;- read_rds(\"data/ggport_geo.rds\")\n\nggport_geo_sf &lt;- ggport_geo %&gt;% \n  sf::st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326, agr = \"constant\")\n\nggplot() +\n  geom_sf(data = gg_incheon_sf, aes(fill = 바다인접), linewidth = 0.1, show.legend = FALSE) +\n  geom_sf(data = ggport_geo_sf, aes(color = 어항_종류)) +\n  ggrepel::geom_text_repel(\n    data = ggport_geo_sf,\n      aes(label = 어항_명, geometry = geometry), stat = \"sf_coordinates\", \n      min.segment.length = 1, size = 3\n    ) +\n    theme_void() +\n    labs(title = \"경기도 국가/지방어항 현황\",\n         color = \"어항 종류\") +\n    ggrepel::geom_text_repel(\n      data = gg_incheon_sf,\n      aes(label = sggnm, geometry = geometry), stat = \"sf_coordinates\", \n      min.segment.length = 1, size = 3, show.legend = FALSE\n    )   +\n    scale_fill_manual(values = c(\"skyblue\", \"gray95\")) +  \n    scale_color_manual(values = c(\"지방어항\" = \"blue\", \"국가어항\" = \"red\",\n                                  \"바다인접\" = \"black\", \"비인접\" = \"orange\"))"
  },
  {
    "objectID": "yellow_sea.html#구시군-대선",
    "href": "yellow_sea.html#구시군-대선",
    "title": "지도제작 대회",
    "section": "\n3.1 5 구시군 대선",
    "text": "3.1 5 구시군 대선\n\n\n득표수\n득표율\n\n\n\n\n코드library(krvote)\nlibrary(janitor)\nlibrary(gt)\nlibrary(gtExtras)\n\nggport_sgg &lt;- krvote::election_20220309$득표율 %&gt;% \n  filter( str_detect(시도명, \"^경기\"),\n          str_detect(구시군명, \"^화성|^평택|^김포|^안산시단원구|^시흥\")) \n  \nggport_sgg_table &lt;- ggport_sgg %&gt;% \n  pivot_longer(이재명:계, names_to = \"후보\", values_to = \"득표\") %&gt;% \n  group_by(구시군명, 후보) %&gt;% \n  summarise(득표 = sum(득표)) %&gt;% \n  filter(후보 != \"계\") %&gt;% \n  ungroup() %&gt;% \n  mutate(후보 = case_when( 후보 == \"윤석열\" ~ \"국민의힘\",\n                           후보 == \"이재명\" ~ \"민주당\",\n                           TRUE ~ \"기타\")) %&gt;% \n  group_by(구시군명, 후보) %&gt;% \n  summarise( 득표 = sum(득표)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = 후보, values_from = 득표) %&gt;% \n  janitor::adorn_totals(where = \"col\", name = \"합계\") \n\n\nggport_sgg_table %&gt;% \n  relocate(기타, .before = 합계) %&gt;% \n  gt() %&gt;% \n    fmt_integer(columns = 국민의힘:합계) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"대선 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표\"),\n      subtitle = md(\"`제20대 대통령선거`\")\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표\n    \n\n제20대 대통령선거\n    \n\n구시군명\n      \n        대선 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n136,814\n153,206\n9,933\n299,953\n\n\n시흥시\n125,544\n178,462\n10,759\n314,765\n\n\n안산시단원구\n80,605\n103,595\n6,975\n191,175\n\n\n평택시\n156,630\n166,032\n13,143\n335,805\n\n\n화성시\n236,055\n283,324\n18,320\n537,699\n\n\n\n\n\n\n\n\n\n코드ggport_sgg_table %&gt;% \n  adorn_percentages() %&gt;% \n  gt::gt() %&gt;% \n    fmt_percent(columns = 국민의힘:합계, decimals = 1) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"대선 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표율(%)\"),\n      subtitle = md(\"`제20대 대통령선거`\")\n  )  \n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표율(%)\n    \n\n제20대 대통령선거\n    \n\n구시군명\n      \n        대선 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n45.6%\n51.1%\n3.3%\n100.0%\n\n\n시흥시\n39.9%\n56.7%\n3.4%\n100.0%\n\n\n안산시단원구\n42.2%\n54.2%\n3.6%\n100.0%\n\n\n평택시\n46.6%\n49.4%\n3.9%\n100.0%\n\n\n화성시\n43.9%\n52.7%\n3.4%\n100.0%"
  },
  {
    "objectID": "yellow_sea.html#대선-2022년",
    "href": "yellow_sea.html#대선-2022년",
    "title": "지도제작 대회",
    "section": "\n3.1 대선 (2022년)",
    "text": "3.1 대선 (2022년)\n\n\n득표수\n득표율\n\n\n\n\n코드library(krvote)\nlibrary(janitor)\nlibrary(gt)\nlibrary(gtExtras)\n\nggport_sgg &lt;- krvote::election_20220309$득표율 %&gt;% \n  filter( str_detect(시도명, \"^경기\"),\n          str_detect(구시군명, \"^화성|^평택|^김포|^안산시단원구|^시흥\")) \n  \nggport_sgg_table &lt;- ggport_sgg %&gt;% \n  pivot_longer(이재명:계, names_to = \"후보\", values_to = \"득표\") %&gt;% \n  group_by(구시군명, 후보) %&gt;% \n  summarise(득표 = sum(득표)) %&gt;% \n  filter(후보 != \"계\") %&gt;% \n  ungroup() %&gt;% \n  mutate(후보 = case_when( 후보 == \"윤석열\" ~ \"국민의힘\",\n                           후보 == \"이재명\" ~ \"민주당\",\n                           TRUE ~ \"기타\")) %&gt;% \n  group_by(구시군명, 후보) %&gt;% \n  summarise( 득표 = sum(득표)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = 후보, values_from = 득표) %&gt;% \n  janitor::adorn_totals(where = \"col\", name = \"합계\") \n\n\nggport_sgg_table %&gt;% \n  relocate(기타, .before = 합계) %&gt;% \n  gt() %&gt;% \n    fmt_integer(columns = 국민의힘:합계) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"대선 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표\"),\n      subtitle = md(\"`제20대 대통령선거`\")\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표\n    \n\n제20대 대통령선거\n    \n\n구시군명\n      \n        대선 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n136,814\n153,206\n9,933\n299,953\n\n\n시흥시\n125,544\n178,462\n10,759\n314,765\n\n\n안산시단원구\n80,605\n103,595\n6,975\n191,175\n\n\n평택시\n156,630\n166,032\n13,143\n335,805\n\n\n화성시\n236,055\n283,324\n18,320\n537,699\n\n\n\n\n\n\n\n\n\n코드ggport_sgg_table %&gt;% \n  adorn_percentages() %&gt;% \n  gt::gt() %&gt;% \n    fmt_percent(columns = 국민의힘:합계, decimals = 1) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"대선 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표율(%)\"),\n      subtitle = md(\"`제20대 대통령선거`\")\n  )   %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표율(%)\n    \n\n제20대 대통령선거\n    \n\n구시군명\n      \n        대선 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n45.6%\n51.1%\n3.3%\n100.0%\n\n\n시흥시\n39.9%\n56.7%\n3.4%\n100.0%\n\n\n안산시단원구\n42.2%\n54.2%\n3.6%\n100.0%\n\n\n평택시\n46.6%\n49.4%\n3.9%\n100.0%\n\n\n화성시\n43.9%\n52.7%\n3.4%\n100.0%"
  },
  {
    "objectID": "yellow_sea.html#총선-2020년",
    "href": "yellow_sea.html#총선-2020년",
    "title": "지도제작 대회",
    "section": "\n3.2 총선 (2020년)",
    "text": "3.2 총선 (2020년)\n\n\n득표수\n득표율\n\n\n\n\n코드library(stringi)\n\ngeneral_sgg &lt;- krvote::general_2020 %&gt;% \n  filter( str_detect(시도, \"^경기\"),\n          str_detect(선거구, \"^화성|^평택|^김포|^안산시단원구|^시흥\")) \n\ngeneral_sgg_table &lt;- general_sgg %&gt;% \n  unnest(data) %&gt;% \n  ## CP949 인코딩 처리\n  mutate(구분_cp949  = iconv(구분, \"euc-kr\", \"utf-8\")) %&gt;% \n  mutate(구분 = ifelse(is.na(구분_cp949), 구분, 구분_cp949)) %&gt;% \n  group_by(선거구, 구분) %&gt;% \n  summarise( 득표 = sum(사람수)) %&gt;% \n  filter(구분 != \"무표투표수\",\n         구분 != \"기권수\",\n         구분 != \"선거인수\",\n         구분 != \"투표수\",\n         구분 != \"계\") %&gt;% \n  ungroup() %&gt;% \n  mutate(구분 = case_when( str_detect(구분, \"민주당\") ~ \"민주당\",\n                           str_detect(구분, \"미래통합\") ~ \"국민의힘\",\n                           TRUE ~ \"기타\")) %&gt;% \n  group_by(선거구, 구분) %&gt;% \n  summarise(득표 = sum(득표)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = 구분, values_from = 득표) %&gt;% \n  janitor::adorn_totals(where = \"col\", name = \"합계\") \n\ngeneral_sgg_table %&gt;% \n  relocate(기타, .before = 합계) %&gt;% \n  gt() %&gt;% \n    fmt_integer(columns = 국민의힘:합계) %&gt;% \n    cols_align(columns = 선거구, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"대선 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표\"),\n      subtitle = md(\"`제21대 국회의원선거`\")\n  )  %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표\n    \n\n제21대 국회의원선거\n    \n\n선거구\n      \n        대선 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시갑\n42,660\n58,613\n9,556\n110,829\n\n\n김포시을\n52,200\n63,193\n1,996\n117,389\n\n\n시흥시갑\n59,595\n68,653\n4,497\n132,745\n\n\n시흥시을\n32,700\n69,270\n1,381\n103,351\n\n\n안산시단원구갑\n31,086\n42,009\n2,264\n75,359\n\n\n안산시단원구을\n38,497\n42,150\n1,476\n82,123\n\n\n평택시갑\n59,063\n62,564\n2,946\n124,573\n\n\n평택시을\n59,491\n57,540\n7,755\n124,786\n\n\n화성시갑\n52,291\n58,689\n7,218\n118,198\n\n\n화성시병\n47,377\n88,793\n1,599\n137,769\n\n\n화성시을\n52,802\n98,612\n1,391\n152,805\n\n\n\n\n\n\n\n\n\n코드general_sgg_table %&gt;% \n  adorn_percentages() %&gt;% \n  gt::gt() %&gt;% \n    fmt_percent(columns = 국민의힘:합계, decimals = 1) %&gt;% \n    cols_align(columns = 선거구, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"대선 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표율(%)\"),\n      subtitle = md(\"`제21대 국회의원선거`\")\n  )  %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표율(%)\n    \n\n제21대 국회의원선거\n    \n\n선거구\n      \n        대선 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시갑\n38.5%\n52.9%\n8.6%\n100.0%\n\n\n김포시을\n44.5%\n53.8%\n1.7%\n100.0%\n\n\n시흥시갑\n44.9%\n51.7%\n3.4%\n100.0%\n\n\n시흥시을\n31.6%\n67.0%\n1.3%\n100.0%\n\n\n안산시단원구갑\n41.3%\n55.7%\n3.0%\n100.0%\n\n\n안산시단원구을\n46.9%\n51.3%\n1.8%\n100.0%\n\n\n평택시갑\n47.4%\n50.2%\n2.4%\n100.0%\n\n\n평택시을\n47.7%\n46.1%\n6.2%\n100.0%\n\n\n화성시갑\n44.2%\n49.7%\n6.1%\n100.0%\n\n\n화성시병\n34.4%\n64.5%\n1.2%\n100.0%\n\n\n화성시을\n34.6%\n64.5%\n0.9%\n100.0%"
  },
  {
    "objectID": "yellow_sea2.html",
    "href": "yellow_sea2.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드library(sf)\nlibrary(giscoR)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(krvote)\nsf_use_s2(FALSE)\n\nkorea_sf &lt;- giscoR::gisco_get_countries(\n        year = \"2020\",\n        epsg = \"4326\",\n        resolution = \"01\",\n        country = \"KR\"\n    ) \n\nplot(st_geometry(korea_sf))\n\n\n\n\n\n\n\n\nGSHHG: A Global Self-consistent, Hierarchical, High-resolution Geography Database 아주 상세한 육지와 해안을 구분하는 해안선을 기준으로 인접한 경기도 선거구를 특정한다.\n\nfull resolution: Original (full) data resolution.\nhigh resolution: About 80 % reduction in size and quality.\nintermediate resolution: Another ~80 % reduction.\nlow resolution: Another ~80 % reduction.\ncrude resolution: Another ~80 % reduction.\n\n\n코드\n# coastline_sf &lt;-  giscoR::gisco_coastallines\n\ni_world_coastline &lt;- st_read(\"data/gshhg-shp-2.3.7/GSHHS_shp/i/GSHHS_i_L1.shp\")\n#&gt; Reading layer `GSHHS_i_L1' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\gshhg-shp-2.3.7\\GSHHS_shp\\i\\GSHHS_i_L1.shp' \n#&gt;   using driver `ESRI Shapefile'\n#&gt; Simple feature collection with 32830 features and 6 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -180 ymin: -68.91981 xmax: 180 ymax: 83.63339\n#&gt; Geodetic CRS:  WGS 84\n\ni_coastline_sf &lt;- i_world_coastline %&gt;% \n  st_crop(st_bbox(korea_sf))\n\nggplot(i_coastline_sf) +\n  geom_sf(color = \"blue\", fill = \"blue\", alpha = 0.2) +\n  # Zoom on Korea\n  # coord_sf(\n  #   xlim = c(korea_bbox['xmin'],  korea_bbox['xmax']),\n  #   ylim = c(korea_bbox['ymin'],  korea_bbox['ymax'])\n  # ) +\n  theme_minimal() +\n  theme(\n    plot.background = element_rect(\n      fill = \"black\",\n      color = \"black\"\n    ),\n    panel.grid = element_blank(),\n    axis.text = element_text(colour = \"grey90\")\n  )\n\n\n\n\n\n\n\n\n\n코드korea_coast_sf &lt;- st_join(korea_sf, i_coastline_sf)\n\nggplot(korea_coast_sf) +\n  geom_sf(color = \"black\", fill = \"transparent\", alpha = 0.2) +\n  geom_sf(data = i_coastline_sf, color = \"blue\", fill = \"transparent\", alpha = 0.2) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_text(colour = \"grey90\")\n  ) \n\n\n\n\n\n\n\n\nUN/LOCODE 표준으로 등재된 항구 코드 (KRPNC) 포함\n\n코드korea_port &lt;- gisco_get_ports(year = \"2013\",\n  country = \"KOR\")\n\nkorea_port &lt;- st_transform(korea_port, st_crs(korea_coast_sf))\n\nggplot(korea_coast_sf) +\n  geom_sf(color = \"blue\", fill = \"white\", alpha = 0.2) +\n  geom_sf(data = korea_port, color = \"red\", size = 2) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_text(colour = \"grey90\")\n  ) +\n  labs(\n    title = \"대한민국 항구\", subtitle = \"기준 2013년\",\n    caption = \"항구 코드: UN/LOCODE 표준\"\n  )  +\n  geom_text_repel(data = korea_port, aes(label = PORT_ID, geometry = geometry),\n                   stat = \"sf_coordinates\", min.segment.length = 0, size = 5, \n                   max.overlaps = Inf, box.padding = 1.0)"
  },
  {
    "objectID": "yellow_sea2.html#대한민국-지도",
    "href": "yellow_sea2.html#대한민국-지도",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드library(sf)\nlibrary(giscoR)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(krvote)\nsf_use_s2(FALSE)\n\nkorea_sf &lt;- giscoR::gisco_get_countries(\n        year = \"2020\",\n        epsg = \"4326\",\n        resolution = \"01\",\n        country = \"KR\"\n    ) \n\nplot(st_geometry(korea_sf))"
  },
  {
    "objectID": "yellow_sea2.html#해안선",
    "href": "yellow_sea2.html#해안선",
    "title": "지도제작 대회",
    "section": "",
    "text": "GSHHG: A Global Self-consistent, Hierarchical, High-resolution Geography Database 아주 상세한 육지와 해안을 구분하는 해안선을 기준으로 인접한 경기도 선거구를 특정한다.\n\nfull resolution: Original (full) data resolution.\nhigh resolution: About 80 % reduction in size and quality.\nintermediate resolution: Another ~80 % reduction.\nlow resolution: Another ~80 % reduction.\ncrude resolution: Another ~80 % reduction.\n\n\n코드\n# coastline_sf &lt;-  giscoR::gisco_coastallines\n\ni_world_coastline &lt;- st_read(\"data/gshhg-shp-2.3.7/GSHHS_shp/i/GSHHS_i_L1.shp\")\n#&gt; Reading layer `GSHHS_i_L1' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\gshhg-shp-2.3.7\\GSHHS_shp\\i\\GSHHS_i_L1.shp' \n#&gt;   using driver `ESRI Shapefile'\n#&gt; Simple feature collection with 32830 features and 6 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -180 ymin: -68.91981 xmax: 180 ymax: 83.63339\n#&gt; Geodetic CRS:  WGS 84\n\ni_coastline_sf &lt;- i_world_coastline %&gt;% \n  st_crop(st_bbox(korea_sf))\n\nggplot(i_coastline_sf) +\n  geom_sf(color = \"blue\", fill = \"blue\", alpha = 0.2) +\n  # Zoom on Korea\n  # coord_sf(\n  #   xlim = c(korea_bbox['xmin'],  korea_bbox['xmax']),\n  #   ylim = c(korea_bbox['ymin'],  korea_bbox['ymax'])\n  # ) +\n  theme_minimal() +\n  theme(\n    plot.background = element_rect(\n      fill = \"black\",\n      color = \"black\"\n    ),\n    panel.grid = element_blank(),\n    axis.text = element_text(colour = \"grey90\")\n  )"
  },
  {
    "objectID": "yellow_sea2.html#결합",
    "href": "yellow_sea2.html#결합",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드korea_coast_sf &lt;- st_join(korea_sf, i_coastline_sf)\n\nggplot(korea_coast_sf) +\n  geom_sf(color = \"black\", fill = \"transparent\", alpha = 0.2) +\n  geom_sf(data = i_coastline_sf, color = \"blue\", fill = \"transparent\", alpha = 0.2) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_text(colour = \"grey90\")\n  )"
  },
  {
    "objectID": "yellow_sea2.html#항구",
    "href": "yellow_sea2.html#항구",
    "title": "지도제작 대회",
    "section": "",
    "text": "UN/LOCODE 표준으로 등재된 항구 코드 (KRPNC) 포함\n\n코드korea_port &lt;- gisco_get_ports(year = \"2013\",\n  country = \"KOR\")\n\nkorea_port &lt;- st_transform(korea_port, st_crs(korea_coast_sf))\n\nggplot(korea_coast_sf) +\n  geom_sf(color = \"blue\", fill = \"white\", alpha = 0.2) +\n  geom_sf(data = korea_port, color = \"red\", size = 2) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_text(colour = \"grey90\")\n  ) +\n  labs(\n    title = \"대한민국 항구\", subtitle = \"기준 2013년\",\n    caption = \"항구 코드: UN/LOCODE 표준\"\n  )  +\n  geom_text_repel(data = korea_port, aes(label = PORT_ID, geometry = geometry),\n                   stat = \"sf_coordinates\", min.segment.length = 0, size = 5, \n                   max.overlaps = Inf, box.padding = 1.0)"
  },
  {
    "objectID": "yellow_sea2.html#제21대-총선-선구구",
    "href": "yellow_sea2.html#제21대-총선-선구구",
    "title": "지도제작 대회",
    "section": "\n2.1 제21대 총선 선구구",
    "text": "2.1 제21대 총선 선구구\n단순하고 가독성 높은 선거구 지도 제작을 위해 “서울”, “경기”, “부산”, “인천”, “광주” 를 제외!\n\n코드precinct_sf &lt;- st_read(\"data/2020_21_elec_253.json\")\n#&gt; Reading layer `2020_21_elec_253' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\2020_21_elec_253.json' using driver `GeoJSON'\n#&gt; Simple feature collection with 253 features and 4 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 124.6097 ymin: 33.11187 xmax: 131.8713 ymax: 38.61695\n#&gt; Geodetic CRS:  WGS 84\n\nkr_precinct_sf &lt;- precinct_sf %&gt;% \n  mutate(SGG_3 = str_remove(SGG_3, pattern = '^\\\\S*\\\\s'))\n\nggplot() +\n  geom_sf(data = kr_precinct_sf) +\n  geom_text_repel(data = kr_precinct_sf %&gt;% filter(!SGG_1 %in% c(\"서울\", \"경기\", \"부산\", \"인천\", \"광주\")), aes(label = SGG_3, geometry = geometry),\n                  stat = \"sf_coordinates\", min.segment.length = 0,\n                  max.overlaps = Inf, size = 3)\n\n\n\n\n\n\n\n\n\n지도\n선거구명\n\n\n\n\n코드kr_coast_sf &lt;- st_filter(precinct_sf, i_coastline_sf, .predicate = st_overlaps)\n\nggplot() +\n  geom_sf(data = kr_coast_sf) +\n  geom_sf(data = korea_coast_sf, color = \"blue\", fill = \"transparent\") +\n  geom_text_repel(data = kr_coast_sf, aes(label = SGG_3, geometry = geometry),\n                   stat = \"sf_coordinates\", min.segment.length = 0, size = 3, \n                   max.overlaps = Inf, box.padding = 1.0) +\n  labs(x = \"\",\n       y = \"\")\n\n\n\n\n\n\n\n\n\n\n코드library(gt)\nlibrary(gtExtras)\n\nkr_coast_sf %&gt;% \n  sf::st_drop_geometry() %&gt;% \n  mutate(SGG_3 = str_remove(SGG_3, pattern = '^\\\\S*\\\\s')) %&gt;% \n  group_by(시도명 = SGG_1) %&gt;% \n  summarise(선거구수 = n(),\n            선거구 = paste0(SGG_3, collapse=\"|\")) %&gt;% \n  arrange(desc(선거구수)) %&gt;% \n  janitor::adorn_totals(where = \"row\", name = \"합계\") %&gt;%   \n  gt::gt() %&gt;% \n    cols_align(align = \"center\") %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(title = \"해안선 인접 총선 선거구\",\n               subtitle = md(\"`선관위 제21대 선거구 기준`\")) \n\n\n\n\n\n\n\n해안선 인접 총선 선거구\n    \n\n선관위 제21대 선거구 기준\n    \n\n시도명\n      선거구수\n      선거구\n    \n\n\n\n경기\n13\n김포갑|파주갑|고양을|김포을|파주을|고양병|안산단원갑|안산상록갑|평택을|안산단원을|화성갑|고양정|시흥을\n\n\n부산\n11\n해운대갑|북강서을|남구갑|남구을|사하갑|중구영도구|사하을|수영|기장|서구동구|사상\n\n\n전남\n10\n순천광양곡성구례을|여수갑|여수을|고흥보성장흥강진|나주화순|영암무안신안|해남완도진도|순천광양곡성구례갑|목포|담양함평영광장성\n\n\n인천\n8\n연수갑|연수을|서구갑|중구강화옹진|서구을|남동갑|동구미추홀갑|동구미추홀을\n\n\n경남\n7\n창원마산회원|거제|창원성산|통영고성|창원진해|창원마산합포|사천남해하동\n\n\n충남\n7\n서산태안|보령서천|공주부여청양|당진|아산갑|아산을|홍성예산\n\n\n경북\n5\n경주|군위의성청송영덕|영주영양봉화울진|포항북구|포항남울릉\n\n\n울산\n4\n북구|남구을|동구|울주\n\n\n전북\n4\n김제부안|정읍고창|익산갑|군산\n\n\n강원\n3\n강릉|동해태백삼척정선|속초인제고성양양\n\n\n서울\n3\n마포을|강서을|강서병\n\n\n제주\n3\n제주을|서귀포|제주갑\n\n\n합계\n78\n-"
  },
  {
    "objectID": "yellow_sea2.html#제21대-경기도-선구구",
    "href": "yellow_sea2.html#제21대-경기도-선구구",
    "title": "지도제작 대회",
    "section": "\n2.2 제21대 경기도 선구구",
    "text": "2.2 제21대 경기도 선구구\n\n코드gg_precinct_sf &lt;- precinct_sf %&gt;% \n  filter(SGG_1 == \"경기\") %&gt;% \n  mutate(SGG_3 = str_remove(SGG_3, \"경기\\\\s+\")) \n\nggplot() +\n  geom_sf(data = gg_precinct_sf) +\n  geom_text_repel(data = gg_precinct_sf, aes(label = SGG_3, geometry = geometry),\n                  stat = \"sf_coordinates\", min.segment.length = 0,\n                  max.overlaps = Inf)\n\n\n\n\n\n\n\n\n\n지도\n선거구명\n\n\n\n\n코드gg_coast_sf &lt;- st_filter(gg_precinct_sf, coastline_sf, .predicate = st_overlaps)\n\nggplot() +\n  geom_sf(data = gg_coast_sf) +\n  geom_sf(data = gg_precinct_sf, color = \"blue\", fill = \"transparent\") +\n  geom_text_repel(data = gg_coast_sf, aes(label = SGG_3, geometry = geometry),\n                   stat = \"sf_coordinates\", min.segment.length = 0, size = 3, \n                   max.overlaps = Inf, box.padding = 1.0) +\n  labs(x = \"\",\n       y = \"\")\n\n\n\n\n\n\n\n\n\n\n코드\ngg_coast_sf %&gt;% \n  sf::st_drop_geometry() %&gt;% \n  mutate(SGG_3 = str_remove(SGG_3, pattern = '^\\\\S*\\\\s')) %&gt;% \n  gt::gt() %&gt;% \n    cols_align(align = \"center\") %&gt;% \n    tab_header(title = \"해안선 인접 총선 선거구\",\n               subtitle = md(\"`선관위 제21대 선거구 기준`\")) %&gt;% \n    cols_label(\n      SGG_Code = \"시군구 코드\",\n      SGG_1 = \"시도명\",\n      SGG_2 = \"선거구명\"\n    ) %&gt;% \n    gt_theme_538() \n\n\n\n\n\n\n\n해안선 인접 총선 선거구\n    \n\n선관위 제21대 선거구 기준\n    \n\n시군구 코드\n      시도명\n      선거구명\n      SGG_3\n    \n\n\n\n2413903\n경기\n경기도 김포시을\n김포을\n\n\n2411902\n경기\n경기도 안산시단원구을\n안산단원을\n\n\n2412801\n경기\n경기도 화성시갑\n화성갑\n\n\n2412902\n경기\n경기도 시흥시을\n시흥을"
  },
  {
    "objectID": "yellow_sea2.html#제21대-경기-선구구",
    "href": "yellow_sea2.html#제21대-경기-선구구",
    "title": "지도제작 대회",
    "section": "\n2.2 제21대 경기 선구구",
    "text": "2.2 제21대 경기 선구구\n\n코드gg_precinct_sf &lt;- precinct_sf %&gt;% \n  filter(SGG_1 == \"경기\") %&gt;% \n  mutate(SGG_3 = str_remove(SGG_3, \"경기\\\\s+\")) \n\nggplot() +\n  geom_sf(data = gg_precinct_sf) +\n  geom_text_repel(data = gg_precinct_sf, aes(label = SGG_3, geometry = geometry),\n                  stat = \"sf_coordinates\", min.segment.length = 0,\n                  max.overlaps = Inf)\n\n\n\n\n\n\n\n\n\n지도\n선거구명\n\n\n\n\n코드gg_coast_sf &lt;- st_filter(gg_precinct_sf, i_coastline_sf, .predicate = st_overlaps)\n\nggplot() +\n  geom_sf(data = gg_coast_sf) +\n  geom_sf(data = gg_precinct_sf, color = \"blue\", fill = \"transparent\") +\n  geom_text_repel(data = gg_coast_sf, aes(label = SGG_3, geometry = geometry),\n                   stat = \"sf_coordinates\", min.segment.length = 0, size = 3, \n                   max.overlaps = Inf, box.padding = 1.0) +\n  labs(x = \"\",\n       y = \"\")\n\n\n\n\n\n\n\n\n\n\n코드\ngg_coast_sf %&gt;% \n  sf::st_drop_geometry() %&gt;% \n  mutate(SGG_3 = str_remove(SGG_3, pattern = '^\\\\S*\\\\s')) %&gt;% \n  mutate(순 = 1:n()) %&gt;% \n  select(-SGG_2) %&gt;% \n  select(순, everything()) %&gt;% \n  gt::gt() %&gt;% \n    cols_align(align = \"center\") %&gt;% \n    tab_header(title = \"해안선 인접 총선 선거구\",\n               subtitle = md(\"`선관위 제21대 선거구 기준`\")) %&gt;% \n    cols_label(\n      SGG_Code = \"시군구 코드\",\n      SGG_1 = \"시도명\",\n      SGG_3 = \"선거구명\"\n    ) %&gt;% \n    gt_theme_538() \n\n\n\n\n\n\n\n해안선 인접 총선 선거구\n    \n\n선관위 제21대 선거구 기준\n    \n\n순\n      시군구 코드\n      시도명\n      선거구명\n    \n\n\n\n1\n2413902\n경기\n김포갑\n\n\n2\n2413202\n경기\n파주갑\n\n\n3\n2412002\n경기\n고양을\n\n\n4\n2413903\n경기\n김포을\n\n\n5\n2413203\n경기\n파주을\n\n\n6\n2412101\n경기\n고양병\n\n\n7\n2411901\n경기\n안산단원갑\n\n\n8\n2411801\n경기\n안산상록갑\n\n\n9\n2411502\n경기\n평택을\n\n\n10\n2411902\n경기\n안산단원을\n\n\n11\n2412801\n경기\n화성갑\n\n\n12\n2412201\n경기\n고양정\n\n\n13\n2412902\n경기\n시흥을"
  },
  {
    "objectID": "yellow_sea.html#지선---도지사-2022년",
    "href": "yellow_sea.html#지선---도지사-2022년",
    "title": "지도제작 대회",
    "section": "\n3.3 지선 - 도지사 (2022년)",
    "text": "3.3 지선 - 도지사 (2022년)\n\n\n득표수\n득표율\n\n\n\n\n코드local_sido_raw &lt;- krvote::local_sido_20220601 %&gt;% \n  filter(str_detect(선거구명, \"^경기\")) %&gt;% \n  unnest(data) %&gt;% \n  filter(str_detect(구시군명, \"^화성|^평택|^김포|^안산시단원구|^시흥\")) %&gt;% \n  pivot_longer(더불어민주당_김동연:기권수) %&gt;% \n  separate(name, into = c(\"정당\", \"후보\"), sep = \"_\") %&gt;% \n  filter(!is.na(후보)) %&gt;% \n  group_by(구시군명, 정당) %&gt;% \n  summarise(득표 = sum(value)) %&gt;% \n  ungroup()\n\nlocal_sido_table &lt;- local_sido_raw %&gt;% \n  mutate(정당 = case_when( str_detect(정당, \"민주당\") ~ \"민주당\",\n                           str_detect(정당, \"국민의힘\") ~ \"국민의힘\",\n                           TRUE ~ \"기타\")) %&gt;% \n  group_by(구시군명, 정당) %&gt;% \n  summarise(득표 = sum(득표)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = 정당, values_from = 득표) %&gt;% \n  janitor::adorn_totals(where = \"col\", name = \"합계\") \n\nlocal_sido_table %&gt;% \n  relocate(기타, .before = 합계) %&gt;% \n  gt() %&gt;% \n    fmt_integer(columns = 국민의힘:합계) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"지방선거 도지사 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표\"),\n      subtitle = md(\"`제8대 지방선거`\")\n  )  %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표\n    \n\n제8대 지방선거\n    \n\n구시군명\n      \n        지방선거 도지사 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n98,054\n92,596\n3,586\n194,236\n\n\n시흥시\n84,897\n104,762\n3,661\n193,320\n\n\n안산시단원구\n55,679\n61,954\n2,650\n120,283\n\n\n평택시\n104,256\n96,908\n4,669\n205,833\n\n\n화성시\n153,636\n173,747\n6,527\n333,910\n\n\n\n\n\n\n\n\n\n코드local_sido_table %&gt;% \n  adorn_percentages() %&gt;% \n  gt::gt() %&gt;% \n    fmt_percent(columns = 국민의힘:합계, decimals = 1) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"지방선거 도지사 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표\"),\n      subtitle = md(\"`제8대 지방선거`\")\n  )  %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표\n    \n\n제8대 지방선거\n    \n\n구시군명\n      \n        지방선거 도지사 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n50.5%\n47.7%\n1.8%\n100.0%\n\n\n시흥시\n43.9%\n54.2%\n1.9%\n100.0%\n\n\n안산시단원구\n46.3%\n51.5%\n2.2%\n100.0%\n\n\n평택시\n50.7%\n47.1%\n2.3%\n100.0%\n\n\n화성시\n46.0%\n52.0%\n2.0%\n100.0%"
  },
  {
    "objectID": "yellow_sea.html#지선---구시군장-2022년",
    "href": "yellow_sea.html#지선---구시군장-2022년",
    "title": "지도제작 대회",
    "section": "\n3.4 지선 - 구시군장 (2022년)",
    "text": "3.4 지선 - 구시군장 (2022년)\n\n\n득표수\n득표율\n\n\n\n\n코드local_sgg_raw &lt;- krvote::local_sgg_20220601 %&gt;% \n  filter(str_detect(시도명, \"^경기\")) %&gt;% \n  filter(str_detect(구시군명, \"^화성|^평택|^김포|^안산|^시흥\")) %&gt;% \n  mutate(득표 = parse_number(득표)) %&gt;% \n  group_by(구시군명, 정당) %&gt;% \n  summarise(득표 = sum(득표)) %&gt;% \n  ungroup()\n\nlocal_sgg_table &lt;- local_sgg_raw %&gt;% \n  mutate(정당 = case_when( str_detect(정당, \"민주당\") ~ \"민주당\",\n                           str_detect(정당, \"국민의힘\") ~ \"국민의힘\",\n                           TRUE ~ \"기타\")) %&gt;% \n  group_by(구시군명, 정당) %&gt;% \n  summarise(득표 = sum(득표, na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = 정당, values_from = 득표, values_fill = 0) %&gt;% \n  janitor::adorn_totals(where = \"col\", name = \"합계\") \n\nlocal_sgg_table %&gt;% \n  relocate(기타, .before = 합계) %&gt;% \n  gt() %&gt;% \n    fmt_integer(columns = 국민의힘:합계) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"지방선거 구시군의 장 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표\"),\n      subtitle = md(\"`제8대 지방선거`\")\n  )  %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표\n    \n\n제8대 지방선거\n    \n\n구시군명\n      \n        지방선거 구시군의 장 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n101,566\n86,798\n5,386\n193,750\n\n\n시흥시\n85,217\n106,468\n0\n191,685\n\n\n안산시\n119,776\n119,595\n18,092\n257,463\n\n\n평택시\n98,566\n107,159\n0\n205,725\n\n\n화성시\n156,386\n176,631\n0\n333,017\n\n\n\n\n\n\n\n\n\n코드local_sgg_table %&gt;% \n  adorn_percentages() %&gt;% \n  gt::gt() %&gt;% \n    fmt_percent(columns = 국민의힘:합계, decimals = 1) %&gt;% \n    cols_align(columns = 구시군명, align = \"center\") %&gt;% \n    tab_spanner(\n      label = \"지방선거 구시군의 장 후보 정당\",\n      columns = c(국민의힘, 민주당, 기타)\n  ) %&gt;% \n    gt_theme_538() %&gt;% \n    tab_header(\n      title = md(\"경기도 서해 인접 5개 구시군 정당별 득표\"),\n      subtitle = md(\"`제8대 지방선거`\")\n  )  %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"blue\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 민주당,\n                           rows = 민주당 &gt; 국민의힘)\n  ) %&gt;% \n  tab_style(\n    style = list(cell_fill(color = \"red\"),\n                 cell_text(color = \"white\")),\n    locations = cells_body(columns = 국민의힘,\n                           rows = 민주당 &lt; 국민의힘)\n  )\n\n\n\n\n\n\n\n경기도 서해 인접 5개 구시군 정당별 득표\n    \n\n제8대 지방선거\n    \n\n구시군명\n      \n        지방선거 구시군의 장 후보 정당\n      \n      합계\n    \n\n국민의힘\n      민주당\n      기타\n    \n\n\n\n김포시\n52.4%\n44.8%\n2.8%\n100.0%\n\n\n시흥시\n44.5%\n55.5%\n0.0%\n100.0%\n\n\n안산시\n46.5%\n46.5%\n7.0%\n100.0%\n\n\n평택시\n47.9%\n52.1%\n0.0%\n100.0%\n\n\n화성시\n47.0%\n53.0%\n0.0%\n100.0%"
  },
  {
    "objectID": "precinct.html",
    "href": "precinct.html",
    "title": "지도제작 대회",
    "section": "",
    "text": "2020. 4. 15. 21대 국회의원 총선거 선거구 지도를 가져온다.\n\n코드library(sf)\nlibrary(tidyverse)\n\nprecinct &lt;- st_read(\"data/2020_21_elec_253.json\") |&gt; \n  st_set_crs(4326)\n#&gt; Reading layer `2020_21_elec_253' from data source \n#&gt;   `D:\\tcs\\map_challenge\\data\\2020_21_elec_253.json' using driver `GeoJSON'\n#&gt; Simple feature collection with 253 features and 4 fields\n#&gt; Geometry type: MULTIPOLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 124.6097 ymin: 33.11187 xmax: 131.8713 ymax: 38.61695\n#&gt; Geodetic CRS:  WGS 84\n\nst_geometry(precinct) |&gt; plot()\n\n\n\n\n\n\n\n\n\n코드library(rvest)\n\nwiki_url &lt;- \"https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD_%EC%A0%9C21%EB%8C%80_%EA%B5%AD%ED%9A%8C%EC%9D%98%EC%9B%90_%EC%84%A0%EA%B1%B0_%EB%8D%94%EB%B6%88%EC%96%B4%EB%AF%BC%EC%A3%BC%EB%8B%B9_%ED%9B%84%EB%B3%B4_%EB%AA%A9%EB%A1%9D\"\n\nsido_name &lt;- read_html(wiki_url) |&gt; \n  html_nodes(\"h3\") |&gt; \n  html_text() |&gt; \n  str_remove(\"\\\\[편집\\\\]\")\n\nminju_lst &lt;- read_html(wiki_url) |&gt; \n  html_nodes(\".wikitable\") |&gt; \n  html_table()\n\nnames(minju_lst) &lt;- sido_name\n\nnomination &lt;- sido_name |&gt; \n  enframe(value = \"시도명\") |&gt; \n  mutate(data = minju_lst) |&gt; \n  unnest(data) |&gt; \n  select(-name) |&gt; \n  janitor::clean_names(ascii = FALSE) \n\nnomination\n#&gt; # A tibble: 253 × 6\n#&gt;    시도명     선거구     후보자 공천_유형      경력                       유튜브\n#&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;          &lt;chr&gt;                      &lt;chr&gt; \n#&gt;  1 서울특별시 종로       이낙연 전략 공천      \"민선 6기 전남지사45대 국… https…\n#&gt;  2 서울특별시 중·성동 갑 홍익표 단수 공천      \"19·20대 국회의원\"         https…\n#&gt;  3 서울특별시 중·성동 을 박성준 전략 공천      \"전 JTBC 아나운서팀장\"     https…\n#&gt;  4 서울특별시 용산       강태웅 전략 공천      \"전 서울시 부시장\"         https…\n#&gt;  5 서울특별시 광진 갑    전혜숙 단수 공천      \"18·20대 국회의원\"         https…\n#&gt;  6 서울특별시 광진 을    고민정 전략 공천      \"KBS 한국방송공사 아나운…  https…\n#&gt;  7 서울특별시 동대문 갑  안규백 단수 공천      \"19·20대 국회의원\"         https…\n#&gt;  8 서울특별시 동대문 을  장경태 청년 경선 공천 \"\"                         https…\n#&gt;  9 서울특별시 중랑 갑    서영교 경선 공천      \"19·20대 국회의원\"         https…\n#&gt; 10 서울특별시 중랑 을    박홍근 단수 공천      \"19·20대 국회의원\"         https…\n#&gt; # ℹ 243 more rows"
  },
  {
    "objectID": "precinct.html#데이터셋",
    "href": "precinct.html#데이터셋",
    "title": "지도제작 대회",
    "section": "",
    "text": "코드library(rvest)\n\nwiki_url &lt;- \"https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD_%EC%A0%9C21%EB%8C%80_%EA%B5%AD%ED%9A%8C%EC%9D%98%EC%9B%90_%EC%84%A0%EA%B1%B0_%EB%8D%94%EB%B6%88%EC%96%B4%EB%AF%BC%EC%A3%BC%EB%8B%B9_%ED%9B%84%EB%B3%B4_%EB%AA%A9%EB%A1%9D\"\n\nsido_name &lt;- read_html(wiki_url) |&gt; \n  html_nodes(\"h3\") |&gt; \n  html_text() |&gt; \n  str_remove(\"\\\\[편집\\\\]\")\n\nminju_lst &lt;- read_html(wiki_url) |&gt; \n  html_nodes(\".wikitable\") |&gt; \n  html_table()\n\nnames(minju_lst) &lt;- sido_name\n\nnomination &lt;- sido_name |&gt; \n  enframe(value = \"시도명\") |&gt; \n  mutate(data = minju_lst) |&gt; \n  unnest(data) |&gt; \n  select(-name) |&gt; \n  janitor::clean_names(ascii = FALSE) \n\nnomination\n#&gt; # A tibble: 253 × 6\n#&gt;    시도명     선거구     후보자 공천_유형      경력                       유튜브\n#&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;          &lt;chr&gt;                      &lt;chr&gt; \n#&gt;  1 서울특별시 종로       이낙연 전략 공천      \"민선 6기 전남지사45대 국… https…\n#&gt;  2 서울특별시 중·성동 갑 홍익표 단수 공천      \"19·20대 국회의원\"         https…\n#&gt;  3 서울특별시 중·성동 을 박성준 전략 공천      \"전 JTBC 아나운서팀장\"     https…\n#&gt;  4 서울특별시 용산       강태웅 전략 공천      \"전 서울시 부시장\"         https…\n#&gt;  5 서울특별시 광진 갑    전혜숙 단수 공천      \"18·20대 국회의원\"         https…\n#&gt;  6 서울특별시 광진 을    고민정 전략 공천      \"KBS 한국방송공사 아나운…  https…\n#&gt;  7 서울특별시 동대문 갑  안규백 단수 공천      \"19·20대 국회의원\"         https…\n#&gt;  8 서울특별시 동대문 을  장경태 청년 경선 공천 \"\"                         https…\n#&gt;  9 서울특별시 중랑 갑    서영교 경선 공천      \"19·20대 국회의원\"         https…\n#&gt; 10 서울특별시 중랑 을    박홍근 단수 공천      \"19·20대 국회의원\"         https…\n#&gt; # ℹ 243 more rows"
  },
  {
    "objectID": "precinct.html#단수공천",
    "href": "precinct.html#단수공천",
    "title": "지도제작 대회",
    "section": "\n2.1 단수공천",
    "text": "2.1 단수공천\n\n코드library(gt)\nlibrary(gtExtras)\n\nnomination |&gt; \n  mutate(\n      유튜브 = map(유튜브, ~ htmltools::a(href = .x, \"바로가기\")),\n      유튜브 = map(유튜브, ~ gt::html(as.character(.x))))  |&gt; \n  gt(groupname_col = '시도명') |&gt; \n  gt_theme_538() |&gt; \n  tab_options(\n    table.font.size = px(12L)\n  ) |&gt; \n  sub_missing(\n    columns = everything(),\n    missing_text = \"-\"\n  ) |&gt; \n  cols_align(align = \"center\") |&gt; \n  tab_style(\n    style = cell_fill(color = \"gray85\"),\n    locations = cells_body(\n      rows = 공천_유형 == \"단수 공천\"\n    )\n  )  \n\n\n\n\n\n\n선거구\n      후보자\n      공천_유형\n      경력\n      유튜브\n    \n\n\n서울특별시\n    \n\n종로\n이낙연\n전략 공천\n민선 6기 전남지사45대 국무총리 (2017~2020)16·17·18·19대 국회의원\n바로가기\n\n\n중·성동 갑\n홍익표\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n중·성동 을\n박성준\n전략 공천\n전 JTBC 아나운서팀장\n바로가기\n\n\n용산\n강태웅\n전략 공천\n전 서울시 부시장\n바로가기\n\n\n광진 갑\n전혜숙\n단수 공천\n18·20대 국회의원\n바로가기\n\n\n광진 을\n고민정\n전략 공천\nKBS 한국방송공사 아나운서청와대 대변인 (2019~2020)\n바로가기\n\n\n동대문 갑\n안규백\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n동대문 을\n장경태\n청년 경선 공천\n\n바로가기\n\n\n중랑 갑\n서영교\n경선 공천\n19·20대 국회의원\n바로가기\n\n\n중랑 을\n박홍근\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n성북 갑\n김영배\n경선 공천\n민선 5·6기 서울 성북구청장\n바로가기\n\n\n성북 을\n기동민\n단수 공천\n20대 국회의원\n바로가기\n\n\n강북 갑\n천준호\n경선 공천\n민생경제지원단 위원장\n바로가기\n\n\n강북 을\n박용진\n단수 공천\n20대 국회의원\n바로가기\n\n\n도봉 갑\n인재근\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n도봉 을\n오기형\n경선 공천\n변호사\n바로가기\n\n\n노원 갑\n고용진\n경선 공천\n20대 국회의원\n바로가기\n\n\n노원 을\n우원식\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n노원 병\n김성환\n단수 공천\n20대 국회의원\n바로가기\n\n\n은평 갑\n박주민\n단수 공천\n20대 국회의원\n바로가기\n\n\n은평 을\n강병원\n경선 공천\n20대 국회의원\n바로가기\n\n\n서대문 갑\n우상호\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n서대문 을\n김영호\n단수 공천\n20대 국회의원\n바로가기\n\n\n마포 갑\n노웅래\n경선 공천\n17·19·20대 국회의원\n바로가기\n\n\n마포 을\n정청래\n단수 공천\n17·19대 국회의원\n바로가기\n\n\n양천 갑\n황희\n단수 공천\n20대 국회의원\n바로가기\n\n\n양천 을\n이용선\n단수 공천\n전 청와대 시민사회수석\n바로가기\n\n\n강서 갑\n강선우\n경선 공천\n중앙당 총선기획위원\n바로가기\n\n\n강서 을\n진성준\n단수 공천\n19대 국회의원\n바로가기\n\n\n강서 병\n한정애\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n구로 갑\n이인영\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n구로 을\n윤건영\n전략 공천\n전 청와대 국정상황실장\n바로가기\n\n\n금천\n최기상\n전략 공천\n전 서울북부지법 부장판사\n바로가기\n\n\n영등포 갑\n김영주\n단수 공천\n전 고용노동부 장관\n바로가기\n\n\n영등포 을\n김민석\n경선 공천\n15·16대 국회의원\n바로가기\n\n\n동작 갑\n김병기\n경선 공천\n20대 국회의원\n바로가기\n\n\n동작 을\n이수진\n전략 공천\n전 수원지법 부장판사\n바로가기\n\n\n관악 갑\n유기홍\n경선 공천\n17대 국회의원\n바로가기\n\n\n관악 을\n정태호\n경선 공천\n전 청와대 일자리수석\n바로가기\n\n\n서초 갑\n이정근\n단수 공천\n전 지역위원장\n바로가기\n\n\n서초 을\n박경미\n경선 공천\n20대 국회의원\n바로가기\n\n\n강남 갑\n김성곤\n단수 공천\n15·17·18·19대 국회의원\n바로가기\n\n\n강남 을\n전현희\n단수 공천\n18대·20대 국회의원\n바로가기\n\n\n강남 병\n김한규\n전략 공천\n변호사\n바로가기\n\n\n송파 갑\n조재희\n경선 공천\n전 정책기획위원\n바로가기\n\n\n송파 을\n최재성\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n송파 병\n남인순\n단수 공천\n19대·20대 국회의원\n바로가기\n\n\n강동 갑\n진선미\n단수 공천\n19·20대 국회의원여성가족부 장관 (2018~2019)\n바로가기\n\n\n강동 을\n이해식\n경선 공천\n민선4·5·6기 서울 강동구청장\n바로가기\n\n\n부산광역시\n    \n\n중·영도\n김비오\n경선 공천\n전 지역위원장\n바로가기\n\n\n서·동\n이재강\n경선 공천\n전 지역위원장\n바로가기\n\n\n부산진 갑\n김영춘\n단수 공천\n16·17·20대 국회의원해양수산부 장관 (2017~2019)\n바로가기\n\n\n부산진 을\n류영진\n경선 공천\n전 식품의약품안전처장\n바로가기\n\n\n동래\n박성현\n단수 공천\n\n바로가기\n\n\n남 갑\n강준석\n전략 공천\n13대 해양수산부 차관\n바로가기\n\n\n남 을\n박재호\n단수 공천\n20대 국회의원\n바로가기\n\n\n북·강서 갑\n전재수\n단수 공천\n20대 국회의원\n바로가기\n\n\n북·강서 을\n최지은\n전략 공천\n전 세계은행 선임 이코노미스트\n바로가기\n\n\n해운대 갑\n유영민\n단수 공천\n과학정보기술통신부 장관 (2017년~2019년)\n바로가기\n\n\n해운대 을\n윤준호\n단수 공천\n20대 국회의원\n바로가기\n\n\n사하 갑\n최인호\n단수 공천\n20대 국회의원\n바로가기\n\n\n사하 을\n이상호\n경선 공천\n\n바로가기\n\n\n금정\n박무성\n경선 공천\n변호사\n바로가기\n\n\n연제\n김해영\n단수 공천\n20대 국회의원\n바로가기\n\n\n수영\n강윤경\n단수 공천\n\n바로가기\n\n\n사상\n배재정\n단수 공천\n19대 국회의원 (비례대표)\n바로가기\n\n\n기장\n최택용\n경선 공천\n\n바로가기\n\n\n대구광역시\n    \n\n중·남\n이재용\n단수 공천\n전 환경부 장관\n바로가기\n\n\n동 갑\n서재헌\n단수 공천\n\n바로가기\n\n\n동 을\n이승천\n단수 공천\n\n바로가기\n\n\n서\n윤선진\n단수 공천\n\n바로가기\n\n\n북 갑\n이헌태\n단수 공천\n\n바로가기\n\n\n북 을\n홍의락\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n수성 갑\n김부겸\n단수 공천\n16·17·18·20대 국회의원행정안전부 장관 (2017~2019)\n바로가기\n\n\n수성 을\n이상식\n단수 공천\n전 대구지방경찰청장\n바로가기\n\n\n달서 갑\n권택흥\n단수 공천\n\n바로가기\n\n\n달서 을\n허소\n경선 공천\n\n바로가기\n\n\n달서 병\n김대진\n단수 공천\n\n바로가기\n\n\n달성\n박형룡\n경선 공천\n\n바로가기\n\n\n인천광역시\n    \n\n중·강화·옹진\n조택상\n단수 공천\n\n바로가기\n\n\n동·미추홀 갑\n허종식\n단수 공천\n전 인천광역시 정무경제부시장\n바로가기\n\n\n동·미추홀 을\n남영희\n경선 공천\n\n바로가기\n\n\n연수 갑\n박찬대\n단수 공천\n20대 국회의원\n바로가기\n\n\n연수 을\n정일영\n경선 공천\n전 인천국제공항공사 사장\n바로가기\n\n\n남동 갑\n맹성규\n단수 공천\n20대 국회의원\n바로가기\n\n\n남동 을\n윤관석\n단수 공천\n20대 국회의원\n바로가기\n\n\n부평 갑\n이성만\n경선 공천\n전 인천광역시 시의원\n바로가기\n\n\n부평 을\n홍영표\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n계양 갑\n유동수\n단수 공천\n20대 국회의원\n바로가기\n\n\n계양 을\n송영길\n단수 공천\n17·18·20대 국회의원민선 5기 인천광역시장\n바로가기\n\n\n서 갑\n김교흥\n단수 공천\n17대 국회의원\n바로가기\n\n\n서 을\n신동근\n단수 공천\n20대 국회의원\n바로가기\n\n\n광주광역시\n    \n\n동·남 갑\n윤영덕\n경선 공천\n\n바로가기\n\n\n동·남 을\n이병훈\n경선 공천\n\n바로가기\n\n\n서 갑\n송갑석\n단수 공천\n제20대 국회의원\n바로가기\n\n\n서 을\n양향자\n경선 공천\n전 삼성전자 상무이사\n바로가기\n\n\n북 갑\n조오섭\n경선 공천\n\n바로가기\n\n\n북 을\n형석\n경선 공천\n\n바로가기\n\n\n광산 갑\n이용빈\n단수 공천\n광주광역시당 광산구(갑) 지역위원장\n바로가기\n\n\n광산 을\n민형배\n경선 공천\n\n바로가기\n\n\n대전광역시\n    \n\n동\n장철민\n경선 공천\n\n바로가기\n\n\n중\n황운하\n경선 공천\n전 울산지방경찰청장\n바로가기\n\n\n서 갑\n박병석\n단수 공천\n16·17·18·19·20대 국회의원19대 국회 전반기 국회부의장\n바로가기\n\n\n서 을\n박범계\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n유성 갑\n조승래\n단수 공천\n20대 국회의원\n바로가기\n\n\n유성 을\n이상민\n경선 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n대덕\n박영순\n경선 공천\n전 대전광역시 정무부시장\n바로가기\n\n\n울산광역시\n    \n\n중\n임동호\n경선 공천\n\n바로가기\n\n\n남 갑\n심규명\n경선 공천\n변호사\n바로가기\n\n\n남 을\n박성진\n경선 공천\n\n바로가기\n\n\n동\n김태선\n경선 공천\n\n바로가기\n\n\n북\n이상헌\n경선 공천\n20대 국회의원\n바로가기\n\n\n울주\n김영문\n단수 공천\n관세청장 (2017년~2019년)\n바로가기\n\n\n세종특별자치시\n    \n\n세종 갑\n홍성국\n전략 공천\n전 미래에셋대우 대표이사\n바로가기\n\n\n세종 을\n강준현\n경선 공천\n전 세종시 정무부시장\n바로가기\n\n\n경기도\n    \n\n수원 갑\n김승원\n경선 공천\n\n바로가기\n\n\n수원 을\n백혜련\n단수 공천\n20대 국회의원\n바로가기\n\n\n수원 병\n김영진\n단수 공천\n20대 국회의원\n바로가기\n\n\n수원 정\n박광온\n단수 공천\n20대 국회의원\n바로가기\n\n\n수원 무\n김진표\n단수 공천\n20대 국회의원\n바로가기\n\n\n성남 수정\n김태년\n단수 공천\n20대 국회의원\n바로가기\n\n\n성남 중원\n윤영찬\n경선 공천\n전 청와대 국민소통수석네이버 부사장\n바로가기\n\n\n성남 분당 갑\n김병관\n경선 공천\n20대 국회의원\n바로가기\n\n\n성남 분당 을\n김병욱\n단수 공천\n20대 국회의원\n바로가기\n\n\n의정부 갑\n오영환\n전략 공천\n\n바로가기\n\n\n의정부 을\n김민철\n경선 공천\n\n바로가기\n\n\n안양 만안\n강득구\n경선 공천\n전 경기도 연정부지사경기도의회 의장\n바로가기\n\n\n안양 동안 갑\n민병덕\n경선 공천\n변호사\n바로가기\n\n\n안양 동안 을\n이재정\n경선 공천\n20대 국회의원(비례대표)\n바로가기\n\n\n부천 갑\n김경협\n단수 공천\n20대 국회의원\n바로가기\n\n\n부천 을\n설훈\n경선 공천\n20대 국회의원\n바로가기\n\n\n부천 병\n김상희\n단수 공천\n20대 국회의원\n바로가기\n\n\n부천 정\n서영석\n경선 공천\n\n바로가기\n\n\n광명 갑\n임오경\n전략 공천\n전 핸드볼 감독전 국가대표 핸드볼 선수\n바로가기\n\n\n광명 을\n양기대\n경선 공천\n전 광명시장\n바로가기\n\n\n평택 갑\n홍기원\n경선 공천\n\n바로가기\n\n\n평택 을\n김현정\n전략 공천\n\n바로가기\n\n\n동두천·연천\n서동욱\n경선 공천\n\n바로가기\n\n\n안산 상록 갑\n전해철\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n안산 상록 을\n김철민\n단수 공천\n20대 국회의원전 안산시장\n바로가기\n\n\n안산 단원 갑\n고영인\n경선 공천\n\n바로가기\n\n\n안산 단원 을\n김남국\n전략 공천\n변호사\n바로가기\n\n\n고양 갑\n문명순\n단수 공천\n\n바로가기\n\n\n고양 을\n한준호\n전략 공천\n전 MBC 아나운서\n바로가기\n\n\n고양 병\n홍정민\n전략 공천\n변호사\n바로가기\n\n\n고양 정\n이용우\n전략 공천\n전 카카오뱅크 대표이사\n바로가기\n\n\n의왕·과천\n이소영\n전략 공천\n변호사\n바로가기\n\n\n구리\n윤호중\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n남양주 갑\n조응천\n경선 공천\n20대 국회의원전 청와대 공직기강비서관\n바로가기\n\n\n남양주 을\n김한정\n경선 공천\n20대 국회의원\n바로가기\n\n\n남양주 병\n김용민\n전략 공천\n변호사\n바로가기\n\n\n오산\n안민석\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n시흥 갑\n문정복\n경선 공천\n\n바로가기\n\n\n시흥 을\n조정식\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n군포\n이학영\n경선 공천\n19·20대 국회의원\n바로가기\n\n\n하남\n최종윤\n경선 공천\n\n바로가기\n\n\n용인 갑\n오세영\n경선 공천\n\n바로가기\n\n\n용인 을\n김민기\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n용인 병\n정춘숙\n경선 공천\n20대 국회의원(비례대표)\n바로가기\n\n\n용인 정\n이탄희\n전략 공천\n변호사전 수원지법 안양지원 판사\n바로가기\n\n\n파주 갑\n윤후덕\n경선 공천\n19·20대 국회의원\n바로가기\n\n\n파주 을\n박정\n단수 공천\n20대 국회의원\n바로가기\n\n\n이천\n김용진\n경선 공천\n전 기획재정부 차관\n바로가기\n\n\n안성\n이규민\n경선 공천\n\n바로가기\n\n\n김포 갑\n김주영\n전략 공천\n전 한국노총 위원장\n바로가기\n\n\n김포 을\n박상혁\n경선 공천\n\n바로가기\n\n\n화성 갑\n송옥주\n경선 공천\n20대 국회의원(비례대표)\n바로가기\n\n\n화성 을\n이원욱\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n화성 병\n권칠승\n단수 공천\n20대 국회의원\n바로가기\n\n\n광주 갑\n소병훈\n경선 공천\n20대 국회의원\n바로가기\n\n\n광주 을\n임종성\n단수 공천\n20대 국회의원\n바로가기\n\n\n양주\n정성호\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n포천·가평\n이철휘\n경선 공천\n\n바로가기\n\n\n여주·양평\n최재관\n경선 공천\n\n바로가기\n\n\n강원도\n    \n\n춘천·철원·화천·양구 갑\n허영\n경선 공천\n\n바로가기\n\n\n춘천·철원·화천·양구 을\n정만호\n경선 공천\n\n바로가기\n\n\n홍천·횡성·영월·평창\n원경환\n단수 공천\n전 서울지방경찰청장\n바로가기\n\n\n원주 갑\n이광재\n경선 공천\n17·18대 국회의원전 강원도지사\n바로가기\n\n\n원주 을\n송기헌\n단수 공천\n20대 국회의원\n바로가기\n\n\n강릉\n김경수\n단수 공천\n\n바로가기\n\n\n동해·태백·삼척·정선\n김동완\n경선 공천\n\n바로가기\n\n\n속초·인제·고성·양양\n이동기\n경선 공천\n\n바로가기\n\n\n충청북도\n    \n\n청주 상당\n정정순\n경선 공천\n\n바로가기\n\n\n청주 서원\n이장섭\n경선 공천\n\n바로가기\n\n\n청주 흥덕\n도종환\n단수 공천\n19·20대 국회의원전 문화체육관광부 장관\n바로가기\n\n\n청주 청원\n변재일\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n충주\n김경욱\n단수 공천\n\n바로가기\n\n\n제천·단양\n이후삼\n경선 공천\n20대 국회의원\n바로가기\n\n\n보은·옥천·영동·괴산\n곽상언\n경선 공천\n변호사\n바로가기\n\n\n증평·진천·음성\n임호선\n단수 공천\n\n바로가기\n\n\n충청남도\n    \n\n천안 갑\n문진석\n전략 공천\n\n바로가기\n\n\n천안 을\n박완주\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n천안 병\n이정문\n경선 공천\n\n바로가기\n\n\n아산 갑\n복기왕\n단수 공천\n17대 국회의원전 아산시장\n바로가기\n\n\n아산 을\n강훈식\n단수 공천\n20대 국회의원\n바로가기\n\n\n공주·부여·청양\n박수현\n단수 공천\n19대 국회의원전 청와대 대변인\n바로가기\n\n\n당진\n어기구\n경선 공천\n20대 국회의원\n바로가기\n\n\n서산·태안\n조한기\n단수 공천\n\n바로가기\n\n\n논산·계룡·금산\n김종민\n경선 공천\n20대 국회의원\n바로가기\n\n\n홍성·예산\n김학민\n경선 공천\n\n바로가기\n\n\n보령·서천\n나소열\n단수 공천\n전 서천군수\n바로가기\n\n\n전라북도\n    \n\n전주 갑\n김윤덕\n경선 공천\n제19대 국회의원\n바로가기\n\n\n전주 을\n이상직\n경선 공천\n제19대 국회의원전 이스타항공 총괄회장\n바로가기\n\n\n전주 병\n김성주\n단수 공천\n제19대 국회의원\n바로가기\n\n\n군산\n신영대\n단수 공천\n\n바로가기\n\n\n익산 갑\n김수흥\n경선 공천\n전 국회사무처 사무차장\n바로가기\n\n\n익산 을\n한병도\n경선 공천\n제17대 국회의원\n바로가기\n\n\n정읍·고창\n윤준병\n단수 공천\n전 서울특별시 행정1부시장\n바로가기\n\n\n남원·임실·순창\n이강래\n경선 공천\n제16·17·18대 국회의원전 한국도로공사 사장\n바로가기\n\n\n김제·부안\n이원택\n단수 공천\n전 문재인 정부 청와대 행정관전 전라북도 정무부지사\n바로가기\n\n\n완주·진안·무주·장수\n안호영\n경선 공천\n제20대 국회의원\n바로가기\n\n\n전라남도\n    \n\n목포\n김원이\n경선 공천\n전 서울특별시 정무부시장\n바로가기\n\n\n여수 갑\n주철현\n경선 공천\n전 여수시장(민선 6기)전 대검찰청 강력부장\n바로가기\n\n\n여수 을\n김회재\n경선 공천\n\n바로가기\n\n\n순천·광양·곡성·구례 갑\n소병철\n전략 공천\n전 법무연수원장농협대학교, 순천대학교, 법무연수원 석좌교수\n바로가기\n\n\n순천·광양·곡성·구례 을\n서동용\n경선 공천\n\n바로가기\n\n\n나주·화순\n신정훈\n경선 공천\n제19대 국회의원\n바로가기\n\n\n담양·함평·영광·장성\n이개호\n단수 공천\n제19·20대 국회의원전 농림축산식품부 장관전 전라남도 제35대 행정부지사\n바로가기\n\n\n무안·신안·영암\n서삼석\n경선 공천\n제20대 국회의원제42·43·44대 무안군수제5·6대 전라남도의회 의원\n바로가기\n\n\n고흥·보성·장흥·강진\n김승남\n경선 공천\n제19대 국회의원\n바로가기\n\n\n해남·진도·완도\n윤재갑\n경선 공천\n전 해군 군수사령부 사령관목포해양대학교 초빙교수\n바로가기\n\n\n경상북도\n    \n\n포항 북\n오중기\n단수 공천\n-\n바로가기\n\n\n포항 남·울릉\n허대만\n단수 공천\n-\n바로가기\n\n\n구미 갑\n김철호\n경선 공천\n-\n바로가기\n\n\n구미 을\n김현권\n단수 공천\n-\n바로가기\n\n\n경산\n전상헌\n경선 공천\n-\n바로가기\n\n\n김천\n배영애\n단수 공천\n-\n바로가기\n\n\n경주\n정다은\n전략 공천\n-\n바로가기\n\n\n안동·예천\n이삼걸\n단수 공천\n-\n바로가기\n\n\n영천·청도\n정우동\n단수 공천\n-\n바로가기\n\n\n군위·의성·청송·영덕\n강부송\n단수 공천\n-\n바로가기\n\n\n상주·문경\n정용운\n단수 공천\n-\n바로가기\n\n\n영주·영양·봉화·울진\n황재선\n경선 공천\n-\n바로가기\n\n\n고령·성주·칠곡\n장세호\n단수 공천\n-\n바로가기\n\n\n경상남도\n    \n\n창원 의창\n김기운\n경선 공천\n\n바로가기\n\n\n창원 성산\n이흥석\n단수 공천\n\n바로가기\n\n\n창원 마산합포\n박남현\n경선 공천\n\n바로가기\n\n\n창원 마산회원\n하귀남\n단수 공천\n\n바로가기\n\n\n창원 진해\n황기철\n단수 공천\n제30대 해군참모총장\n바로가기\n\n\n진주 갑\n정영훈\n경선 공천\n\n바로가기\n\n\n진주 을\n한경호\n단수 공천\n\n바로가기\n\n\n김해 갑\n민홍철\n단수 공천\n제19·20대 국회의원\n바로가기\n\n\n김해 을\n김정호\n경선 공천\n제20대 국회의원\n바로가기\n\n\n양산 갑\n이재영\n전략 공천\n대외경제정책연구원 원장외교부 정책자문위원\n바로가기\n\n\n양산 을\n김두관\n전략 공천\n제20대 국회의원(경기 김포 갑)제34대 경상남도지사제38·39대 남해군수\n바로가기\n\n\n통영·고성\n양문석\n단수 공천\n\n바로가기\n\n\n거제\n문상모\n경선 공천\n\n바로가기\n\n\n밀양·의령·함안·창녕\n조성환\n단수 공천\n\n바로가기\n\n\n사천·남해·하동\n황인성\n단수 공천\n\n바로가기\n\n\n산청·함양·거창·합천\n서필상\n단수 공천\n\n바로가기\n\n\n제주특별자치도\n    \n\n제주 갑\n송재호\n전략 공천\n\n바로가기\n\n\n제주 을\n오영훈\n경선 공천\n제20대 국회의원\n바로가기\n\n\n서귀포\n위성곤\n단수 공천\n제20대 국회의원\n바로가기"
  },
  {
    "objectID": "precinct.html#전국",
    "href": "precinct.html#전국",
    "title": "지도제작 대회",
    "section": "\n3.1 전국",
    "text": "3.1 전국\n\n코드library(geogrid)\nlibrary(ggrepel)\n\nprecinct_cells &lt;-  calculate_grid(precinct, 0.1, 'hexagonal')\nprecinct_hex &lt;- assign_polygons(precinct, precinct_cells)\n\nprecinct_hex |&gt; \n  write_rds(\"data/precinct_hex.rds\")\n\n\n\n코드precinct_hex &lt;- \n  read_rds(\"data/precinct_hex.rds\")\n\nprecinct_hex |&gt; \n  # filter(SGG_1 == '제주') |&gt; \n  ggplot() +\n    geom_sf() +\n    ggrepel::geom_text_repel(\n      data = precinct_hex,\n        aes(label = SGG_3, geometry = geometry), stat = \"sf_coordinates\", \n        min.segment.length = 1, size = 2, max.overlaps = Inf\n    )"
  },
  {
    "objectID": "precinct.html#서울",
    "href": "precinct.html#서울",
    "title": "지도제작 대회",
    "section": "\n3.2 서울",
    "text": "3.2 서울\n\n코드library(geogrid)\nlibrary(ggrepel)\n\n\nseoul_precinct &lt;- precinct |&gt; filter(SGG_1 == \"서울\")\n\nseoul_precinct_cells &lt;-  calculate_grid(shape=seoul_precinct, grid_type='hexagonal')\nseoul_precinct_hex &lt;- assign_polygons(seoul_precinct, seoul_precinct_cells)\n\n\nseoul_precinct_hex |&gt; \n  ggplot() +\n    geom_sf() +\n    ggrepel::geom_text_repel(\n      data = seoul_precinct_hex,\n        aes(label = SGG_3, geometry = geometry), stat = \"sf_coordinates\", \n        min.segment.length = 1, size = 3, max.overlaps = Inf\n    )\n\n\n\n\n\n\n코드\nseoul_precinct_hex |&gt;\n  st_union() %&gt;%\n  st_boundary() %&gt;%\n  ggplot() +\n    geom_sf( lwd = 2 )\n\n\n\n\n\n\n코드\n\n# seoul_precinct &lt;- seoul_precinct %&gt;%\n#   mutate(tile_map = generate_map(geometry, square = FALSE, flat_topped = TRUE))\n\n\n# seoul_precinct |&gt;\n#   st_union() %&gt;%\n#   st_boundary() %&gt;%\n#   ggplot() +\n#     geom_sf( lwd = 2 )\n\n# \n# ggplot(seoul_precinct) +\n#   geom_sf(aes(geometry = tile_map))"
  },
  {
    "objectID": "precinct.html#공천-유형",
    "href": "precinct.html#공천-유형",
    "title": "지도제작 대회",
    "section": "\n2.1 공천 유형",
    "text": "2.1 공천 유형\n\n코드library(janitor)\nlibrary(gt)\nlibrary(gtExtras)\n\nnomination_type_gt &lt;- nomination |&gt; \n  tabyl(공천_유형) |&gt; \n  arrange(desc(n)) |&gt; \n  janitor::adorn_totals(name = \"합계\") |&gt; \n  janitor::adorn_pct_formatting() |&gt; \n  rename(후보수 = n,\n         비율 = percent) |&gt; \n  gt() |&gt; \n  gt_theme_538() |&gt; \n  tab_options(\n    heading.title.font.size = px(16L),\n    column_labels.font.size = px(14L),\n    table.font.size = px(12L)\n  ) |&gt; \n  cols_align(align = \"center\") |&gt; \n  tab_header(\n    title = md(\"더불어민주당 공천 유형\"),\n    subtitle = md(\"제21대 국회의원 선거\")\n  ) |&gt; \n  tab_style(\n    style = cell_fill(color = \"gray85\"),\n    locations = cells_body(\n      rows = 공천_유형 == \"단수 공천\"\n    )\n  )  \n\nnomination_type_gt\n\n\n\n\n\n\n\n더불어민주당 공천 유형\n    \n\n제21대 국회의원 선거\n    \n\n공천_유형\n      후보수\n      비율\n    \n\n\n\n단수 공천\n118\n46.6%\n\n\n경선 공천\n106\n41.9%\n\n\n전략 공천\n28\n11.1%\n\n\n청년 경선 공천\n1\n0.4%\n\n\n합계\n253\n100.0%\n\n\n\n\n\n코드\nnomination_type_gt |&gt; \n  gtsave(filename = \"images/nomation_type_gt.png\")"
  },
  {
    "objectID": "precinct.html#공천-상세",
    "href": "precinct.html#공천-상세",
    "title": "지도제작 대회",
    "section": "\n2.2 공천 상세",
    "text": "2.2 공천 상세\n\n코드library(gt)\nlibrary(gtExtras)\n\nnomination |&gt; \n  mutate(\n      유튜브 = map(유튜브, ~ htmltools::a(href = .x, \"바로가기\")),\n      유튜브 = map(유튜브, ~ gt::html(as.character(.x))))  |&gt; \n  gt(groupname_col = '시도명') |&gt; \n  gt_theme_538() |&gt; \n  tab_options(\n    table.font.size = px(12L)\n  ) |&gt; \n  sub_missing(\n    columns = everything(),\n    missing_text = \"-\"\n  ) |&gt; \n  cols_align(align = \"center\") |&gt; \n  tab_style(\n    style = cell_fill(color = \"gray85\"),\n    locations = cells_body(\n      rows = 공천_유형 == \"단수 공천\"\n    )\n  )  \n\n\n\n\n\n\n선거구\n      후보자\n      공천_유형\n      경력\n      유튜브\n    \n\n\n서울특별시\n    \n\n종로\n이낙연\n전략 공천\n민선 6기 전남지사45대 국무총리 (2017~2020)16·17·18·19대 국회의원\n바로가기\n\n\n중·성동 갑\n홍익표\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n중·성동 을\n박성준\n전략 공천\n전 JTBC 아나운서팀장\n바로가기\n\n\n용산\n강태웅\n전략 공천\n전 서울시 부시장\n바로가기\n\n\n광진 갑\n전혜숙\n단수 공천\n18·20대 국회의원\n바로가기\n\n\n광진 을\n고민정\n전략 공천\nKBS 한국방송공사 아나운서청와대 대변인 (2019~2020)\n바로가기\n\n\n동대문 갑\n안규백\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n동대문 을\n장경태\n청년 경선 공천\n\n바로가기\n\n\n중랑 갑\n서영교\n경선 공천\n19·20대 국회의원\n바로가기\n\n\n중랑 을\n박홍근\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n성북 갑\n김영배\n경선 공천\n민선 5·6기 서울 성북구청장\n바로가기\n\n\n성북 을\n기동민\n단수 공천\n20대 국회의원\n바로가기\n\n\n강북 갑\n천준호\n경선 공천\n민생경제지원단 위원장\n바로가기\n\n\n강북 을\n박용진\n단수 공천\n20대 국회의원\n바로가기\n\n\n도봉 갑\n인재근\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n도봉 을\n오기형\n경선 공천\n변호사\n바로가기\n\n\n노원 갑\n고용진\n경선 공천\n20대 국회의원\n바로가기\n\n\n노원 을\n우원식\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n노원 병\n김성환\n단수 공천\n20대 국회의원\n바로가기\n\n\n은평 갑\n박주민\n단수 공천\n20대 국회의원\n바로가기\n\n\n은평 을\n강병원\n경선 공천\n20대 국회의원\n바로가기\n\n\n서대문 갑\n우상호\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n서대문 을\n김영호\n단수 공천\n20대 국회의원\n바로가기\n\n\n마포 갑\n노웅래\n경선 공천\n17·19·20대 국회의원\n바로가기\n\n\n마포 을\n정청래\n단수 공천\n17·19대 국회의원\n바로가기\n\n\n양천 갑\n황희\n단수 공천\n20대 국회의원\n바로가기\n\n\n양천 을\n이용선\n단수 공천\n전 청와대 시민사회수석\n바로가기\n\n\n강서 갑\n강선우\n경선 공천\n중앙당 총선기획위원\n바로가기\n\n\n강서 을\n진성준\n단수 공천\n19대 국회의원\n바로가기\n\n\n강서 병\n한정애\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n구로 갑\n이인영\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n구로 을\n윤건영\n전략 공천\n전 청와대 국정상황실장\n바로가기\n\n\n금천\n최기상\n전략 공천\n전 서울북부지법 부장판사\n바로가기\n\n\n영등포 갑\n김영주\n단수 공천\n전 고용노동부 장관\n바로가기\n\n\n영등포 을\n김민석\n경선 공천\n15·16대 국회의원\n바로가기\n\n\n동작 갑\n김병기\n경선 공천\n20대 국회의원\n바로가기\n\n\n동작 을\n이수진\n전략 공천\n전 수원지법 부장판사\n바로가기\n\n\n관악 갑\n유기홍\n경선 공천\n17대 국회의원\n바로가기\n\n\n관악 을\n정태호\n경선 공천\n전 청와대 일자리수석\n바로가기\n\n\n서초 갑\n이정근\n단수 공천\n전 지역위원장\n바로가기\n\n\n서초 을\n박경미\n경선 공천\n20대 국회의원\n바로가기\n\n\n강남 갑\n김성곤\n단수 공천\n15·17·18·19대 국회의원\n바로가기\n\n\n강남 을\n전현희\n단수 공천\n18대·20대 국회의원\n바로가기\n\n\n강남 병\n김한규\n전략 공천\n변호사\n바로가기\n\n\n송파 갑\n조재희\n경선 공천\n전 정책기획위원\n바로가기\n\n\n송파 을\n최재성\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n송파 병\n남인순\n단수 공천\n19대·20대 국회의원\n바로가기\n\n\n강동 갑\n진선미\n단수 공천\n19·20대 국회의원여성가족부 장관 (2018~2019)\n바로가기\n\n\n강동 을\n이해식\n경선 공천\n민선4·5·6기 서울 강동구청장\n바로가기\n\n\n부산광역시\n    \n\n중·영도\n김비오\n경선 공천\n전 지역위원장\n바로가기\n\n\n서·동\n이재강\n경선 공천\n전 지역위원장\n바로가기\n\n\n부산진 갑\n김영춘\n단수 공천\n16·17·20대 국회의원해양수산부 장관 (2017~2019)\n바로가기\n\n\n부산진 을\n류영진\n경선 공천\n전 식품의약품안전처장\n바로가기\n\n\n동래\n박성현\n단수 공천\n\n바로가기\n\n\n남 갑\n강준석\n전략 공천\n13대 해양수산부 차관\n바로가기\n\n\n남 을\n박재호\n단수 공천\n20대 국회의원\n바로가기\n\n\n북·강서 갑\n전재수\n단수 공천\n20대 국회의원\n바로가기\n\n\n북·강서 을\n최지은\n전략 공천\n전 세계은행 선임 이코노미스트\n바로가기\n\n\n해운대 갑\n유영민\n단수 공천\n과학정보기술통신부 장관 (2017년~2019년)\n바로가기\n\n\n해운대 을\n윤준호\n단수 공천\n20대 국회의원\n바로가기\n\n\n사하 갑\n최인호\n단수 공천\n20대 국회의원\n바로가기\n\n\n사하 을\n이상호\n경선 공천\n\n바로가기\n\n\n금정\n박무성\n경선 공천\n변호사\n바로가기\n\n\n연제\n김해영\n단수 공천\n20대 국회의원\n바로가기\n\n\n수영\n강윤경\n단수 공천\n\n바로가기\n\n\n사상\n배재정\n단수 공천\n19대 국회의원 (비례대표)\n바로가기\n\n\n기장\n최택용\n경선 공천\n\n바로가기\n\n\n대구광역시\n    \n\n중·남\n이재용\n단수 공천\n전 환경부 장관\n바로가기\n\n\n동 갑\n서재헌\n단수 공천\n\n바로가기\n\n\n동 을\n이승천\n단수 공천\n\n바로가기\n\n\n서\n윤선진\n단수 공천\n\n바로가기\n\n\n북 갑\n이헌태\n단수 공천\n\n바로가기\n\n\n북 을\n홍의락\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n수성 갑\n김부겸\n단수 공천\n16·17·18·20대 국회의원행정안전부 장관 (2017~2019)\n바로가기\n\n\n수성 을\n이상식\n단수 공천\n전 대구지방경찰청장\n바로가기\n\n\n달서 갑\n권택흥\n단수 공천\n\n바로가기\n\n\n달서 을\n허소\n경선 공천\n\n바로가기\n\n\n달서 병\n김대진\n단수 공천\n\n바로가기\n\n\n달성\n박형룡\n경선 공천\n\n바로가기\n\n\n인천광역시\n    \n\n중·강화·옹진\n조택상\n단수 공천\n\n바로가기\n\n\n동·미추홀 갑\n허종식\n단수 공천\n전 인천광역시 정무경제부시장\n바로가기\n\n\n동·미추홀 을\n남영희\n경선 공천\n\n바로가기\n\n\n연수 갑\n박찬대\n단수 공천\n20대 국회의원\n바로가기\n\n\n연수 을\n정일영\n경선 공천\n전 인천국제공항공사 사장\n바로가기\n\n\n남동 갑\n맹성규\n단수 공천\n20대 국회의원\n바로가기\n\n\n남동 을\n윤관석\n단수 공천\n20대 국회의원\n바로가기\n\n\n부평 갑\n이성만\n경선 공천\n전 인천광역시 시의원\n바로가기\n\n\n부평 을\n홍영표\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n계양 갑\n유동수\n단수 공천\n20대 국회의원\n바로가기\n\n\n계양 을\n송영길\n단수 공천\n17·18·20대 국회의원민선 5기 인천광역시장\n바로가기\n\n\n서 갑\n김교흥\n단수 공천\n17대 국회의원\n바로가기\n\n\n서 을\n신동근\n단수 공천\n20대 국회의원\n바로가기\n\n\n광주광역시\n    \n\n동·남 갑\n윤영덕\n경선 공천\n\n바로가기\n\n\n동·남 을\n이병훈\n경선 공천\n\n바로가기\n\n\n서 갑\n송갑석\n단수 공천\n제20대 국회의원\n바로가기\n\n\n서 을\n양향자\n경선 공천\n전 삼성전자 상무이사\n바로가기\n\n\n북 갑\n조오섭\n경선 공천\n\n바로가기\n\n\n북 을\n형석\n경선 공천\n\n바로가기\n\n\n광산 갑\n이용빈\n단수 공천\n광주광역시당 광산구(갑) 지역위원장\n바로가기\n\n\n광산 을\n민형배\n경선 공천\n\n바로가기\n\n\n대전광역시\n    \n\n동\n장철민\n경선 공천\n\n바로가기\n\n\n중\n황운하\n경선 공천\n전 울산지방경찰청장\n바로가기\n\n\n서 갑\n박병석\n단수 공천\n16·17·18·19·20대 국회의원19대 국회 전반기 국회부의장\n바로가기\n\n\n서 을\n박범계\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n유성 갑\n조승래\n단수 공천\n20대 국회의원\n바로가기\n\n\n유성 을\n이상민\n경선 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n대덕\n박영순\n경선 공천\n전 대전광역시 정무부시장\n바로가기\n\n\n울산광역시\n    \n\n중\n임동호\n경선 공천\n\n바로가기\n\n\n남 갑\n심규명\n경선 공천\n변호사\n바로가기\n\n\n남 을\n박성진\n경선 공천\n\n바로가기\n\n\n동\n김태선\n경선 공천\n\n바로가기\n\n\n북\n이상헌\n경선 공천\n20대 국회의원\n바로가기\n\n\n울주\n김영문\n단수 공천\n관세청장 (2017년~2019년)\n바로가기\n\n\n세종특별자치시\n    \n\n세종 갑\n홍성국\n전략 공천\n전 미래에셋대우 대표이사\n바로가기\n\n\n세종 을\n강준현\n경선 공천\n전 세종시 정무부시장\n바로가기\n\n\n경기도\n    \n\n수원 갑\n김승원\n경선 공천\n\n바로가기\n\n\n수원 을\n백혜련\n단수 공천\n20대 국회의원\n바로가기\n\n\n수원 병\n김영진\n단수 공천\n20대 국회의원\n바로가기\n\n\n수원 정\n박광온\n단수 공천\n20대 국회의원\n바로가기\n\n\n수원 무\n김진표\n단수 공천\n20대 국회의원\n바로가기\n\n\n성남 수정\n김태년\n단수 공천\n20대 국회의원\n바로가기\n\n\n성남 중원\n윤영찬\n경선 공천\n전 청와대 국민소통수석네이버 부사장\n바로가기\n\n\n성남 분당 갑\n김병관\n경선 공천\n20대 국회의원\n바로가기\n\n\n성남 분당 을\n김병욱\n단수 공천\n20대 국회의원\n바로가기\n\n\n의정부 갑\n오영환\n전략 공천\n\n바로가기\n\n\n의정부 을\n김민철\n경선 공천\n\n바로가기\n\n\n안양 만안\n강득구\n경선 공천\n전 경기도 연정부지사경기도의회 의장\n바로가기\n\n\n안양 동안 갑\n민병덕\n경선 공천\n변호사\n바로가기\n\n\n안양 동안 을\n이재정\n경선 공천\n20대 국회의원(비례대표)\n바로가기\n\n\n부천 갑\n김경협\n단수 공천\n20대 국회의원\n바로가기\n\n\n부천 을\n설훈\n경선 공천\n20대 국회의원\n바로가기\n\n\n부천 병\n김상희\n단수 공천\n20대 국회의원\n바로가기\n\n\n부천 정\n서영석\n경선 공천\n\n바로가기\n\n\n광명 갑\n임오경\n전략 공천\n전 핸드볼 감독전 국가대표 핸드볼 선수\n바로가기\n\n\n광명 을\n양기대\n경선 공천\n전 광명시장\n바로가기\n\n\n평택 갑\n홍기원\n경선 공천\n\n바로가기\n\n\n평택 을\n김현정\n전략 공천\n\n바로가기\n\n\n동두천·연천\n서동욱\n경선 공천\n\n바로가기\n\n\n안산 상록 갑\n전해철\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n안산 상록 을\n김철민\n단수 공천\n20대 국회의원전 안산시장\n바로가기\n\n\n안산 단원 갑\n고영인\n경선 공천\n\n바로가기\n\n\n안산 단원 을\n김남국\n전략 공천\n변호사\n바로가기\n\n\n고양 갑\n문명순\n단수 공천\n\n바로가기\n\n\n고양 을\n한준호\n전략 공천\n전 MBC 아나운서\n바로가기\n\n\n고양 병\n홍정민\n전략 공천\n변호사\n바로가기\n\n\n고양 정\n이용우\n전략 공천\n전 카카오뱅크 대표이사\n바로가기\n\n\n의왕·과천\n이소영\n전략 공천\n변호사\n바로가기\n\n\n구리\n윤호중\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n남양주 갑\n조응천\n경선 공천\n20대 국회의원전 청와대 공직기강비서관\n바로가기\n\n\n남양주 을\n김한정\n경선 공천\n20대 국회의원\n바로가기\n\n\n남양주 병\n김용민\n전략 공천\n변호사\n바로가기\n\n\n오산\n안민석\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n시흥 갑\n문정복\n경선 공천\n\n바로가기\n\n\n시흥 을\n조정식\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n군포\n이학영\n경선 공천\n19·20대 국회의원\n바로가기\n\n\n하남\n최종윤\n경선 공천\n\n바로가기\n\n\n용인 갑\n오세영\n경선 공천\n\n바로가기\n\n\n용인 을\n김민기\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n용인 병\n정춘숙\n경선 공천\n20대 국회의원(비례대표)\n바로가기\n\n\n용인 정\n이탄희\n전략 공천\n변호사전 수원지법 안양지원 판사\n바로가기\n\n\n파주 갑\n윤후덕\n경선 공천\n19·20대 국회의원\n바로가기\n\n\n파주 을\n박정\n단수 공천\n20대 국회의원\n바로가기\n\n\n이천\n김용진\n경선 공천\n전 기획재정부 차관\n바로가기\n\n\n안성\n이규민\n경선 공천\n\n바로가기\n\n\n김포 갑\n김주영\n전략 공천\n전 한국노총 위원장\n바로가기\n\n\n김포 을\n박상혁\n경선 공천\n\n바로가기\n\n\n화성 갑\n송옥주\n경선 공천\n20대 국회의원(비례대표)\n바로가기\n\n\n화성 을\n이원욱\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n화성 병\n권칠승\n단수 공천\n20대 국회의원\n바로가기\n\n\n광주 갑\n소병훈\n경선 공천\n20대 국회의원\n바로가기\n\n\n광주 을\n임종성\n단수 공천\n20대 국회의원\n바로가기\n\n\n양주\n정성호\n단수 공천\n17·19·20대 국회의원\n바로가기\n\n\n포천·가평\n이철휘\n경선 공천\n\n바로가기\n\n\n여주·양평\n최재관\n경선 공천\n\n바로가기\n\n\n강원도\n    \n\n춘천·철원·화천·양구 갑\n허영\n경선 공천\n\n바로가기\n\n\n춘천·철원·화천·양구 을\n정만호\n경선 공천\n\n바로가기\n\n\n홍천·횡성·영월·평창\n원경환\n단수 공천\n전 서울지방경찰청장\n바로가기\n\n\n원주 갑\n이광재\n경선 공천\n17·18대 국회의원전 강원도지사\n바로가기\n\n\n원주 을\n송기헌\n단수 공천\n20대 국회의원\n바로가기\n\n\n강릉\n김경수\n단수 공천\n\n바로가기\n\n\n동해·태백·삼척·정선\n김동완\n경선 공천\n\n바로가기\n\n\n속초·인제·고성·양양\n이동기\n경선 공천\n\n바로가기\n\n\n충청북도\n    \n\n청주 상당\n정정순\n경선 공천\n\n바로가기\n\n\n청주 서원\n이장섭\n경선 공천\n\n바로가기\n\n\n청주 흥덕\n도종환\n단수 공천\n19·20대 국회의원전 문화체육관광부 장관\n바로가기\n\n\n청주 청원\n변재일\n단수 공천\n17·18·19·20대 국회의원\n바로가기\n\n\n충주\n김경욱\n단수 공천\n\n바로가기\n\n\n제천·단양\n이후삼\n경선 공천\n20대 국회의원\n바로가기\n\n\n보은·옥천·영동·괴산\n곽상언\n경선 공천\n변호사\n바로가기\n\n\n증평·진천·음성\n임호선\n단수 공천\n\n바로가기\n\n\n충청남도\n    \n\n천안 갑\n문진석\n전략 공천\n\n바로가기\n\n\n천안 을\n박완주\n단수 공천\n19·20대 국회의원\n바로가기\n\n\n천안 병\n이정문\n경선 공천\n\n바로가기\n\n\n아산 갑\n복기왕\n단수 공천\n17대 국회의원전 아산시장\n바로가기\n\n\n아산 을\n강훈식\n단수 공천\n20대 국회의원\n바로가기\n\n\n공주·부여·청양\n박수현\n단수 공천\n19대 국회의원전 청와대 대변인\n바로가기\n\n\n당진\n어기구\n경선 공천\n20대 국회의원\n바로가기\n\n\n서산·태안\n조한기\n단수 공천\n\n바로가기\n\n\n논산·계룡·금산\n김종민\n경선 공천\n20대 국회의원\n바로가기\n\n\n홍성·예산\n김학민\n경선 공천\n\n바로가기\n\n\n보령·서천\n나소열\n단수 공천\n전 서천군수\n바로가기\n\n\n전라북도\n    \n\n전주 갑\n김윤덕\n경선 공천\n제19대 국회의원\n바로가기\n\n\n전주 을\n이상직\n경선 공천\n제19대 국회의원전 이스타항공 총괄회장\n바로가기\n\n\n전주 병\n김성주\n단수 공천\n제19대 국회의원\n바로가기\n\n\n군산\n신영대\n단수 공천\n\n바로가기\n\n\n익산 갑\n김수흥\n경선 공천\n전 국회사무처 사무차장\n바로가기\n\n\n익산 을\n한병도\n경선 공천\n제17대 국회의원\n바로가기\n\n\n정읍·고창\n윤준병\n단수 공천\n전 서울특별시 행정1부시장\n바로가기\n\n\n남원·임실·순창\n이강래\n경선 공천\n제16·17·18대 국회의원전 한국도로공사 사장\n바로가기\n\n\n김제·부안\n이원택\n단수 공천\n전 문재인 정부 청와대 행정관전 전라북도 정무부지사\n바로가기\n\n\n완주·진안·무주·장수\n안호영\n경선 공천\n제20대 국회의원\n바로가기\n\n\n전라남도\n    \n\n목포\n김원이\n경선 공천\n전 서울특별시 정무부시장\n바로가기\n\n\n여수 갑\n주철현\n경선 공천\n전 여수시장(민선 6기)전 대검찰청 강력부장\n바로가기\n\n\n여수 을\n김회재\n경선 공천\n\n바로가기\n\n\n순천·광양·곡성·구례 갑\n소병철\n전략 공천\n전 법무연수원장농협대학교, 순천대학교, 법무연수원 석좌교수\n바로가기\n\n\n순천·광양·곡성·구례 을\n서동용\n경선 공천\n\n바로가기\n\n\n나주·화순\n신정훈\n경선 공천\n제19대 국회의원\n바로가기\n\n\n담양·함평·영광·장성\n이개호\n단수 공천\n제19·20대 국회의원전 농림축산식품부 장관전 전라남도 제35대 행정부지사\n바로가기\n\n\n무안·신안·영암\n서삼석\n경선 공천\n제20대 국회의원제42·43·44대 무안군수제5·6대 전라남도의회 의원\n바로가기\n\n\n고흥·보성·장흥·강진\n김승남\n경선 공천\n제19대 국회의원\n바로가기\n\n\n해남·진도·완도\n윤재갑\n경선 공천\n전 해군 군수사령부 사령관목포해양대학교 초빙교수\n바로가기\n\n\n경상북도\n    \n\n포항 북\n오중기\n단수 공천\n-\n바로가기\n\n\n포항 남·울릉\n허대만\n단수 공천\n-\n바로가기\n\n\n구미 갑\n김철호\n경선 공천\n-\n바로가기\n\n\n구미 을\n김현권\n단수 공천\n-\n바로가기\n\n\n경산\n전상헌\n경선 공천\n-\n바로가기\n\n\n김천\n배영애\n단수 공천\n-\n바로가기\n\n\n경주\n정다은\n전략 공천\n-\n바로가기\n\n\n안동·예천\n이삼걸\n단수 공천\n-\n바로가기\n\n\n영천·청도\n정우동\n단수 공천\n-\n바로가기\n\n\n군위·의성·청송·영덕\n강부송\n단수 공천\n-\n바로가기\n\n\n상주·문경\n정용운\n단수 공천\n-\n바로가기\n\n\n영주·영양·봉화·울진\n황재선\n경선 공천\n-\n바로가기\n\n\n고령·성주·칠곡\n장세호\n단수 공천\n-\n바로가기\n\n\n경상남도\n    \n\n창원 의창\n김기운\n경선 공천\n\n바로가기\n\n\n창원 성산\n이흥석\n단수 공천\n\n바로가기\n\n\n창원 마산합포\n박남현\n경선 공천\n\n바로가기\n\n\n창원 마산회원\n하귀남\n단수 공천\n\n바로가기\n\n\n창원 진해\n황기철\n단수 공천\n제30대 해군참모총장\n바로가기\n\n\n진주 갑\n정영훈\n경선 공천\n\n바로가기\n\n\n진주 을\n한경호\n단수 공천\n\n바로가기\n\n\n김해 갑\n민홍철\n단수 공천\n제19·20대 국회의원\n바로가기\n\n\n김해 을\n김정호\n경선 공천\n제20대 국회의원\n바로가기\n\n\n양산 갑\n이재영\n전략 공천\n대외경제정책연구원 원장외교부 정책자문위원\n바로가기\n\n\n양산 을\n김두관\n전략 공천\n제20대 국회의원(경기 김포 갑)제34대 경상남도지사제38·39대 남해군수\n바로가기\n\n\n통영·고성\n양문석\n단수 공천\n\n바로가기\n\n\n거제\n문상모\n경선 공천\n\n바로가기\n\n\n밀양·의령·함안·창녕\n조성환\n단수 공천\n\n바로가기\n\n\n사천·남해·하동\n황인성\n단수 공천\n\n바로가기\n\n\n산청·함양·거창·합천\n서필상\n단수 공천\n\n바로가기\n\n\n제주특별자치도\n    \n\n제주 갑\n송재호\n전략 공천\n\n바로가기\n\n\n제주 을\n오영훈\n경선 공천\n제20대 국회의원\n바로가기\n\n\n서귀포\n위성곤\n단수 공천\n제20대 국회의원\n바로가기"
  }
]